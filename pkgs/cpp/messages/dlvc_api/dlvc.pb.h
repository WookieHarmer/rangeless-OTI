// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dlvc_api/dlvc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dlvc_5fapi_2fdlvc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dlvc_5fapi_2fdlvc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dlvc_5fapi_2fdlvc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dlvc_5fapi_2fdlvc_2eproto;
namespace dlvc_api {
class DuplicateDetails;
class DuplicateDetailsDefaultTypeInternal;
extern DuplicateDetailsDefaultTypeInternal _DuplicateDetails_default_instance_;
class GetRawMessageRequest;
class GetRawMessageRequestDefaultTypeInternal;
extern GetRawMessageRequestDefaultTypeInternal _GetRawMessageRequest_default_instance_;
class GetRawMessageResponse;
class GetRawMessageResponseDefaultTypeInternal;
extern GetRawMessageResponseDefaultTypeInternal _GetRawMessageResponse_default_instance_;
class GetRawMessagesRequest;
class GetRawMessagesRequestDefaultTypeInternal;
extern GetRawMessagesRequestDefaultTypeInternal _GetRawMessagesRequest_default_instance_;
class GetRawMessagesResponse;
class GetRawMessagesResponseDefaultTypeInternal;
extern GetRawMessagesResponseDefaultTypeInternal _GetRawMessagesResponse_default_instance_;
class ListExercisesRequest;
class ListExercisesRequestDefaultTypeInternal;
extern ListExercisesRequestDefaultTypeInternal _ListExercisesRequest_default_instance_;
class ListExercisesResponse;
class ListExercisesResponseDefaultTypeInternal;
extern ListExercisesResponseDefaultTypeInternal _ListExercisesResponse_default_instance_;
class ListMetadataValuesRequest;
class ListMetadataValuesRequestDefaultTypeInternal;
extern ListMetadataValuesRequestDefaultTypeInternal _ListMetadataValuesRequest_default_instance_;
class ListMetadataValuesResponse;
class ListMetadataValuesResponseDefaultTypeInternal;
extern ListMetadataValuesResponseDefaultTypeInternal _ListMetadataValuesResponse_default_instance_;
class MessageEncoding;
class MessageEncodingDefaultTypeInternal;
extern MessageEncodingDefaultTypeInternal _MessageEncoding_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionBoundingBox;
class PositionBoundingBoxDefaultTypeInternal;
extern PositionBoundingBoxDefaultTypeInternal _PositionBoundingBox_default_instance_;
class PushRawMessageRequest;
class PushRawMessageRequestDefaultTypeInternal;
extern PushRawMessageRequestDefaultTypeInternal _PushRawMessageRequest_default_instance_;
class PushRawMessageResponse;
class PushRawMessageResponseDefaultTypeInternal;
extern PushRawMessageResponseDefaultTypeInternal _PushRawMessageResponse_default_instance_;
class PushRawMessagesRequest;
class PushRawMessagesRequestDefaultTypeInternal;
extern PushRawMessagesRequestDefaultTypeInternal _PushRawMessagesRequest_default_instance_;
class PushRawMessagesResponse;
class PushRawMessagesResponseDefaultTypeInternal;
extern PushRawMessagesResponseDefaultTypeInternal _PushRawMessagesResponse_default_instance_;
class SourceType;
class SourceTypeDefaultTypeInternal;
extern SourceTypeDefaultTypeInternal _SourceType_default_instance_;
class SummarizeRequest;
class SummarizeRequestDefaultTypeInternal;
extern SummarizeRequestDefaultTypeInternal _SummarizeRequest_default_instance_;
class SummarizeResponse;
class SummarizeResponseDefaultTypeInternal;
extern SummarizeResponseDefaultTypeInternal _SummarizeResponse_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class UserDefinedMetadata;
class UserDefinedMetadataDefaultTypeInternal;
extern UserDefinedMetadataDefaultTypeInternal _UserDefinedMetadata_default_instance_;
class WrappedMessage;
class WrappedMessageDefaultTypeInternal;
extern WrappedMessageDefaultTypeInternal _WrappedMessage_default_instance_;
}  // namespace dlvc_api
PROTOBUF_NAMESPACE_OPEN
template<> ::dlvc_api::DuplicateDetails* Arena::CreateMaybeMessage<::dlvc_api::DuplicateDetails>(Arena*);
template<> ::dlvc_api::GetRawMessageRequest* Arena::CreateMaybeMessage<::dlvc_api::GetRawMessageRequest>(Arena*);
template<> ::dlvc_api::GetRawMessageResponse* Arena::CreateMaybeMessage<::dlvc_api::GetRawMessageResponse>(Arena*);
template<> ::dlvc_api::GetRawMessagesRequest* Arena::CreateMaybeMessage<::dlvc_api::GetRawMessagesRequest>(Arena*);
template<> ::dlvc_api::GetRawMessagesResponse* Arena::CreateMaybeMessage<::dlvc_api::GetRawMessagesResponse>(Arena*);
template<> ::dlvc_api::ListExercisesRequest* Arena::CreateMaybeMessage<::dlvc_api::ListExercisesRequest>(Arena*);
template<> ::dlvc_api::ListExercisesResponse* Arena::CreateMaybeMessage<::dlvc_api::ListExercisesResponse>(Arena*);
template<> ::dlvc_api::ListMetadataValuesRequest* Arena::CreateMaybeMessage<::dlvc_api::ListMetadataValuesRequest>(Arena*);
template<> ::dlvc_api::ListMetadataValuesResponse* Arena::CreateMaybeMessage<::dlvc_api::ListMetadataValuesResponse>(Arena*);
template<> ::dlvc_api::MessageEncoding* Arena::CreateMaybeMessage<::dlvc_api::MessageEncoding>(Arena*);
template<> ::dlvc_api::Metadata* Arena::CreateMaybeMessage<::dlvc_api::Metadata>(Arena*);
template<> ::dlvc_api::Position* Arena::CreateMaybeMessage<::dlvc_api::Position>(Arena*);
template<> ::dlvc_api::PositionBoundingBox* Arena::CreateMaybeMessage<::dlvc_api::PositionBoundingBox>(Arena*);
template<> ::dlvc_api::PushRawMessageRequest* Arena::CreateMaybeMessage<::dlvc_api::PushRawMessageRequest>(Arena*);
template<> ::dlvc_api::PushRawMessageResponse* Arena::CreateMaybeMessage<::dlvc_api::PushRawMessageResponse>(Arena*);
template<> ::dlvc_api::PushRawMessagesRequest* Arena::CreateMaybeMessage<::dlvc_api::PushRawMessagesRequest>(Arena*);
template<> ::dlvc_api::PushRawMessagesResponse* Arena::CreateMaybeMessage<::dlvc_api::PushRawMessagesResponse>(Arena*);
template<> ::dlvc_api::SourceType* Arena::CreateMaybeMessage<::dlvc_api::SourceType>(Arena*);
template<> ::dlvc_api::SummarizeRequest* Arena::CreateMaybeMessage<::dlvc_api::SummarizeRequest>(Arena*);
template<> ::dlvc_api::SummarizeResponse* Arena::CreateMaybeMessage<::dlvc_api::SummarizeResponse>(Arena*);
template<> ::dlvc_api::TimeRange* Arena::CreateMaybeMessage<::dlvc_api::TimeRange>(Arena*);
template<> ::dlvc_api::UserDefinedMetadata* Arena::CreateMaybeMessage<::dlvc_api::UserDefinedMetadata>(Arena*);
template<> ::dlvc_api::WrappedMessage* Arena::CreateMaybeMessage<::dlvc_api::WrappedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dlvc_api {

enum WrappedMessage_MessageType : int {
  WrappedMessage_MessageType_UNSPECIFIED = 0,
  WrappedMessage_MessageType_CUSTOM = 1,
  WrappedMessage_MessageType_DIS7 = 2,
  WrappedMessage_MessageType_COT = 3,
  WrappedMessage_MessageType_LINK16 = 4,
  WrappedMessage_MessageType_JREAP = 5,
  WrappedMessage_MessageType_INSTRUCTOR_COMMENT = 6,
  WrappedMessage_MessageType_WrappedMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WrappedMessage_MessageType_WrappedMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WrappedMessage_MessageType_IsValid(int value);
constexpr WrappedMessage_MessageType WrappedMessage_MessageType_MessageType_MIN = WrappedMessage_MessageType_UNSPECIFIED;
constexpr WrappedMessage_MessageType WrappedMessage_MessageType_MessageType_MAX = WrappedMessage_MessageType_INSTRUCTOR_COMMENT;
constexpr int WrappedMessage_MessageType_MessageType_ARRAYSIZE = WrappedMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WrappedMessage_MessageType_descriptor();
template<typename T>
inline const std::string& WrappedMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WrappedMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WrappedMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WrappedMessage_MessageType_descriptor(), enum_t_value);
}
inline bool WrappedMessage_MessageType_Parse(
    const std::string& name, WrappedMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WrappedMessage_MessageType>(
    WrappedMessage_MessageType_descriptor(), name, value);
}
enum Metadata_ForceColor : int {
  Metadata_ForceColor_UNSPECIFIED = 0,
  Metadata_ForceColor_BLUE = 1,
  Metadata_ForceColor_RED = 2,
  Metadata_ForceColor_WHITE = 3,
  Metadata_ForceColor_GREEN = 4,
  Metadata_ForceColor_Metadata_ForceColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Metadata_ForceColor_Metadata_ForceColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Metadata_ForceColor_IsValid(int value);
constexpr Metadata_ForceColor Metadata_ForceColor_ForceColor_MIN = Metadata_ForceColor_UNSPECIFIED;
constexpr Metadata_ForceColor Metadata_ForceColor_ForceColor_MAX = Metadata_ForceColor_GREEN;
constexpr int Metadata_ForceColor_ForceColor_ARRAYSIZE = Metadata_ForceColor_ForceColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_ForceColor_descriptor();
template<typename T>
inline const std::string& Metadata_ForceColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Metadata_ForceColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Metadata_ForceColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Metadata_ForceColor_descriptor(), enum_t_value);
}
inline bool Metadata_ForceColor_Parse(
    const std::string& name, Metadata_ForceColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Metadata_ForceColor>(
    Metadata_ForceColor_descriptor(), name, value);
}
enum MessageEncoding_EncodingType : int {
  MessageEncoding_EncodingType_UNSPECIFIED = 0,
  MessageEncoding_EncodingType_CUSTOM = 1,
  MessageEncoding_EncodingType_TEXT = 2,
  MessageEncoding_EncodingType_JSON = 3,
  MessageEncoding_EncodingType_XML = 4,
  MessageEncoding_EncodingType_CSV = 5,
  MessageEncoding_EncodingType_MessageEncoding_EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageEncoding_EncodingType_MessageEncoding_EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageEncoding_EncodingType_IsValid(int value);
constexpr MessageEncoding_EncodingType MessageEncoding_EncodingType_EncodingType_MIN = MessageEncoding_EncodingType_UNSPECIFIED;
constexpr MessageEncoding_EncodingType MessageEncoding_EncodingType_EncodingType_MAX = MessageEncoding_EncodingType_CSV;
constexpr int MessageEncoding_EncodingType_EncodingType_ARRAYSIZE = MessageEncoding_EncodingType_EncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageEncoding_EncodingType_descriptor();
template<typename T>
inline const std::string& MessageEncoding_EncodingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageEncoding_EncodingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageEncoding_EncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageEncoding_EncodingType_descriptor(), enum_t_value);
}
inline bool MessageEncoding_EncodingType_Parse(
    const std::string& name, MessageEncoding_EncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageEncoding_EncodingType>(
    MessageEncoding_EncodingType_descriptor(), name, value);
}
enum Position_TFOM : int {
  Position_TFOM_UNSPECIFIED = 0,
  Position_TFOM_LTE_1_NANOSECOND = 1,
  Position_TFOM_LTE_10_NANOSECONDS = 2,
  Position_TFOM_LTE_100_NANOSECONDS = 3,
  Position_TFOM_LTE_1_MICROSECOND = 4,
  Position_TFOM_LTE_10_MICROSECONDS = 5,
  Position_TFOM_LTE_100_MICROSECONDS = 6,
  Position_TFOM_LTE_1_MILLISECOND = 7,
  Position_TFOM_LTE_10_MILLISECONDS = 8,
  Position_TFOM_LTE_100_MILLISECONDS = 9,
  Position_TFOM_LTE_1_SECOND = 10,
  Position_TFOM_LTE_10_SECONDS = 11,
  Position_TFOM_LTE_100_SECONDS = 12,
  Position_TFOM_LTE_1000_SECONDS = 13,
  Position_TFOM_GT_1000_SECONDS = 14,
  Position_TFOM_Position_TFOM_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Position_TFOM_Position_TFOM_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Position_TFOM_IsValid(int value);
constexpr Position_TFOM Position_TFOM_TFOM_MIN = Position_TFOM_UNSPECIFIED;
constexpr Position_TFOM Position_TFOM_TFOM_MAX = Position_TFOM_GT_1000_SECONDS;
constexpr int Position_TFOM_TFOM_ARRAYSIZE = Position_TFOM_TFOM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_TFOM_descriptor();
template<typename T>
inline const std::string& Position_TFOM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position_TFOM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_TFOM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Position_TFOM_descriptor(), enum_t_value);
}
inline bool Position_TFOM_Parse(
    const std::string& name, Position_TFOM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Position_TFOM>(
    Position_TFOM_descriptor(), name, value);
}
enum MessageRetrievalType : int {
  UNSPECIFIED = 0,
  INDEX = 1,
  TIME = 2,
  MESSAGE_TYPE = 3,
  ENCODING_TYPE = 4,
  METADATA = 5,
  USER_DEFINED_METADATA = 6,
  POSITION_BOUNDING_BOX = 7,
  MessageRetrievalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageRetrievalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageRetrievalType_IsValid(int value);
constexpr MessageRetrievalType MessageRetrievalType_MIN = UNSPECIFIED;
constexpr MessageRetrievalType MessageRetrievalType_MAX = POSITION_BOUNDING_BOX;
constexpr int MessageRetrievalType_ARRAYSIZE = MessageRetrievalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRetrievalType_descriptor();
template<typename T>
inline const std::string& MessageRetrievalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageRetrievalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageRetrievalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageRetrievalType_descriptor(), enum_t_value);
}
inline bool MessageRetrievalType_Parse(
    const std::string& name, MessageRetrievalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageRetrievalType>(
    MessageRetrievalType_descriptor(), name, value);
}
enum ReturnedMetadataType : int {
  RETURN_UNSPECIFIED = 0,
  RETURN_NONE = 1,
  RETURN_ALL = 2,
  RETURN_TIME = 3,
  RETURN_SOURCE_TYPE = 4,
  RETURN_METADATA = 5,
  RETURN_USER_DEFINED_METADATA = 6,
  RETURN_POSITION = 7,
  ReturnedMetadataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReturnedMetadataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReturnedMetadataType_IsValid(int value);
constexpr ReturnedMetadataType ReturnedMetadataType_MIN = RETURN_UNSPECIFIED;
constexpr ReturnedMetadataType ReturnedMetadataType_MAX = RETURN_POSITION;
constexpr int ReturnedMetadataType_ARRAYSIZE = ReturnedMetadataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnedMetadataType_descriptor();
template<typename T>
inline const std::string& ReturnedMetadataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReturnedMetadataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReturnedMetadataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReturnedMetadataType_descriptor(), enum_t_value);
}
inline bool ReturnedMetadataType_Parse(
    const std::string& name, ReturnedMetadataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReturnedMetadataType>(
    ReturnedMetadataType_descriptor(), name, value);
}
// ===================================================================

class PushRawMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.PushRawMessageRequest) */ {
 public:
  PushRawMessageRequest();
  virtual ~PushRawMessageRequest();

  PushRawMessageRequest(const PushRawMessageRequest& from);
  PushRawMessageRequest(PushRawMessageRequest&& from) noexcept
    : PushRawMessageRequest() {
    *this = ::std::move(from);
  }

  inline PushRawMessageRequest& operator=(const PushRawMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRawMessageRequest& operator=(PushRawMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushRawMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushRawMessageRequest* internal_default_instance() {
    return reinterpret_cast<const PushRawMessageRequest*>(
               &_PushRawMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PushRawMessageRequest* other);
  friend void swap(PushRawMessageRequest& a, PushRawMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushRawMessageRequest* New() const final {
    return CreateMaybeMessage<PushRawMessageRequest>(nullptr);
  }

  PushRawMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushRawMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushRawMessageRequest& from);
  void MergeFrom(const PushRawMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushRawMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.PushRawMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dlvc_api.WrappedMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::dlvc_api::WrappedMessage& message() const;
  ::dlvc_api::WrappedMessage* release_message();
  ::dlvc_api::WrappedMessage* mutable_message();
  void set_allocated_message(::dlvc_api::WrappedMessage* message);

  // @@protoc_insertion_point(class_scope:dlvc_api.PushRawMessageRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::dlvc_api::WrappedMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class PushRawMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.PushRawMessageResponse) */ {
 public:
  PushRawMessageResponse();
  virtual ~PushRawMessageResponse();

  PushRawMessageResponse(const PushRawMessageResponse& from);
  PushRawMessageResponse(PushRawMessageResponse&& from) noexcept
    : PushRawMessageResponse() {
    *this = ::std::move(from);
  }

  inline PushRawMessageResponse& operator=(const PushRawMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRawMessageResponse& operator=(PushRawMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushRawMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushRawMessageResponse* internal_default_instance() {
    return reinterpret_cast<const PushRawMessageResponse*>(
               &_PushRawMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PushRawMessageResponse* other);
  friend void swap(PushRawMessageResponse& a, PushRawMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushRawMessageResponse* New() const final {
    return CreateMaybeMessage<PushRawMessageResponse>(nullptr);
  }

  PushRawMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushRawMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushRawMessageResponse& from);
  void MergeFrom(const PushRawMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushRawMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.PushRawMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  bool has_duplicate_details() const;
  void clear_duplicate_details();
  static const int kDuplicateDetailsFieldNumber = 2;
  const ::dlvc_api::DuplicateDetails& duplicate_details() const;
  ::dlvc_api::DuplicateDetails* release_duplicate_details();
  ::dlvc_api::DuplicateDetails* mutable_duplicate_details();
  void set_allocated_duplicate_details(::dlvc_api::DuplicateDetails* duplicate_details);

  // @@protoc_insertion_point(class_scope:dlvc_api.PushRawMessageResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::dlvc_api::DuplicateDetails* duplicate_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class PushRawMessagesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.PushRawMessagesRequest) */ {
 public:
  PushRawMessagesRequest();
  virtual ~PushRawMessagesRequest();

  PushRawMessagesRequest(const PushRawMessagesRequest& from);
  PushRawMessagesRequest(PushRawMessagesRequest&& from) noexcept
    : PushRawMessagesRequest() {
    *this = ::std::move(from);
  }

  inline PushRawMessagesRequest& operator=(const PushRawMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRawMessagesRequest& operator=(PushRawMessagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushRawMessagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushRawMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const PushRawMessagesRequest*>(
               &_PushRawMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PushRawMessagesRequest* other);
  friend void swap(PushRawMessagesRequest& a, PushRawMessagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushRawMessagesRequest* New() const final {
    return CreateMaybeMessage<PushRawMessagesRequest>(nullptr);
  }

  PushRawMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushRawMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushRawMessagesRequest& from);
  void MergeFrom(const PushRawMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushRawMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.PushRawMessagesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
  int user_metadata_size() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 3;
  ::dlvc_api::UserDefinedMetadata* mutable_user_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
      mutable_user_metadata();
  const ::dlvc_api::UserDefinedMetadata& user_metadata(int index) const;
  ::dlvc_api::UserDefinedMetadata* add_user_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
      user_metadata() const;

  // repeated .dlvc_api.WrappedMessage messages = 4;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  ::dlvc_api::WrappedMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >*
      mutable_messages();
  const ::dlvc_api::WrappedMessage& messages(int index) const;
  ::dlvc_api::WrappedMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >&
      messages() const;

  // .dlvc_api.Metadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::dlvc_api::Metadata& metadata() const;
  ::dlvc_api::Metadata* release_metadata();
  ::dlvc_api::Metadata* mutable_metadata();
  void set_allocated_metadata(::dlvc_api::Metadata* metadata);

  // @@protoc_insertion_point(class_scope:dlvc_api.PushRawMessagesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata > user_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage > messages_;
  ::dlvc_api::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class PushRawMessagesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.PushRawMessagesResponse) */ {
 public:
  PushRawMessagesResponse();
  virtual ~PushRawMessagesResponse();

  PushRawMessagesResponse(const PushRawMessagesResponse& from);
  PushRawMessagesResponse(PushRawMessagesResponse&& from) noexcept
    : PushRawMessagesResponse() {
    *this = ::std::move(from);
  }

  inline PushRawMessagesResponse& operator=(const PushRawMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRawMessagesResponse& operator=(PushRawMessagesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushRawMessagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushRawMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const PushRawMessagesResponse*>(
               &_PushRawMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PushRawMessagesResponse* other);
  friend void swap(PushRawMessagesResponse& a, PushRawMessagesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushRawMessagesResponse* New() const final {
    return CreateMaybeMessage<PushRawMessagesResponse>(nullptr);
  }

  PushRawMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushRawMessagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushRawMessagesResponse& from);
  void MergeFrom(const PushRawMessagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushRawMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.PushRawMessagesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  bool has_duplicate_details() const;
  void clear_duplicate_details();
  static const int kDuplicateDetailsFieldNumber = 2;
  const ::dlvc_api::DuplicateDetails& duplicate_details() const;
  ::dlvc_api::DuplicateDetails* release_duplicate_details();
  ::dlvc_api::DuplicateDetails* mutable_duplicate_details();
  void set_allocated_duplicate_details(::dlvc_api::DuplicateDetails* duplicate_details);

  // @@protoc_insertion_point(class_scope:dlvc_api.PushRawMessagesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::dlvc_api::DuplicateDetails* duplicate_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class DuplicateDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.DuplicateDetails) */ {
 public:
  DuplicateDetails();
  virtual ~DuplicateDetails();

  DuplicateDetails(const DuplicateDetails& from);
  DuplicateDetails(DuplicateDetails&& from) noexcept
    : DuplicateDetails() {
    *this = ::std::move(from);
  }

  inline DuplicateDetails& operator=(const DuplicateDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuplicateDetails& operator=(DuplicateDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DuplicateDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DuplicateDetails* internal_default_instance() {
    return reinterpret_cast<const DuplicateDetails*>(
               &_DuplicateDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DuplicateDetails* other);
  friend void swap(DuplicateDetails& a, DuplicateDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DuplicateDetails* New() const final {
    return CreateMaybeMessage<DuplicateDetails>(nullptr);
  }

  DuplicateDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DuplicateDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DuplicateDetails& from);
  void MergeFrom(const DuplicateDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DuplicateDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.DuplicateDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string idempotency_keys = 3;
  int idempotency_keys_size() const;
  void clear_idempotency_keys();
  static const int kIdempotencyKeysFieldNumber = 3;
  const std::string& idempotency_keys(int index) const;
  std::string* mutable_idempotency_keys(int index);
  void set_idempotency_keys(int index, const std::string& value);
  void set_idempotency_keys(int index, std::string&& value);
  void set_idempotency_keys(int index, const char* value);
  void set_idempotency_keys(int index, const char* value, size_t size);
  std::string* add_idempotency_keys();
  void add_idempotency_keys(const std::string& value);
  void add_idempotency_keys(std::string&& value);
  void add_idempotency_keys(const char* value);
  void add_idempotency_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& idempotency_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_idempotency_keys();

  // bool duplicates = 2;
  void clear_duplicates();
  static const int kDuplicatesFieldNumber = 2;
  bool duplicates() const;
  void set_duplicates(bool value);

  // @@protoc_insertion_point(class_scope:dlvc_api.DuplicateDetails)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> idempotency_keys_;
  bool duplicates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class GetRawMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.GetRawMessageRequest) */ {
 public:
  GetRawMessageRequest();
  virtual ~GetRawMessageRequest();

  GetRawMessageRequest(const GetRawMessageRequest& from);
  GetRawMessageRequest(GetRawMessageRequest&& from) noexcept
    : GetRawMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetRawMessageRequest& operator=(const GetRawMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawMessageRequest& operator=(GetRawMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawMessageRequest*>(
               &_GetRawMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetRawMessageRequest* other);
  friend void swap(GetRawMessageRequest& a, GetRawMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawMessageRequest* New() const final {
    return CreateMaybeMessage<GetRawMessageRequest>(nullptr);
  }

  GetRawMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawMessageRequest& from);
  void MergeFrom(const GetRawMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.GetRawMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  int retrieval_types_size() const;
  void clear_retrieval_types();
  static const int kRetrievalTypesFieldNumber = 2;
  ::dlvc_api::MessageRetrievalType retrieval_types(int index) const;
  void set_retrieval_types(int index, ::dlvc_api::MessageRetrievalType value);
  void add_retrieval_types(::dlvc_api::MessageRetrievalType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& retrieval_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_retrieval_types();

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  int returned_metadata_types_size() const;
  void clear_returned_metadata_types();
  static const int kReturnedMetadataTypesFieldNumber = 3;
  ::dlvc_api::ReturnedMetadataType returned_metadata_types(int index) const;
  void set_returned_metadata_types(int index, ::dlvc_api::ReturnedMetadataType value);
  void add_returned_metadata_types(::dlvc_api::ReturnedMetadataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& returned_metadata_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_returned_metadata_types();

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  int user_metadata_size() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 5;
  ::dlvc_api::UserDefinedMetadata* mutable_user_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
      mutable_user_metadata();
  const ::dlvc_api::UserDefinedMetadata& user_metadata(int index) const;
  ::dlvc_api::UserDefinedMetadata* add_user_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
      user_metadata() const;

  // .dlvc_api.Metadata metadata = 4;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::dlvc_api::Metadata& metadata() const;
  ::dlvc_api::Metadata* release_metadata();
  ::dlvc_api::Metadata* mutable_metadata();
  void set_allocated_metadata(::dlvc_api::Metadata* metadata);

  // .dlvc_api.SourceType source_type = 6;
  bool has_source_type() const;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 6;
  const ::dlvc_api::SourceType& source_type() const;
  ::dlvc_api::SourceType* release_source_type();
  ::dlvc_api::SourceType* mutable_source_type();
  void set_allocated_source_type(::dlvc_api::SourceType* source_type);

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 7;
  const ::dlvc_api::PositionBoundingBox& bounding_box() const;
  ::dlvc_api::PositionBoundingBox* release_bounding_box();
  ::dlvc_api::PositionBoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::dlvc_api::PositionBoundingBox* bounding_box);

  // .dlvc_api.TimeRange time_range = 8;
  bool has_time_range() const;
  void clear_time_range();
  static const int kTimeRangeFieldNumber = 8;
  const ::dlvc_api::TimeRange& time_range() const;
  ::dlvc_api::TimeRange* release_time_range();
  ::dlvc_api::TimeRange* mutable_time_range();
  void set_allocated_time_range(::dlvc_api::TimeRange* time_range);

  // int64 next_index = 9;
  void clear_next_index();
  static const int kNextIndexFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index() const;
  void set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dlvc_api.GetRawMessageRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> retrieval_types_;
  mutable std::atomic<int> _retrieval_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> returned_metadata_types_;
  mutable std::atomic<int> _returned_metadata_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata > user_metadata_;
  ::dlvc_api::Metadata* metadata_;
  ::dlvc_api::SourceType* source_type_;
  ::dlvc_api::PositionBoundingBox* bounding_box_;
  ::dlvc_api::TimeRange* time_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class GetRawMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.GetRawMessageResponse) */ {
 public:
  GetRawMessageResponse();
  virtual ~GetRawMessageResponse();

  GetRawMessageResponse(const GetRawMessageResponse& from);
  GetRawMessageResponse(GetRawMessageResponse&& from) noexcept
    : GetRawMessageResponse() {
    *this = ::std::move(from);
  }

  inline GetRawMessageResponse& operator=(const GetRawMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawMessageResponse& operator=(GetRawMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawMessageResponse*>(
               &_GetRawMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetRawMessageResponse* other);
  friend void swap(GetRawMessageResponse& a, GetRawMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawMessageResponse* New() const final {
    return CreateMaybeMessage<GetRawMessageResponse>(nullptr);
  }

  GetRawMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawMessageResponse& from);
  void MergeFrom(const GetRawMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.GetRawMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dlvc_api.WrappedMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::dlvc_api::WrappedMessage& message() const;
  ::dlvc_api::WrappedMessage* release_message();
  ::dlvc_api::WrappedMessage* mutable_message();
  void set_allocated_message(::dlvc_api::WrappedMessage* message);

  // int64 next_index = 3;
  void clear_next_index();
  static const int kNextIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index() const;
  void set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 len_bytes = 4;
  void clear_len_bytes();
  static const int kLenBytesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dlvc_api.GetRawMessageResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::dlvc_api::WrappedMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class GetRawMessagesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.GetRawMessagesRequest) */ {
 public:
  GetRawMessagesRequest();
  virtual ~GetRawMessagesRequest();

  GetRawMessagesRequest(const GetRawMessagesRequest& from);
  GetRawMessagesRequest(GetRawMessagesRequest&& from) noexcept
    : GetRawMessagesRequest() {
    *this = ::std::move(from);
  }

  inline GetRawMessagesRequest& operator=(const GetRawMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawMessagesRequest& operator=(GetRawMessagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawMessagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawMessagesRequest*>(
               &_GetRawMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetRawMessagesRequest* other);
  friend void swap(GetRawMessagesRequest& a, GetRawMessagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawMessagesRequest* New() const final {
    return CreateMaybeMessage<GetRawMessagesRequest>(nullptr);
  }

  GetRawMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawMessagesRequest& from);
  void MergeFrom(const GetRawMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.GetRawMessagesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  int retrieval_types_size() const;
  void clear_retrieval_types();
  static const int kRetrievalTypesFieldNumber = 2;
  ::dlvc_api::MessageRetrievalType retrieval_types(int index) const;
  void set_retrieval_types(int index, ::dlvc_api::MessageRetrievalType value);
  void add_retrieval_types(::dlvc_api::MessageRetrievalType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& retrieval_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_retrieval_types();

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  int returned_metadata_types_size() const;
  void clear_returned_metadata_types();
  static const int kReturnedMetadataTypesFieldNumber = 3;
  ::dlvc_api::ReturnedMetadataType returned_metadata_types(int index) const;
  void set_returned_metadata_types(int index, ::dlvc_api::ReturnedMetadataType value);
  void add_returned_metadata_types(::dlvc_api::ReturnedMetadataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& returned_metadata_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_returned_metadata_types();

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  int user_metadata_size() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 5;
  ::dlvc_api::UserDefinedMetadata* mutable_user_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
      mutable_user_metadata();
  const ::dlvc_api::UserDefinedMetadata& user_metadata(int index) const;
  ::dlvc_api::UserDefinedMetadata* add_user_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
      user_metadata() const;

  // .dlvc_api.Metadata metadata = 4;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::dlvc_api::Metadata& metadata() const;
  ::dlvc_api::Metadata* release_metadata();
  ::dlvc_api::Metadata* mutable_metadata();
  void set_allocated_metadata(::dlvc_api::Metadata* metadata);

  // .dlvc_api.SourceType source_type = 6;
  bool has_source_type() const;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 6;
  const ::dlvc_api::SourceType& source_type() const;
  ::dlvc_api::SourceType* release_source_type();
  ::dlvc_api::SourceType* mutable_source_type();
  void set_allocated_source_type(::dlvc_api::SourceType* source_type);

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 7;
  const ::dlvc_api::PositionBoundingBox& bounding_box() const;
  ::dlvc_api::PositionBoundingBox* release_bounding_box();
  ::dlvc_api::PositionBoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::dlvc_api::PositionBoundingBox* bounding_box);

  // .dlvc_api.TimeRange time_range = 8;
  bool has_time_range() const;
  void clear_time_range();
  static const int kTimeRangeFieldNumber = 8;
  const ::dlvc_api::TimeRange& time_range() const;
  ::dlvc_api::TimeRange* release_time_range();
  ::dlvc_api::TimeRange* mutable_time_range();
  void set_allocated_time_range(::dlvc_api::TimeRange* time_range);

  // int64 next_index = 9;
  void clear_next_index();
  static const int kNextIndexFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index() const;
  void set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 limit = 10;
  void clear_limit();
  static const int kLimitFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 len_bytes = 11;
  void clear_len_bytes();
  static const int kLenBytesFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dlvc_api.GetRawMessagesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> retrieval_types_;
  mutable std::atomic<int> _retrieval_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> returned_metadata_types_;
  mutable std::atomic<int> _returned_metadata_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata > user_metadata_;
  ::dlvc_api::Metadata* metadata_;
  ::dlvc_api::SourceType* source_type_;
  ::dlvc_api::PositionBoundingBox* bounding_box_;
  ::dlvc_api::TimeRange* time_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class GetRawMessagesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.GetRawMessagesResponse) */ {
 public:
  GetRawMessagesResponse();
  virtual ~GetRawMessagesResponse();

  GetRawMessagesResponse(const GetRawMessagesResponse& from);
  GetRawMessagesResponse(GetRawMessagesResponse&& from) noexcept
    : GetRawMessagesResponse() {
    *this = ::std::move(from);
  }

  inline GetRawMessagesResponse& operator=(const GetRawMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawMessagesResponse& operator=(GetRawMessagesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawMessagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawMessagesResponse*>(
               &_GetRawMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetRawMessagesResponse* other);
  friend void swap(GetRawMessagesResponse& a, GetRawMessagesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawMessagesResponse* New() const final {
    return CreateMaybeMessage<GetRawMessagesResponse>(nullptr);
  }

  GetRawMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawMessagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawMessagesResponse& from);
  void MergeFrom(const GetRawMessagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.GetRawMessagesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dlvc_api.WrappedMessage messages = 2;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  ::dlvc_api::WrappedMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >*
      mutable_messages();
  const ::dlvc_api::WrappedMessage& messages(int index) const;
  ::dlvc_api::WrappedMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >&
      messages() const;

  // int64 next_index = 3;
  void clear_next_index();
  static const int kNextIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index() const;
  void set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 len_bytes = 4;
  void clear_len_bytes();
  static const int kLenBytesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dlvc_api.GetRawMessagesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class SourceType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.SourceType) */ {
 public:
  SourceType();
  virtual ~SourceType();

  SourceType(const SourceType& from);
  SourceType(SourceType&& from) noexcept
    : SourceType() {
    *this = ::std::move(from);
  }

  inline SourceType& operator=(const SourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceType& operator=(SourceType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceType* internal_default_instance() {
    return reinterpret_cast<const SourceType*>(
               &_SourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SourceType* other);
  friend void swap(SourceType& a, SourceType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceType* New() const final {
    return CreateMaybeMessage<SourceType>(nullptr);
  }

  SourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceType& from);
  void MergeFrom(const SourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.SourceType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string custom_encoding_type = 4;
  void clear_custom_encoding_type();
  static const int kCustomEncodingTypeFieldNumber = 4;
  const std::string& custom_encoding_type() const;
  void set_custom_encoding_type(const std::string& value);
  void set_custom_encoding_type(std::string&& value);
  void set_custom_encoding_type(const char* value);
  void set_custom_encoding_type(const char* value, size_t size);
  std::string* mutable_custom_encoding_type();
  std::string* release_custom_encoding_type();
  void set_allocated_custom_encoding_type(std::string* custom_encoding_type);

  // .dlvc_api.WrappedMessage.MessageType message_type = 2;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  ::dlvc_api::WrappedMessage_MessageType message_type() const;
  void set_message_type(::dlvc_api::WrappedMessage_MessageType value);

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 3;
  ::dlvc_api::MessageEncoding_EncodingType encoding_type() const;
  void set_encoding_type(::dlvc_api::MessageEncoding_EncodingType value);

  // @@protoc_insertion_point(class_scope:dlvc_api.SourceType)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_encoding_type_;
  int message_type_;
  int encoding_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class TimeRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TimeRange* other);
  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeRange* New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.TimeRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:dlvc_api.TimeRange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class SummarizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.SummarizeRequest) */ {
 public:
  SummarizeRequest();
  virtual ~SummarizeRequest();

  SummarizeRequest(const SummarizeRequest& from);
  SummarizeRequest(SummarizeRequest&& from) noexcept
    : SummarizeRequest() {
    *this = ::std::move(from);
  }

  inline SummarizeRequest& operator=(const SummarizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummarizeRequest& operator=(SummarizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummarizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummarizeRequest* internal_default_instance() {
    return reinterpret_cast<const SummarizeRequest*>(
               &_SummarizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SummarizeRequest* other);
  friend void swap(SummarizeRequest& a, SummarizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SummarizeRequest* New() const final {
    return CreateMaybeMessage<SummarizeRequest>(nullptr);
  }

  SummarizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummarizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummarizeRequest& from);
  void MergeFrom(const SummarizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummarizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.SummarizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dlvc_api.SummarizeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class SummarizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.SummarizeResponse) */ {
 public:
  SummarizeResponse();
  virtual ~SummarizeResponse();

  SummarizeResponse(const SummarizeResponse& from);
  SummarizeResponse(SummarizeResponse&& from) noexcept
    : SummarizeResponse() {
    *this = ::std::move(from);
  }

  inline SummarizeResponse& operator=(const SummarizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummarizeResponse& operator=(SummarizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummarizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummarizeResponse* internal_default_instance() {
    return reinterpret_cast<const SummarizeResponse*>(
               &_SummarizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SummarizeResponse* other);
  friend void swap(SummarizeResponse& a, SummarizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SummarizeResponse* New() const final {
    return CreateMaybeMessage<SummarizeResponse>(nullptr);
  }

  SummarizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummarizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummarizeResponse& from);
  void MergeFrom(const SummarizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummarizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.SummarizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string metadata_keys = 2;
  int metadata_keys_size() const;
  void clear_metadata_keys();
  static const int kMetadataKeysFieldNumber = 2;
  const std::string& metadata_keys(int index) const;
  std::string* mutable_metadata_keys(int index);
  void set_metadata_keys(int index, const std::string& value);
  void set_metadata_keys(int index, std::string&& value);
  void set_metadata_keys(int index, const char* value);
  void set_metadata_keys(int index, const char* value, size_t size);
  std::string* add_metadata_keys();
  void add_metadata_keys(const std::string& value);
  void add_metadata_keys(std::string&& value);
  void add_metadata_keys(const char* value);
  void add_metadata_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_keys();

  // repeated string user_metadata_keys = 3;
  int user_metadata_keys_size() const;
  void clear_user_metadata_keys();
  static const int kUserMetadataKeysFieldNumber = 3;
  const std::string& user_metadata_keys(int index) const;
  std::string* mutable_user_metadata_keys(int index);
  void set_user_metadata_keys(int index, const std::string& value);
  void set_user_metadata_keys(int index, std::string&& value);
  void set_user_metadata_keys(int index, const char* value);
  void set_user_metadata_keys(int index, const char* value, size_t size);
  std::string* add_user_metadata_keys();
  void add_user_metadata_keys(const std::string& value);
  void add_user_metadata_keys(std::string&& value);
  void add_user_metadata_keys(const char* value);
  void add_user_metadata_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_metadata_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_metadata_keys();

  // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
  int message_types_size() const;
  void clear_message_types();
  static const int kMessageTypesFieldNumber = 4;
  ::dlvc_api::WrappedMessage_MessageType message_types(int index) const;
  void set_message_types(int index, ::dlvc_api::WrappedMessage_MessageType value);
  void add_message_types(::dlvc_api::WrappedMessage_MessageType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& message_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_message_types();

  // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
  int encoding_types_size() const;
  void clear_encoding_types();
  static const int kEncodingTypesFieldNumber = 5;
  ::dlvc_api::MessageEncoding_EncodingType encoding_types(int index) const;
  void set_encoding_types(int index, ::dlvc_api::MessageEncoding_EncodingType value);
  void add_encoding_types(::dlvc_api::MessageEncoding_EncodingType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& encoding_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_encoding_types();

  // repeated string custom_encoding_types = 6;
  int custom_encoding_types_size() const;
  void clear_custom_encoding_types();
  static const int kCustomEncodingTypesFieldNumber = 6;
  const std::string& custom_encoding_types(int index) const;
  std::string* mutable_custom_encoding_types(int index);
  void set_custom_encoding_types(int index, const std::string& value);
  void set_custom_encoding_types(int index, std::string&& value);
  void set_custom_encoding_types(int index, const char* value);
  void set_custom_encoding_types(int index, const char* value, size_t size);
  std::string* add_custom_encoding_types();
  void add_custom_encoding_types(const std::string& value);
  void add_custom_encoding_types(std::string&& value);
  void add_custom_encoding_types(const char* value);
  void add_custom_encoding_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& custom_encoding_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_custom_encoding_types();

  // int64 len_bytes = 7;
  void clear_len_bytes();
  static const int kLenBytesFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 count = 8;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dlvc_api.SummarizeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_metadata_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> message_types_;
  mutable std::atomic<int> _message_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> encoding_types_;
  mutable std::atomic<int> _encoding_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> custom_encoding_types_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class ListMetadataValuesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.ListMetadataValuesRequest) */ {
 public:
  ListMetadataValuesRequest();
  virtual ~ListMetadataValuesRequest();

  ListMetadataValuesRequest(const ListMetadataValuesRequest& from);
  ListMetadataValuesRequest(ListMetadataValuesRequest&& from) noexcept
    : ListMetadataValuesRequest() {
    *this = ::std::move(from);
  }

  inline ListMetadataValuesRequest& operator=(const ListMetadataValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMetadataValuesRequest& operator=(ListMetadataValuesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMetadataValuesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMetadataValuesRequest* internal_default_instance() {
    return reinterpret_cast<const ListMetadataValuesRequest*>(
               &_ListMetadataValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListMetadataValuesRequest* other);
  friend void swap(ListMetadataValuesRequest& a, ListMetadataValuesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMetadataValuesRequest* New() const final {
    return CreateMaybeMessage<ListMetadataValuesRequest>(nullptr);
  }

  ListMetadataValuesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMetadataValuesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMetadataValuesRequest& from);
  void MergeFrom(const ListMetadataValuesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMetadataValuesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.ListMetadataValuesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:dlvc_api.ListMetadataValuesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class ListMetadataValuesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.ListMetadataValuesResponse) */ {
 public:
  ListMetadataValuesResponse();
  virtual ~ListMetadataValuesResponse();

  ListMetadataValuesResponse(const ListMetadataValuesResponse& from);
  ListMetadataValuesResponse(ListMetadataValuesResponse&& from) noexcept
    : ListMetadataValuesResponse() {
    *this = ::std::move(from);
  }

  inline ListMetadataValuesResponse& operator=(const ListMetadataValuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMetadataValuesResponse& operator=(ListMetadataValuesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMetadataValuesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMetadataValuesResponse* internal_default_instance() {
    return reinterpret_cast<const ListMetadataValuesResponse*>(
               &_ListMetadataValuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ListMetadataValuesResponse* other);
  friend void swap(ListMetadataValuesResponse& a, ListMetadataValuesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMetadataValuesResponse* New() const final {
    return CreateMaybeMessage<ListMetadataValuesResponse>(nullptr);
  }

  ListMetadataValuesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMetadataValuesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMetadataValuesResponse& from);
  void MergeFrom(const ListMetadataValuesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMetadataValuesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.ListMetadataValuesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:dlvc_api.ListMetadataValuesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class ListExercisesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.ListExercisesRequest) */ {
 public:
  ListExercisesRequest();
  virtual ~ListExercisesRequest();

  ListExercisesRequest(const ListExercisesRequest& from);
  ListExercisesRequest(ListExercisesRequest&& from) noexcept
    : ListExercisesRequest() {
    *this = ::std::move(from);
  }

  inline ListExercisesRequest& operator=(const ListExercisesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListExercisesRequest& operator=(ListExercisesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListExercisesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExercisesRequest* internal_default_instance() {
    return reinterpret_cast<const ListExercisesRequest*>(
               &_ListExercisesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ListExercisesRequest* other);
  friend void swap(ListExercisesRequest& a, ListExercisesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListExercisesRequest* New() const final {
    return CreateMaybeMessage<ListExercisesRequest>(nullptr);
  }

  ListExercisesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListExercisesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListExercisesRequest& from);
  void MergeFrom(const ListExercisesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExercisesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.ListExercisesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dlvc_api.ListExercisesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class ListExercisesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.ListExercisesResponse) */ {
 public:
  ListExercisesResponse();
  virtual ~ListExercisesResponse();

  ListExercisesResponse(const ListExercisesResponse& from);
  ListExercisesResponse(ListExercisesResponse&& from) noexcept
    : ListExercisesResponse() {
    *this = ::std::move(from);
  }

  inline ListExercisesResponse& operator=(const ListExercisesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListExercisesResponse& operator=(ListExercisesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListExercisesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExercisesResponse* internal_default_instance() {
    return reinterpret_cast<const ListExercisesResponse*>(
               &_ListExercisesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ListExercisesResponse* other);
  friend void swap(ListExercisesResponse& a, ListExercisesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListExercisesResponse* New() const final {
    return CreateMaybeMessage<ListExercisesResponse>(nullptr);
  }

  ListExercisesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListExercisesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListExercisesResponse& from);
  void MergeFrom(const ListExercisesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExercisesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.ListExercisesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string exercise_ids = 3;
  int exercise_ids_size() const;
  void clear_exercise_ids();
  static const int kExerciseIdsFieldNumber = 3;
  const std::string& exercise_ids(int index) const;
  std::string* mutable_exercise_ids(int index);
  void set_exercise_ids(int index, const std::string& value);
  void set_exercise_ids(int index, std::string&& value);
  void set_exercise_ids(int index, const char* value);
  void set_exercise_ids(int index, const char* value, size_t size);
  std::string* add_exercise_ids();
  void add_exercise_ids(const std::string& value);
  void add_exercise_ids(std::string&& value);
  void add_exercise_ids(const char* value);
  void add_exercise_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exercise_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exercise_ids();

  // @@protoc_insertion_point(class_scope:dlvc_api.ListExercisesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exercise_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class WrappedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.WrappedMessage) */ {
 public:
  WrappedMessage();
  virtual ~WrappedMessage();

  WrappedMessage(const WrappedMessage& from);
  WrappedMessage(WrappedMessage&& from) noexcept
    : WrappedMessage() {
    *this = ::std::move(from);
  }

  inline WrappedMessage& operator=(const WrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedMessage& operator=(WrappedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrappedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrappedMessage* internal_default_instance() {
    return reinterpret_cast<const WrappedMessage*>(
               &_WrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(WrappedMessage* other);
  friend void swap(WrappedMessage& a, WrappedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WrappedMessage* New() const final {
    return CreateMaybeMessage<WrappedMessage>(nullptr);
  }

  WrappedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrappedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrappedMessage& from);
  void MergeFrom(const WrappedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.WrappedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WrappedMessage_MessageType MessageType;
  static constexpr MessageType UNSPECIFIED =
    WrappedMessage_MessageType_UNSPECIFIED;
  static constexpr MessageType CUSTOM =
    WrappedMessage_MessageType_CUSTOM;
  static constexpr MessageType DIS7 =
    WrappedMessage_MessageType_DIS7;
  static constexpr MessageType COT =
    WrappedMessage_MessageType_COT;
  static constexpr MessageType LINK16 =
    WrappedMessage_MessageType_LINK16;
  static constexpr MessageType JREAP =
    WrappedMessage_MessageType_JREAP;
  static constexpr MessageType INSTRUCTOR_COMMENT =
    WrappedMessage_MessageType_INSTRUCTOR_COMMENT;
  static inline bool MessageType_IsValid(int value) {
    return WrappedMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    WrappedMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    WrappedMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    WrappedMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return WrappedMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return WrappedMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return WrappedMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
  int user_metadata_size() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 4;
  ::dlvc_api::UserDefinedMetadata* mutable_user_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
      mutable_user_metadata();
  const ::dlvc_api::UserDefinedMetadata& user_metadata(int index) const;
  ::dlvc_api::UserDefinedMetadata* add_user_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
      user_metadata() const;

  // string idempotency_key = 2;
  void clear_idempotency_key();
  static const int kIdempotencyKeyFieldNumber = 2;
  const std::string& idempotency_key() const;
  void set_idempotency_key(const std::string& value);
  void set_idempotency_key(std::string&& value);
  void set_idempotency_key(const char* value);
  void set_idempotency_key(const char* value, size_t size);
  std::string* mutable_idempotency_key();
  std::string* release_idempotency_key();
  void set_allocated_idempotency_key(std::string* idempotency_key);

  // bytes raw_message = 9;
  void clear_raw_message();
  static const int kRawMessageFieldNumber = 9;
  const std::string& raw_message() const;
  void set_raw_message(const std::string& value);
  void set_raw_message(std::string&& value);
  void set_raw_message(const char* value);
  void set_raw_message(const void* value, size_t size);
  std::string* mutable_raw_message();
  std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);

  // .dlvc_api.Metadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::dlvc_api::Metadata& metadata() const;
  ::dlvc_api::Metadata* release_metadata();
  ::dlvc_api::Metadata* mutable_metadata();
  void set_allocated_metadata(::dlvc_api::Metadata* metadata);

  // .dlvc_api.MessageEncoding message_encoding = 6;
  bool has_message_encoding() const;
  void clear_message_encoding();
  static const int kMessageEncodingFieldNumber = 6;
  const ::dlvc_api::MessageEncoding& message_encoding() const;
  ::dlvc_api::MessageEncoding* release_message_encoding();
  ::dlvc_api::MessageEncoding* mutable_message_encoding();
  void set_allocated_message_encoding(::dlvc_api::MessageEncoding* message_encoding);

  // .dlvc_api.Position position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::dlvc_api::Position& position() const;
  ::dlvc_api::Position* release_position();
  ::dlvc_api::Position* mutable_position();
  void set_allocated_position(::dlvc_api::Position* position);

  // .google.protobuf.Timestamp created_time = 8;
  bool has_created_time() const;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 8;
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_time();
  void set_allocated_created_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_time);

  // .dlvc_api.WrappedMessage.MessageType message_type = 5;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 5;
  ::dlvc_api::WrappedMessage_MessageType message_type() const;
  void set_message_type(::dlvc_api::WrappedMessage_MessageType value);

  // @@protoc_insertion_point(class_scope:dlvc_api.WrappedMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata > user_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idempotency_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
  ::dlvc_api::Metadata* metadata_;
  ::dlvc_api::MessageEncoding* message_encoding_;
  ::dlvc_api::Position* position_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_time_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class Metadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Metadata* other);
  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.Metadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Metadata_ForceColor ForceColor;
  static constexpr ForceColor UNSPECIFIED =
    Metadata_ForceColor_UNSPECIFIED;
  static constexpr ForceColor BLUE =
    Metadata_ForceColor_BLUE;
  static constexpr ForceColor RED =
    Metadata_ForceColor_RED;
  static constexpr ForceColor WHITE =
    Metadata_ForceColor_WHITE;
  static constexpr ForceColor GREEN =
    Metadata_ForceColor_GREEN;
  static inline bool ForceColor_IsValid(int value) {
    return Metadata_ForceColor_IsValid(value);
  }
  static constexpr ForceColor ForceColor_MIN =
    Metadata_ForceColor_ForceColor_MIN;
  static constexpr ForceColor ForceColor_MAX =
    Metadata_ForceColor_ForceColor_MAX;
  static constexpr int ForceColor_ARRAYSIZE =
    Metadata_ForceColor_ForceColor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ForceColor_descriptor() {
    return Metadata_ForceColor_descriptor();
  }
  template<typename T>
  static inline const std::string& ForceColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ForceColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ForceColor_Name.");
    return Metadata_ForceColor_Name(enum_t_value);
  }
  static inline bool ForceColor_Parse(const std::string& name,
      ForceColor* value) {
    return Metadata_ForceColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string partner_id = 2;
  void clear_partner_id();
  static const int kPartnerIdFieldNumber = 2;
  const std::string& partner_id() const;
  void set_partner_id(const std::string& value);
  void set_partner_id(std::string&& value);
  void set_partner_id(const char* value);
  void set_partner_id(const char* value, size_t size);
  std::string* mutable_partner_id();
  std::string* release_partner_id();
  void set_allocated_partner_id(std::string* partner_id);

  // string partner_cert_id = 3;
  void clear_partner_cert_id();
  static const int kPartnerCertIdFieldNumber = 3;
  const std::string& partner_cert_id() const;
  void set_partner_cert_id(const std::string& value);
  void set_partner_cert_id(std::string&& value);
  void set_partner_cert_id(const char* value);
  void set_partner_cert_id(const char* value, size_t size);
  std::string* mutable_partner_cert_id();
  std::string* release_partner_cert_id();
  void set_allocated_partner_cert_id(std::string* partner_cert_id);

  // string source_id = 4;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 4;
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);

  // string exercise_id = 5;
  void clear_exercise_id();
  static const int kExerciseIdFieldNumber = 5;
  const std::string& exercise_id() const;
  void set_exercise_id(const std::string& value);
  void set_exercise_id(std::string&& value);
  void set_exercise_id(const char* value);
  void set_exercise_id(const char* value, size_t size);
  std::string* mutable_exercise_id();
  std::string* release_exercise_id();
  void set_allocated_exercise_id(std::string* exercise_id);

  // string exercise_name = 6;
  void clear_exercise_name();
  static const int kExerciseNameFieldNumber = 6;
  const std::string& exercise_name() const;
  void set_exercise_name(const std::string& value);
  void set_exercise_name(std::string&& value);
  void set_exercise_name(const char* value);
  void set_exercise_name(const char* value, size_t size);
  std::string* mutable_exercise_name();
  std::string* release_exercise_name();
  void set_allocated_exercise_name(std::string* exercise_name);

  // string entity_state_pdu = 7;
  void clear_entity_state_pdu();
  static const int kEntityStatePduFieldNumber = 7;
  const std::string& entity_state_pdu() const;
  void set_entity_state_pdu(const std::string& value);
  void set_entity_state_pdu(std::string&& value);
  void set_entity_state_pdu(const char* value);
  void set_entity_state_pdu(const char* value, size_t size);
  std::string* mutable_entity_state_pdu();
  std::string* release_entity_state_pdu();
  void set_allocated_entity_state_pdu(std::string* entity_state_pdu);

  // .dlvc_api.Metadata.ForceColor force_color = 8;
  void clear_force_color();
  static const int kForceColorFieldNumber = 8;
  ::dlvc_api::Metadata_ForceColor force_color() const;
  void set_force_color(::dlvc_api::Metadata_ForceColor value);

  // @@protoc_insertion_point(class_scope:dlvc_api.Metadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partner_cert_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exercise_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exercise_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_state_pdu_;
  int force_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class UserDefinedMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.UserDefinedMetadata) */ {
 public:
  UserDefinedMetadata();
  virtual ~UserDefinedMetadata();

  UserDefinedMetadata(const UserDefinedMetadata& from);
  UserDefinedMetadata(UserDefinedMetadata&& from) noexcept
    : UserDefinedMetadata() {
    *this = ::std::move(from);
  }

  inline UserDefinedMetadata& operator=(const UserDefinedMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDefinedMetadata& operator=(UserDefinedMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDefinedMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDefinedMetadata* internal_default_instance() {
    return reinterpret_cast<const UserDefinedMetadata*>(
               &_UserDefinedMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(UserDefinedMetadata* other);
  friend void swap(UserDefinedMetadata& a, UserDefinedMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDefinedMetadata* New() const final {
    return CreateMaybeMessage<UserDefinedMetadata>(nullptr);
  }

  UserDefinedMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDefinedMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDefinedMetadata& from);
  void MergeFrom(const UserDefinedMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDefinedMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.UserDefinedMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // string value_type = 4;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 4;
  const std::string& value_type() const;
  void set_value_type(const std::string& value);
  void set_value_type(std::string&& value);
  void set_value_type(const char* value);
  void set_value_type(const char* value, size_t size);
  std::string* mutable_value_type();
  std::string* release_value_type();
  void set_allocated_value_type(std::string* value_type);

  // string unit_type = 5;
  void clear_unit_type();
  static const int kUnitTypeFieldNumber = 5;
  const std::string& unit_type() const;
  void set_unit_type(const std::string& value);
  void set_unit_type(std::string&& value);
  void set_unit_type(const char* value);
  void set_unit_type(const char* value, size_t size);
  std::string* mutable_unit_type();
  std::string* release_unit_type();
  void set_allocated_unit_type(std::string* unit_type);

  // @@protoc_insertion_point(class_scope:dlvc_api.UserDefinedMetadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class MessageEncoding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.MessageEncoding) */ {
 public:
  MessageEncoding();
  virtual ~MessageEncoding();

  MessageEncoding(const MessageEncoding& from);
  MessageEncoding(MessageEncoding&& from) noexcept
    : MessageEncoding() {
    *this = ::std::move(from);
  }

  inline MessageEncoding& operator=(const MessageEncoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageEncoding& operator=(MessageEncoding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageEncoding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageEncoding* internal_default_instance() {
    return reinterpret_cast<const MessageEncoding*>(
               &_MessageEncoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MessageEncoding* other);
  friend void swap(MessageEncoding& a, MessageEncoding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageEncoding* New() const final {
    return CreateMaybeMessage<MessageEncoding>(nullptr);
  }

  MessageEncoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageEncoding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageEncoding& from);
  void MergeFrom(const MessageEncoding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageEncoding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.MessageEncoding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageEncoding_EncodingType EncodingType;
  static constexpr EncodingType UNSPECIFIED =
    MessageEncoding_EncodingType_UNSPECIFIED;
  static constexpr EncodingType CUSTOM =
    MessageEncoding_EncodingType_CUSTOM;
  static constexpr EncodingType TEXT =
    MessageEncoding_EncodingType_TEXT;
  static constexpr EncodingType JSON =
    MessageEncoding_EncodingType_JSON;
  static constexpr EncodingType XML =
    MessageEncoding_EncodingType_XML;
  static constexpr EncodingType CSV =
    MessageEncoding_EncodingType_CSV;
  static inline bool EncodingType_IsValid(int value) {
    return MessageEncoding_EncodingType_IsValid(value);
  }
  static constexpr EncodingType EncodingType_MIN =
    MessageEncoding_EncodingType_EncodingType_MIN;
  static constexpr EncodingType EncodingType_MAX =
    MessageEncoding_EncodingType_EncodingType_MAX;
  static constexpr int EncodingType_ARRAYSIZE =
    MessageEncoding_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncodingType_descriptor() {
    return MessageEncoding_EncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncodingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncodingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncodingType_Name.");
    return MessageEncoding_EncodingType_Name(enum_t_value);
  }
  static inline bool EncodingType_Parse(const std::string& name,
      EncodingType* value) {
    return MessageEncoding_EncodingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string custom_encoding_type = 3;
  void clear_custom_encoding_type();
  static const int kCustomEncodingTypeFieldNumber = 3;
  const std::string& custom_encoding_type() const;
  void set_custom_encoding_type(const std::string& value);
  void set_custom_encoding_type(std::string&& value);
  void set_custom_encoding_type(const char* value);
  void set_custom_encoding_type(const char* value, size_t size);
  std::string* mutable_custom_encoding_type();
  std::string* release_custom_encoding_type();
  void set_allocated_custom_encoding_type(std::string* custom_encoding_type);

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 2;
  ::dlvc_api::MessageEncoding_EncodingType encoding_type() const;
  void set_encoding_type(::dlvc_api::MessageEncoding_EncodingType value);

  // @@protoc_insertion_point(class_scope:dlvc_api.MessageEncoding)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_encoding_type_;
  int encoding_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Position_TFOM TFOM;
  static constexpr TFOM UNSPECIFIED =
    Position_TFOM_UNSPECIFIED;
  static constexpr TFOM LTE_1_NANOSECOND =
    Position_TFOM_LTE_1_NANOSECOND;
  static constexpr TFOM LTE_10_NANOSECONDS =
    Position_TFOM_LTE_10_NANOSECONDS;
  static constexpr TFOM LTE_100_NANOSECONDS =
    Position_TFOM_LTE_100_NANOSECONDS;
  static constexpr TFOM LTE_1_MICROSECOND =
    Position_TFOM_LTE_1_MICROSECOND;
  static constexpr TFOM LTE_10_MICROSECONDS =
    Position_TFOM_LTE_10_MICROSECONDS;
  static constexpr TFOM LTE_100_MICROSECONDS =
    Position_TFOM_LTE_100_MICROSECONDS;
  static constexpr TFOM LTE_1_MILLISECOND =
    Position_TFOM_LTE_1_MILLISECOND;
  static constexpr TFOM LTE_10_MILLISECONDS =
    Position_TFOM_LTE_10_MILLISECONDS;
  static constexpr TFOM LTE_100_MILLISECONDS =
    Position_TFOM_LTE_100_MILLISECONDS;
  static constexpr TFOM LTE_1_SECOND =
    Position_TFOM_LTE_1_SECOND;
  static constexpr TFOM LTE_10_SECONDS =
    Position_TFOM_LTE_10_SECONDS;
  static constexpr TFOM LTE_100_SECONDS =
    Position_TFOM_LTE_100_SECONDS;
  static constexpr TFOM LTE_1000_SECONDS =
    Position_TFOM_LTE_1000_SECONDS;
  static constexpr TFOM GT_1000_SECONDS =
    Position_TFOM_GT_1000_SECONDS;
  static inline bool TFOM_IsValid(int value) {
    return Position_TFOM_IsValid(value);
  }
  static constexpr TFOM TFOM_MIN =
    Position_TFOM_TFOM_MIN;
  static constexpr TFOM TFOM_MAX =
    Position_TFOM_TFOM_MAX;
  static constexpr int TFOM_ARRAYSIZE =
    Position_TFOM_TFOM_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TFOM_descriptor() {
    return Position_TFOM_descriptor();
  }
  template<typename T>
  static inline const std::string& TFOM_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TFOM>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TFOM_Name.");
    return Position_TFOM_Name(enum_t_value);
  }
  static inline bool TFOM_Parse(const std::string& name,
      TFOM* value) {
    return Position_TFOM_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // float latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  float latitude() const;
  void set_latitude(float value);

  // float longitude = 3;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  float longitude() const;
  void set_longitude(float value);

  // float pitch = 4;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  float pitch() const;
  void set_pitch(float value);

  // float yaw = 5;
  void clear_yaw();
  static const int kYawFieldNumber = 5;
  float yaw() const;
  void set_yaw(float value);

  // float roll = 6;
  void clear_roll();
  static const int kRollFieldNumber = 6;
  float roll() const;
  void set_roll(float value);

  // float radius_meters = 7;
  void clear_radius_meters();
  static const int kRadiusMetersFieldNumber = 7;
  float radius_meters() const;
  void set_radius_meters(float value);

  // float resolution_meters = 8;
  void clear_resolution_meters();
  static const int kResolutionMetersFieldNumber = 8;
  float resolution_meters() const;
  void set_resolution_meters(float value);

  // .dlvc_api.Position.TFOM tfom = 9;
  void clear_tfom();
  static const int kTfomFieldNumber = 9;
  ::dlvc_api::Position_TFOM tfom() const;
  void set_tfom(::dlvc_api::Position_TFOM value);

  // @@protoc_insertion_point(class_scope:dlvc_api.Position)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float latitude_;
  float longitude_;
  float pitch_;
  float yaw_;
  float roll_;
  float radius_meters_;
  float resolution_meters_;
  int tfom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// -------------------------------------------------------------------

class PositionBoundingBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dlvc_api.PositionBoundingBox) */ {
 public:
  PositionBoundingBox();
  virtual ~PositionBoundingBox();

  PositionBoundingBox(const PositionBoundingBox& from);
  PositionBoundingBox(PositionBoundingBox&& from) noexcept
    : PositionBoundingBox() {
    *this = ::std::move(from);
  }

  inline PositionBoundingBox& operator=(const PositionBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBoundingBox& operator=(PositionBoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionBoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionBoundingBox* internal_default_instance() {
    return reinterpret_cast<const PositionBoundingBox*>(
               &_PositionBoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(PositionBoundingBox* other);
  friend void swap(PositionBoundingBox& a, PositionBoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionBoundingBox* New() const final {
    return CreateMaybeMessage<PositionBoundingBox>(nullptr);
  }

  PositionBoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionBoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionBoundingBox& from);
  void MergeFrom(const PositionBoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dlvc_api.PositionBoundingBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
    return ::descriptor_table_dlvc_5fapi_2fdlvc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min_latitude = 2;
  void clear_min_latitude();
  static const int kMinLatitudeFieldNumber = 2;
  float min_latitude() const;
  void set_min_latitude(float value);

  // float max_latitude = 3;
  void clear_max_latitude();
  static const int kMaxLatitudeFieldNumber = 3;
  float max_latitude() const;
  void set_max_latitude(float value);

  // float min_longitude = 4;
  void clear_min_longitude();
  static const int kMinLongitudeFieldNumber = 4;
  float min_longitude() const;
  void set_min_longitude(float value);

  // float max_longitude = 5;
  void clear_max_longitude();
  static const int kMaxLongitudeFieldNumber = 5;
  float max_longitude() const;
  void set_max_longitude(float value);

  // @@protoc_insertion_point(class_scope:dlvc_api.PositionBoundingBox)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float min_latitude_;
  float max_latitude_;
  float min_longitude_;
  float max_longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dlvc_5fapi_2fdlvc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PushRawMessageRequest

// .dlvc_api.WrappedMessage message = 2;
inline bool PushRawMessageRequest::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void PushRawMessageRequest::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::dlvc_api::WrappedMessage& PushRawMessageRequest::message() const {
  const ::dlvc_api::WrappedMessage* p = message_;
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessageRequest.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::WrappedMessage*>(
      &::dlvc_api::_WrappedMessage_default_instance_);
}
inline ::dlvc_api::WrappedMessage* PushRawMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:dlvc_api.PushRawMessageRequest.message)
  
  ::dlvc_api::WrappedMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::dlvc_api::WrappedMessage* PushRawMessageRequest::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::WrappedMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessageRequest.message)
  return message_;
}
inline void PushRawMessageRequest::set_allocated_message(::dlvc_api::WrappedMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.PushRawMessageRequest.message)
}

// -------------------------------------------------------------------

// PushRawMessageResponse

// .dlvc_api.DuplicateDetails duplicate_details = 2;
inline bool PushRawMessageResponse::has_duplicate_details() const {
  return this != internal_default_instance() && duplicate_details_ != nullptr;
}
inline void PushRawMessageResponse::clear_duplicate_details() {
  if (GetArenaNoVirtual() == nullptr && duplicate_details_ != nullptr) {
    delete duplicate_details_;
  }
  duplicate_details_ = nullptr;
}
inline const ::dlvc_api::DuplicateDetails& PushRawMessageResponse::duplicate_details() const {
  const ::dlvc_api::DuplicateDetails* p = duplicate_details_;
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessageResponse.duplicate_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::DuplicateDetails*>(
      &::dlvc_api::_DuplicateDetails_default_instance_);
}
inline ::dlvc_api::DuplicateDetails* PushRawMessageResponse::release_duplicate_details() {
  // @@protoc_insertion_point(field_release:dlvc_api.PushRawMessageResponse.duplicate_details)
  
  ::dlvc_api::DuplicateDetails* temp = duplicate_details_;
  duplicate_details_ = nullptr;
  return temp;
}
inline ::dlvc_api::DuplicateDetails* PushRawMessageResponse::mutable_duplicate_details() {
  
  if (duplicate_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::DuplicateDetails>(GetArenaNoVirtual());
    duplicate_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessageResponse.duplicate_details)
  return duplicate_details_;
}
inline void PushRawMessageResponse::set_allocated_duplicate_details(::dlvc_api::DuplicateDetails* duplicate_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duplicate_details_;
  }
  if (duplicate_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duplicate_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duplicate_details, submessage_arena);
    }
    
  } else {
    
  }
  duplicate_details_ = duplicate_details;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.PushRawMessageResponse.duplicate_details)
}

// -------------------------------------------------------------------

// PushRawMessagesRequest

// .dlvc_api.Metadata metadata = 2;
inline bool PushRawMessagesRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void PushRawMessagesRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::dlvc_api::Metadata& PushRawMessagesRequest::metadata() const {
  const ::dlvc_api::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessagesRequest.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::Metadata*>(
      &::dlvc_api::_Metadata_default_instance_);
}
inline ::dlvc_api::Metadata* PushRawMessagesRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:dlvc_api.PushRawMessagesRequest.metadata)
  
  ::dlvc_api::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::dlvc_api::Metadata* PushRawMessagesRequest::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessagesRequest.metadata)
  return metadata_;
}
inline void PushRawMessagesRequest::set_allocated_metadata(::dlvc_api::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.PushRawMessagesRequest.metadata)
}

// repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
inline int PushRawMessagesRequest::user_metadata_size() const {
  return user_metadata_.size();
}
inline void PushRawMessagesRequest::clear_user_metadata() {
  user_metadata_.Clear();
}
inline ::dlvc_api::UserDefinedMetadata* PushRawMessagesRequest::mutable_user_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessagesRequest.user_metadata)
  return user_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
PushRawMessagesRequest::mutable_user_metadata() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.PushRawMessagesRequest.user_metadata)
  return &user_metadata_;
}
inline const ::dlvc_api::UserDefinedMetadata& PushRawMessagesRequest::user_metadata(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessagesRequest.user_metadata)
  return user_metadata_.Get(index);
}
inline ::dlvc_api::UserDefinedMetadata* PushRawMessagesRequest::add_user_metadata() {
  // @@protoc_insertion_point(field_add:dlvc_api.PushRawMessagesRequest.user_metadata)
  return user_metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
PushRawMessagesRequest::user_metadata() const {
  // @@protoc_insertion_point(field_list:dlvc_api.PushRawMessagesRequest.user_metadata)
  return user_metadata_;
}

// repeated .dlvc_api.WrappedMessage messages = 4;
inline int PushRawMessagesRequest::messages_size() const {
  return messages_.size();
}
inline void PushRawMessagesRequest::clear_messages() {
  messages_.Clear();
}
inline ::dlvc_api::WrappedMessage* PushRawMessagesRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessagesRequest.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >*
PushRawMessagesRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.PushRawMessagesRequest.messages)
  return &messages_;
}
inline const ::dlvc_api::WrappedMessage& PushRawMessagesRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessagesRequest.messages)
  return messages_.Get(index);
}
inline ::dlvc_api::WrappedMessage* PushRawMessagesRequest::add_messages() {
  // @@protoc_insertion_point(field_add:dlvc_api.PushRawMessagesRequest.messages)
  return messages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >&
PushRawMessagesRequest::messages() const {
  // @@protoc_insertion_point(field_list:dlvc_api.PushRawMessagesRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// PushRawMessagesResponse

// .dlvc_api.DuplicateDetails duplicate_details = 2;
inline bool PushRawMessagesResponse::has_duplicate_details() const {
  return this != internal_default_instance() && duplicate_details_ != nullptr;
}
inline void PushRawMessagesResponse::clear_duplicate_details() {
  if (GetArenaNoVirtual() == nullptr && duplicate_details_ != nullptr) {
    delete duplicate_details_;
  }
  duplicate_details_ = nullptr;
}
inline const ::dlvc_api::DuplicateDetails& PushRawMessagesResponse::duplicate_details() const {
  const ::dlvc_api::DuplicateDetails* p = duplicate_details_;
  // @@protoc_insertion_point(field_get:dlvc_api.PushRawMessagesResponse.duplicate_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::DuplicateDetails*>(
      &::dlvc_api::_DuplicateDetails_default_instance_);
}
inline ::dlvc_api::DuplicateDetails* PushRawMessagesResponse::release_duplicate_details() {
  // @@protoc_insertion_point(field_release:dlvc_api.PushRawMessagesResponse.duplicate_details)
  
  ::dlvc_api::DuplicateDetails* temp = duplicate_details_;
  duplicate_details_ = nullptr;
  return temp;
}
inline ::dlvc_api::DuplicateDetails* PushRawMessagesResponse::mutable_duplicate_details() {
  
  if (duplicate_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::DuplicateDetails>(GetArenaNoVirtual());
    duplicate_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.PushRawMessagesResponse.duplicate_details)
  return duplicate_details_;
}
inline void PushRawMessagesResponse::set_allocated_duplicate_details(::dlvc_api::DuplicateDetails* duplicate_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duplicate_details_;
  }
  if (duplicate_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duplicate_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duplicate_details, submessage_arena);
    }
    
  } else {
    
  }
  duplicate_details_ = duplicate_details;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.PushRawMessagesResponse.duplicate_details)
}

// -------------------------------------------------------------------

// DuplicateDetails

// bool duplicates = 2;
inline void DuplicateDetails::clear_duplicates() {
  duplicates_ = false;
}
inline bool DuplicateDetails::duplicates() const {
  // @@protoc_insertion_point(field_get:dlvc_api.DuplicateDetails.duplicates)
  return duplicates_;
}
inline void DuplicateDetails::set_duplicates(bool value) {
  
  duplicates_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.DuplicateDetails.duplicates)
}

// repeated string idempotency_keys = 3;
inline int DuplicateDetails::idempotency_keys_size() const {
  return idempotency_keys_.size();
}
inline void DuplicateDetails::clear_idempotency_keys() {
  idempotency_keys_.Clear();
}
inline const std::string& DuplicateDetails::idempotency_keys(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.DuplicateDetails.idempotency_keys)
  return idempotency_keys_.Get(index);
}
inline std::string* DuplicateDetails::mutable_idempotency_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.DuplicateDetails.idempotency_keys)
  return idempotency_keys_.Mutable(index);
}
inline void DuplicateDetails::set_idempotency_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.DuplicateDetails.idempotency_keys)
  idempotency_keys_.Mutable(index)->assign(value);
}
inline void DuplicateDetails::set_idempotency_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.DuplicateDetails.idempotency_keys)
  idempotency_keys_.Mutable(index)->assign(std::move(value));
}
inline void DuplicateDetails::set_idempotency_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  idempotency_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline void DuplicateDetails::set_idempotency_keys(int index, const char* value, size_t size) {
  idempotency_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline std::string* DuplicateDetails::add_idempotency_keys() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.DuplicateDetails.idempotency_keys)
  return idempotency_keys_.Add();
}
inline void DuplicateDetails::add_idempotency_keys(const std::string& value) {
  idempotency_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline void DuplicateDetails::add_idempotency_keys(std::string&& value) {
  idempotency_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline void DuplicateDetails::add_idempotency_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  idempotency_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline void DuplicateDetails::add_idempotency_keys(const char* value, size_t size) {
  idempotency_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.DuplicateDetails.idempotency_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DuplicateDetails::idempotency_keys() const {
  // @@protoc_insertion_point(field_list:dlvc_api.DuplicateDetails.idempotency_keys)
  return idempotency_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DuplicateDetails::mutable_idempotency_keys() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.DuplicateDetails.idempotency_keys)
  return &idempotency_keys_;
}

// -------------------------------------------------------------------

// GetRawMessageRequest

// repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
inline int GetRawMessageRequest::retrieval_types_size() const {
  return retrieval_types_.size();
}
inline void GetRawMessageRequest::clear_retrieval_types() {
  retrieval_types_.Clear();
}
inline ::dlvc_api::MessageRetrievalType GetRawMessageRequest::retrieval_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.retrieval_types)
  return static_cast< ::dlvc_api::MessageRetrievalType >(retrieval_types_.Get(index));
}
inline void GetRawMessageRequest::set_retrieval_types(int index, ::dlvc_api::MessageRetrievalType value) {
  retrieval_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessageRequest.retrieval_types)
}
inline void GetRawMessageRequest::add_retrieval_types(::dlvc_api::MessageRetrievalType value) {
  retrieval_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessageRequest.retrieval_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetRawMessageRequest::retrieval_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessageRequest.retrieval_types)
  return retrieval_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetRawMessageRequest::mutable_retrieval_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessageRequest.retrieval_types)
  return &retrieval_types_;
}

// repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
inline int GetRawMessageRequest::returned_metadata_types_size() const {
  return returned_metadata_types_.size();
}
inline void GetRawMessageRequest::clear_returned_metadata_types() {
  returned_metadata_types_.Clear();
}
inline ::dlvc_api::ReturnedMetadataType GetRawMessageRequest::returned_metadata_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.returned_metadata_types)
  return static_cast< ::dlvc_api::ReturnedMetadataType >(returned_metadata_types_.Get(index));
}
inline void GetRawMessageRequest::set_returned_metadata_types(int index, ::dlvc_api::ReturnedMetadataType value) {
  returned_metadata_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessageRequest.returned_metadata_types)
}
inline void GetRawMessageRequest::add_returned_metadata_types(::dlvc_api::ReturnedMetadataType value) {
  returned_metadata_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessageRequest.returned_metadata_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetRawMessageRequest::returned_metadata_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessageRequest.returned_metadata_types)
  return returned_metadata_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetRawMessageRequest::mutable_returned_metadata_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessageRequest.returned_metadata_types)
  return &returned_metadata_types_;
}

// .dlvc_api.Metadata metadata = 4;
inline bool GetRawMessageRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void GetRawMessageRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::dlvc_api::Metadata& GetRawMessageRequest::metadata() const {
  const ::dlvc_api::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::Metadata*>(
      &::dlvc_api::_Metadata_default_instance_);
}
inline ::dlvc_api::Metadata* GetRawMessageRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessageRequest.metadata)
  
  ::dlvc_api::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::dlvc_api::Metadata* GetRawMessageRequest::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageRequest.metadata)
  return metadata_;
}
inline void GetRawMessageRequest::set_allocated_metadata(::dlvc_api::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessageRequest.metadata)
}

// repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
inline int GetRawMessageRequest::user_metadata_size() const {
  return user_metadata_.size();
}
inline void GetRawMessageRequest::clear_user_metadata() {
  user_metadata_.Clear();
}
inline ::dlvc_api::UserDefinedMetadata* GetRawMessageRequest::mutable_user_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageRequest.user_metadata)
  return user_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
GetRawMessageRequest::mutable_user_metadata() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessageRequest.user_metadata)
  return &user_metadata_;
}
inline const ::dlvc_api::UserDefinedMetadata& GetRawMessageRequest::user_metadata(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.user_metadata)
  return user_metadata_.Get(index);
}
inline ::dlvc_api::UserDefinedMetadata* GetRawMessageRequest::add_user_metadata() {
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessageRequest.user_metadata)
  return user_metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
GetRawMessageRequest::user_metadata() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessageRequest.user_metadata)
  return user_metadata_;
}

// .dlvc_api.SourceType source_type = 6;
inline bool GetRawMessageRequest::has_source_type() const {
  return this != internal_default_instance() && source_type_ != nullptr;
}
inline void GetRawMessageRequest::clear_source_type() {
  if (GetArenaNoVirtual() == nullptr && source_type_ != nullptr) {
    delete source_type_;
  }
  source_type_ = nullptr;
}
inline const ::dlvc_api::SourceType& GetRawMessageRequest::source_type() const {
  const ::dlvc_api::SourceType* p = source_type_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.source_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::SourceType*>(
      &::dlvc_api::_SourceType_default_instance_);
}
inline ::dlvc_api::SourceType* GetRawMessageRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessageRequest.source_type)
  
  ::dlvc_api::SourceType* temp = source_type_;
  source_type_ = nullptr;
  return temp;
}
inline ::dlvc_api::SourceType* GetRawMessageRequest::mutable_source_type() {
  
  if (source_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::SourceType>(GetArenaNoVirtual());
    source_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageRequest.source_type)
  return source_type_;
}
inline void GetRawMessageRequest::set_allocated_source_type(::dlvc_api::SourceType* source_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_type_;
  }
  if (source_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_type, submessage_arena);
    }
    
  } else {
    
  }
  source_type_ = source_type;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessageRequest.source_type)
}

// .dlvc_api.PositionBoundingBox bounding_box = 7;
inline bool GetRawMessageRequest::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline void GetRawMessageRequest::clear_bounding_box() {
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
}
inline const ::dlvc_api::PositionBoundingBox& GetRawMessageRequest::bounding_box() const {
  const ::dlvc_api::PositionBoundingBox* p = bounding_box_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.bounding_box)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::PositionBoundingBox*>(
      &::dlvc_api::_PositionBoundingBox_default_instance_);
}
inline ::dlvc_api::PositionBoundingBox* GetRawMessageRequest::release_bounding_box() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessageRequest.bounding_box)
  
  ::dlvc_api::PositionBoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::dlvc_api::PositionBoundingBox* GetRawMessageRequest::mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::PositionBoundingBox>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageRequest.bounding_box)
  return bounding_box_;
}
inline void GetRawMessageRequest::set_allocated_bounding_box(::dlvc_api::PositionBoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessageRequest.bounding_box)
}

// .dlvc_api.TimeRange time_range = 8;
inline bool GetRawMessageRequest::has_time_range() const {
  return this != internal_default_instance() && time_range_ != nullptr;
}
inline void GetRawMessageRequest::clear_time_range() {
  if (GetArenaNoVirtual() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
}
inline const ::dlvc_api::TimeRange& GetRawMessageRequest::time_range() const {
  const ::dlvc_api::TimeRange* p = time_range_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.time_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::TimeRange*>(
      &::dlvc_api::_TimeRange_default_instance_);
}
inline ::dlvc_api::TimeRange* GetRawMessageRequest::release_time_range() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessageRequest.time_range)
  
  ::dlvc_api::TimeRange* temp = time_range_;
  time_range_ = nullptr;
  return temp;
}
inline ::dlvc_api::TimeRange* GetRawMessageRequest::mutable_time_range() {
  
  if (time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::TimeRange>(GetArenaNoVirtual());
    time_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageRequest.time_range)
  return time_range_;
}
inline void GetRawMessageRequest::set_allocated_time_range(::dlvc_api::TimeRange* time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_range_;
  }
  if (time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    
  } else {
    
  }
  time_range_ = time_range;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessageRequest.time_range)
}

// int64 next_index = 9;
inline void GetRawMessageRequest::clear_next_index() {
  next_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessageRequest::next_index() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageRequest.next_index)
  return next_index_;
}
inline void GetRawMessageRequest::set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  next_index_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessageRequest.next_index)
}

// -------------------------------------------------------------------

// GetRawMessageResponse

// .dlvc_api.WrappedMessage message = 2;
inline bool GetRawMessageResponse::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void GetRawMessageResponse::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::dlvc_api::WrappedMessage& GetRawMessageResponse::message() const {
  const ::dlvc_api::WrappedMessage* p = message_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageResponse.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::WrappedMessage*>(
      &::dlvc_api::_WrappedMessage_default_instance_);
}
inline ::dlvc_api::WrappedMessage* GetRawMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessageResponse.message)
  
  ::dlvc_api::WrappedMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::dlvc_api::WrappedMessage* GetRawMessageResponse::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::WrappedMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessageResponse.message)
  return message_;
}
inline void GetRawMessageResponse::set_allocated_message(::dlvc_api::WrappedMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessageResponse.message)
}

// int64 next_index = 3;
inline void GetRawMessageResponse::clear_next_index() {
  next_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessageResponse::next_index() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageResponse.next_index)
  return next_index_;
}
inline void GetRawMessageResponse::set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  next_index_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessageResponse.next_index)
}

// int64 len_bytes = 4;
inline void GetRawMessageResponse::clear_len_bytes() {
  len_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessageResponse::len_bytes() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessageResponse.len_bytes)
  return len_bytes_;
}
inline void GetRawMessageResponse::set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  len_bytes_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessageResponse.len_bytes)
}

// -------------------------------------------------------------------

// GetRawMessagesRequest

// repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
inline int GetRawMessagesRequest::retrieval_types_size() const {
  return retrieval_types_.size();
}
inline void GetRawMessagesRequest::clear_retrieval_types() {
  retrieval_types_.Clear();
}
inline ::dlvc_api::MessageRetrievalType GetRawMessagesRequest::retrieval_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.retrieval_types)
  return static_cast< ::dlvc_api::MessageRetrievalType >(retrieval_types_.Get(index));
}
inline void GetRawMessagesRequest::set_retrieval_types(int index, ::dlvc_api::MessageRetrievalType value) {
  retrieval_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesRequest.retrieval_types)
}
inline void GetRawMessagesRequest::add_retrieval_types(::dlvc_api::MessageRetrievalType value) {
  retrieval_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessagesRequest.retrieval_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetRawMessagesRequest::retrieval_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessagesRequest.retrieval_types)
  return retrieval_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetRawMessagesRequest::mutable_retrieval_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessagesRequest.retrieval_types)
  return &retrieval_types_;
}

// repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
inline int GetRawMessagesRequest::returned_metadata_types_size() const {
  return returned_metadata_types_.size();
}
inline void GetRawMessagesRequest::clear_returned_metadata_types() {
  returned_metadata_types_.Clear();
}
inline ::dlvc_api::ReturnedMetadataType GetRawMessagesRequest::returned_metadata_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.returned_metadata_types)
  return static_cast< ::dlvc_api::ReturnedMetadataType >(returned_metadata_types_.Get(index));
}
inline void GetRawMessagesRequest::set_returned_metadata_types(int index, ::dlvc_api::ReturnedMetadataType value) {
  returned_metadata_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesRequest.returned_metadata_types)
}
inline void GetRawMessagesRequest::add_returned_metadata_types(::dlvc_api::ReturnedMetadataType value) {
  returned_metadata_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessagesRequest.returned_metadata_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetRawMessagesRequest::returned_metadata_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessagesRequest.returned_metadata_types)
  return returned_metadata_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetRawMessagesRequest::mutable_returned_metadata_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessagesRequest.returned_metadata_types)
  return &returned_metadata_types_;
}

// .dlvc_api.Metadata metadata = 4;
inline bool GetRawMessagesRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void GetRawMessagesRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::dlvc_api::Metadata& GetRawMessagesRequest::metadata() const {
  const ::dlvc_api::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::Metadata*>(
      &::dlvc_api::_Metadata_default_instance_);
}
inline ::dlvc_api::Metadata* GetRawMessagesRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessagesRequest.metadata)
  
  ::dlvc_api::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::dlvc_api::Metadata* GetRawMessagesRequest::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesRequest.metadata)
  return metadata_;
}
inline void GetRawMessagesRequest::set_allocated_metadata(::dlvc_api::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessagesRequest.metadata)
}

// repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
inline int GetRawMessagesRequest::user_metadata_size() const {
  return user_metadata_.size();
}
inline void GetRawMessagesRequest::clear_user_metadata() {
  user_metadata_.Clear();
}
inline ::dlvc_api::UserDefinedMetadata* GetRawMessagesRequest::mutable_user_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesRequest.user_metadata)
  return user_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
GetRawMessagesRequest::mutable_user_metadata() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessagesRequest.user_metadata)
  return &user_metadata_;
}
inline const ::dlvc_api::UserDefinedMetadata& GetRawMessagesRequest::user_metadata(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.user_metadata)
  return user_metadata_.Get(index);
}
inline ::dlvc_api::UserDefinedMetadata* GetRawMessagesRequest::add_user_metadata() {
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessagesRequest.user_metadata)
  return user_metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
GetRawMessagesRequest::user_metadata() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessagesRequest.user_metadata)
  return user_metadata_;
}

// .dlvc_api.SourceType source_type = 6;
inline bool GetRawMessagesRequest::has_source_type() const {
  return this != internal_default_instance() && source_type_ != nullptr;
}
inline void GetRawMessagesRequest::clear_source_type() {
  if (GetArenaNoVirtual() == nullptr && source_type_ != nullptr) {
    delete source_type_;
  }
  source_type_ = nullptr;
}
inline const ::dlvc_api::SourceType& GetRawMessagesRequest::source_type() const {
  const ::dlvc_api::SourceType* p = source_type_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.source_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::SourceType*>(
      &::dlvc_api::_SourceType_default_instance_);
}
inline ::dlvc_api::SourceType* GetRawMessagesRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessagesRequest.source_type)
  
  ::dlvc_api::SourceType* temp = source_type_;
  source_type_ = nullptr;
  return temp;
}
inline ::dlvc_api::SourceType* GetRawMessagesRequest::mutable_source_type() {
  
  if (source_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::SourceType>(GetArenaNoVirtual());
    source_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesRequest.source_type)
  return source_type_;
}
inline void GetRawMessagesRequest::set_allocated_source_type(::dlvc_api::SourceType* source_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_type_;
  }
  if (source_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_type, submessage_arena);
    }
    
  } else {
    
  }
  source_type_ = source_type;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessagesRequest.source_type)
}

// .dlvc_api.PositionBoundingBox bounding_box = 7;
inline bool GetRawMessagesRequest::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline void GetRawMessagesRequest::clear_bounding_box() {
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
}
inline const ::dlvc_api::PositionBoundingBox& GetRawMessagesRequest::bounding_box() const {
  const ::dlvc_api::PositionBoundingBox* p = bounding_box_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.bounding_box)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::PositionBoundingBox*>(
      &::dlvc_api::_PositionBoundingBox_default_instance_);
}
inline ::dlvc_api::PositionBoundingBox* GetRawMessagesRequest::release_bounding_box() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessagesRequest.bounding_box)
  
  ::dlvc_api::PositionBoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::dlvc_api::PositionBoundingBox* GetRawMessagesRequest::mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::PositionBoundingBox>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesRequest.bounding_box)
  return bounding_box_;
}
inline void GetRawMessagesRequest::set_allocated_bounding_box(::dlvc_api::PositionBoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessagesRequest.bounding_box)
}

// .dlvc_api.TimeRange time_range = 8;
inline bool GetRawMessagesRequest::has_time_range() const {
  return this != internal_default_instance() && time_range_ != nullptr;
}
inline void GetRawMessagesRequest::clear_time_range() {
  if (GetArenaNoVirtual() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
}
inline const ::dlvc_api::TimeRange& GetRawMessagesRequest::time_range() const {
  const ::dlvc_api::TimeRange* p = time_range_;
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.time_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::TimeRange*>(
      &::dlvc_api::_TimeRange_default_instance_);
}
inline ::dlvc_api::TimeRange* GetRawMessagesRequest::release_time_range() {
  // @@protoc_insertion_point(field_release:dlvc_api.GetRawMessagesRequest.time_range)
  
  ::dlvc_api::TimeRange* temp = time_range_;
  time_range_ = nullptr;
  return temp;
}
inline ::dlvc_api::TimeRange* GetRawMessagesRequest::mutable_time_range() {
  
  if (time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::TimeRange>(GetArenaNoVirtual());
    time_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesRequest.time_range)
  return time_range_;
}
inline void GetRawMessagesRequest::set_allocated_time_range(::dlvc_api::TimeRange* time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_range_;
  }
  if (time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    
  } else {
    
  }
  time_range_ = time_range;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.GetRawMessagesRequest.time_range)
}

// int64 next_index = 9;
inline void GetRawMessagesRequest::clear_next_index() {
  next_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesRequest::next_index() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.next_index)
  return next_index_;
}
inline void GetRawMessagesRequest::set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  next_index_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesRequest.next_index)
}

// int64 limit = 10;
inline void GetRawMessagesRequest::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesRequest::limit() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.limit)
  return limit_;
}
inline void GetRawMessagesRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesRequest.limit)
}

// int64 len_bytes = 11;
inline void GetRawMessagesRequest::clear_len_bytes() {
  len_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesRequest::len_bytes() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesRequest.len_bytes)
  return len_bytes_;
}
inline void GetRawMessagesRequest::set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  len_bytes_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesRequest.len_bytes)
}

// -------------------------------------------------------------------

// GetRawMessagesResponse

// repeated .dlvc_api.WrappedMessage messages = 2;
inline int GetRawMessagesResponse::messages_size() const {
  return messages_.size();
}
inline void GetRawMessagesResponse::clear_messages() {
  messages_.Clear();
}
inline ::dlvc_api::WrappedMessage* GetRawMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.GetRawMessagesResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >*
GetRawMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.GetRawMessagesResponse.messages)
  return &messages_;
}
inline const ::dlvc_api::WrappedMessage& GetRawMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesResponse.messages)
  return messages_.Get(index);
}
inline ::dlvc_api::WrappedMessage* GetRawMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:dlvc_api.GetRawMessagesResponse.messages)
  return messages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::WrappedMessage >&
GetRawMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:dlvc_api.GetRawMessagesResponse.messages)
  return messages_;
}

// int64 next_index = 3;
inline void GetRawMessagesResponse::clear_next_index() {
  next_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesResponse::next_index() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesResponse.next_index)
  return next_index_;
}
inline void GetRawMessagesResponse::set_next_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  next_index_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesResponse.next_index)
}

// int64 len_bytes = 4;
inline void GetRawMessagesResponse::clear_len_bytes() {
  len_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesResponse::len_bytes() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesResponse.len_bytes)
  return len_bytes_;
}
inline void GetRawMessagesResponse::set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  len_bytes_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesResponse.len_bytes)
}

// int64 count = 5;
inline void GetRawMessagesResponse::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawMessagesResponse::count() const {
  // @@protoc_insertion_point(field_get:dlvc_api.GetRawMessagesResponse.count)
  return count_;
}
inline void GetRawMessagesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.GetRawMessagesResponse.count)
}

// -------------------------------------------------------------------

// SourceType

// .dlvc_api.WrappedMessage.MessageType message_type = 2;
inline void SourceType::clear_message_type() {
  message_type_ = 0;
}
inline ::dlvc_api::WrappedMessage_MessageType SourceType::message_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.SourceType.message_type)
  return static_cast< ::dlvc_api::WrappedMessage_MessageType >(message_type_);
}
inline void SourceType::set_message_type(::dlvc_api::WrappedMessage_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.SourceType.message_type)
}

// .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
inline void SourceType::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::dlvc_api::MessageEncoding_EncodingType SourceType::encoding_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.SourceType.encoding_type)
  return static_cast< ::dlvc_api::MessageEncoding_EncodingType >(encoding_type_);
}
inline void SourceType::set_encoding_type(::dlvc_api::MessageEncoding_EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.SourceType.encoding_type)
}

// string custom_encoding_type = 4;
inline void SourceType::clear_custom_encoding_type() {
  custom_encoding_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SourceType::custom_encoding_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.SourceType.custom_encoding_type)
  return custom_encoding_type_.GetNoArena();
}
inline void SourceType::set_custom_encoding_type(const std::string& value) {
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.SourceType.custom_encoding_type)
}
inline void SourceType::set_custom_encoding_type(std::string&& value) {
  
  custom_encoding_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.SourceType.custom_encoding_type)
}
inline void SourceType::set_custom_encoding_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.SourceType.custom_encoding_type)
}
inline void SourceType::set_custom_encoding_type(const char* value, size_t size) {
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.SourceType.custom_encoding_type)
}
inline std::string* SourceType::mutable_custom_encoding_type() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.SourceType.custom_encoding_type)
  return custom_encoding_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceType::release_custom_encoding_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.SourceType.custom_encoding_type)
  
  return custom_encoding_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceType::set_allocated_custom_encoding_type(std::string* custom_encoding_type) {
  if (custom_encoding_type != nullptr) {
    
  } else {
    
  }
  custom_encoding_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_encoding_type);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.SourceType.custom_encoding_type)
}

// -------------------------------------------------------------------

// TimeRange

// .google.protobuf.Timestamp start_time = 2;
inline bool TimeRange::has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:dlvc_api.TimeRange.start_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_start_time() {
  // @@protoc_insertion_point(field_release:dlvc_api.TimeRange.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.TimeRange.start_time)
  return start_time_;
}
inline void TimeRange::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.TimeRange.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool TimeRange::has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:dlvc_api.TimeRange.end_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_end_time() {
  // @@protoc_insertion_point(field_release:dlvc_api.TimeRange.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.TimeRange.end_time)
  return end_time_;
}
inline void TimeRange::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.TimeRange.end_time)
}

// -------------------------------------------------------------------

// SummarizeRequest

// -------------------------------------------------------------------

// SummarizeResponse

// repeated string metadata_keys = 2;
inline int SummarizeResponse::metadata_keys_size() const {
  return metadata_keys_.size();
}
inline void SummarizeResponse::clear_metadata_keys() {
  metadata_keys_.Clear();
}
inline const std::string& SummarizeResponse::metadata_keys(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.metadata_keys)
  return metadata_keys_.Get(index);
}
inline std::string* SummarizeResponse::mutable_metadata_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.SummarizeResponse.metadata_keys)
  return metadata_keys_.Mutable(index);
}
inline void SummarizeResponse::set_metadata_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.metadata_keys)
  metadata_keys_.Mutable(index)->assign(value);
}
inline void SummarizeResponse::set_metadata_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.metadata_keys)
  metadata_keys_.Mutable(index)->assign(std::move(value));
}
inline void SummarizeResponse::set_metadata_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.SummarizeResponse.metadata_keys)
}
inline void SummarizeResponse::set_metadata_keys(int index, const char* value, size_t size) {
  metadata_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.SummarizeResponse.metadata_keys)
}
inline std::string* SummarizeResponse::add_metadata_keys() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.SummarizeResponse.metadata_keys)
  return metadata_keys_.Add();
}
inline void SummarizeResponse::add_metadata_keys(const std::string& value) {
  metadata_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.metadata_keys)
}
inline void SummarizeResponse::add_metadata_keys(std::string&& value) {
  metadata_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.metadata_keys)
}
inline void SummarizeResponse::add_metadata_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.SummarizeResponse.metadata_keys)
}
inline void SummarizeResponse::add_metadata_keys(const char* value, size_t size) {
  metadata_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.SummarizeResponse.metadata_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SummarizeResponse::metadata_keys() const {
  // @@protoc_insertion_point(field_list:dlvc_api.SummarizeResponse.metadata_keys)
  return metadata_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SummarizeResponse::mutable_metadata_keys() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.SummarizeResponse.metadata_keys)
  return &metadata_keys_;
}

// repeated string user_metadata_keys = 3;
inline int SummarizeResponse::user_metadata_keys_size() const {
  return user_metadata_keys_.size();
}
inline void SummarizeResponse::clear_user_metadata_keys() {
  user_metadata_keys_.Clear();
}
inline const std::string& SummarizeResponse::user_metadata_keys(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.user_metadata_keys)
  return user_metadata_keys_.Get(index);
}
inline std::string* SummarizeResponse::mutable_user_metadata_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.SummarizeResponse.user_metadata_keys)
  return user_metadata_keys_.Mutable(index);
}
inline void SummarizeResponse::set_user_metadata_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.user_metadata_keys)
  user_metadata_keys_.Mutable(index)->assign(value);
}
inline void SummarizeResponse::set_user_metadata_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.user_metadata_keys)
  user_metadata_keys_.Mutable(index)->assign(std::move(value));
}
inline void SummarizeResponse::set_user_metadata_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_metadata_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline void SummarizeResponse::set_user_metadata_keys(int index, const char* value, size_t size) {
  user_metadata_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline std::string* SummarizeResponse::add_user_metadata_keys() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.SummarizeResponse.user_metadata_keys)
  return user_metadata_keys_.Add();
}
inline void SummarizeResponse::add_user_metadata_keys(const std::string& value) {
  user_metadata_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline void SummarizeResponse::add_user_metadata_keys(std::string&& value) {
  user_metadata_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline void SummarizeResponse::add_user_metadata_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_metadata_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline void SummarizeResponse::add_user_metadata_keys(const char* value, size_t size) {
  user_metadata_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.SummarizeResponse.user_metadata_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SummarizeResponse::user_metadata_keys() const {
  // @@protoc_insertion_point(field_list:dlvc_api.SummarizeResponse.user_metadata_keys)
  return user_metadata_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SummarizeResponse::mutable_user_metadata_keys() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.SummarizeResponse.user_metadata_keys)
  return &user_metadata_keys_;
}

// repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
inline int SummarizeResponse::message_types_size() const {
  return message_types_.size();
}
inline void SummarizeResponse::clear_message_types() {
  message_types_.Clear();
}
inline ::dlvc_api::WrappedMessage_MessageType SummarizeResponse::message_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.message_types)
  return static_cast< ::dlvc_api::WrappedMessage_MessageType >(message_types_.Get(index));
}
inline void SummarizeResponse::set_message_types(int index, ::dlvc_api::WrappedMessage_MessageType value) {
  message_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.message_types)
}
inline void SummarizeResponse::add_message_types(::dlvc_api::WrappedMessage_MessageType value) {
  message_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.message_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SummarizeResponse::message_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.SummarizeResponse.message_types)
  return message_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SummarizeResponse::mutable_message_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.SummarizeResponse.message_types)
  return &message_types_;
}

// repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
inline int SummarizeResponse::encoding_types_size() const {
  return encoding_types_.size();
}
inline void SummarizeResponse::clear_encoding_types() {
  encoding_types_.Clear();
}
inline ::dlvc_api::MessageEncoding_EncodingType SummarizeResponse::encoding_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.encoding_types)
  return static_cast< ::dlvc_api::MessageEncoding_EncodingType >(encoding_types_.Get(index));
}
inline void SummarizeResponse::set_encoding_types(int index, ::dlvc_api::MessageEncoding_EncodingType value) {
  encoding_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.encoding_types)
}
inline void SummarizeResponse::add_encoding_types(::dlvc_api::MessageEncoding_EncodingType value) {
  encoding_types_.Add(value);
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.encoding_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SummarizeResponse::encoding_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.SummarizeResponse.encoding_types)
  return encoding_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SummarizeResponse::mutable_encoding_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.SummarizeResponse.encoding_types)
  return &encoding_types_;
}

// repeated string custom_encoding_types = 6;
inline int SummarizeResponse::custom_encoding_types_size() const {
  return custom_encoding_types_.size();
}
inline void SummarizeResponse::clear_custom_encoding_types() {
  custom_encoding_types_.Clear();
}
inline const std::string& SummarizeResponse::custom_encoding_types(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.custom_encoding_types)
  return custom_encoding_types_.Get(index);
}
inline std::string* SummarizeResponse::mutable_custom_encoding_types(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.SummarizeResponse.custom_encoding_types)
  return custom_encoding_types_.Mutable(index);
}
inline void SummarizeResponse::set_custom_encoding_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.custom_encoding_types)
  custom_encoding_types_.Mutable(index)->assign(value);
}
inline void SummarizeResponse::set_custom_encoding_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.custom_encoding_types)
  custom_encoding_types_.Mutable(index)->assign(std::move(value));
}
inline void SummarizeResponse::set_custom_encoding_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_encoding_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline void SummarizeResponse::set_custom_encoding_types(int index, const char* value, size_t size) {
  custom_encoding_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline std::string* SummarizeResponse::add_custom_encoding_types() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.SummarizeResponse.custom_encoding_types)
  return custom_encoding_types_.Add();
}
inline void SummarizeResponse::add_custom_encoding_types(const std::string& value) {
  custom_encoding_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline void SummarizeResponse::add_custom_encoding_types(std::string&& value) {
  custom_encoding_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline void SummarizeResponse::add_custom_encoding_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_encoding_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline void SummarizeResponse::add_custom_encoding_types(const char* value, size_t size) {
  custom_encoding_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.SummarizeResponse.custom_encoding_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SummarizeResponse::custom_encoding_types() const {
  // @@protoc_insertion_point(field_list:dlvc_api.SummarizeResponse.custom_encoding_types)
  return custom_encoding_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SummarizeResponse::mutable_custom_encoding_types() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.SummarizeResponse.custom_encoding_types)
  return &custom_encoding_types_;
}

// int64 len_bytes = 7;
inline void SummarizeResponse::clear_len_bytes() {
  len_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummarizeResponse::len_bytes() const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.len_bytes)
  return len_bytes_;
}
inline void SummarizeResponse::set_len_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  len_bytes_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.len_bytes)
}

// int64 count = 8;
inline void SummarizeResponse::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummarizeResponse::count() const {
  // @@protoc_insertion_point(field_get:dlvc_api.SummarizeResponse.count)
  return count_;
}
inline void SummarizeResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.SummarizeResponse.count)
}

// -------------------------------------------------------------------

// ListMetadataValuesRequest

// string key = 2;
inline void ListMetadataValuesRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListMetadataValuesRequest::key() const {
  // @@protoc_insertion_point(field_get:dlvc_api.ListMetadataValuesRequest.key)
  return key_.GetNoArena();
}
inline void ListMetadataValuesRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.ListMetadataValuesRequest.key)
}
inline void ListMetadataValuesRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.ListMetadataValuesRequest.key)
}
inline void ListMetadataValuesRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.ListMetadataValuesRequest.key)
}
inline void ListMetadataValuesRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.ListMetadataValuesRequest.key)
}
inline std::string* ListMetadataValuesRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.ListMetadataValuesRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListMetadataValuesRequest::release_key() {
  // @@protoc_insertion_point(field_release:dlvc_api.ListMetadataValuesRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListMetadataValuesRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.ListMetadataValuesRequest.key)
}

// -------------------------------------------------------------------

// ListMetadataValuesResponse

// string key = 2;
inline void ListMetadataValuesResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListMetadataValuesResponse::key() const {
  // @@protoc_insertion_point(field_get:dlvc_api.ListMetadataValuesResponse.key)
  return key_.GetNoArena();
}
inline void ListMetadataValuesResponse::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.ListMetadataValuesResponse.key)
}
inline void ListMetadataValuesResponse::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.ListMetadataValuesResponse.key)
}
inline void ListMetadataValuesResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.ListMetadataValuesResponse.key)
}
inline void ListMetadataValuesResponse::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.ListMetadataValuesResponse.key)
}
inline std::string* ListMetadataValuesResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.ListMetadataValuesResponse.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListMetadataValuesResponse::release_key() {
  // @@protoc_insertion_point(field_release:dlvc_api.ListMetadataValuesResponse.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListMetadataValuesResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.ListMetadataValuesResponse.key)
}

// repeated string values = 3;
inline int ListMetadataValuesResponse::values_size() const {
  return values_.size();
}
inline void ListMetadataValuesResponse::clear_values() {
  values_.Clear();
}
inline const std::string& ListMetadataValuesResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.ListMetadataValuesResponse.values)
  return values_.Get(index);
}
inline std::string* ListMetadataValuesResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.ListMetadataValuesResponse.values)
  return values_.Mutable(index);
}
inline void ListMetadataValuesResponse::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.ListMetadataValuesResponse.values)
  values_.Mutable(index)->assign(value);
}
inline void ListMetadataValuesResponse::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.ListMetadataValuesResponse.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void ListMetadataValuesResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.ListMetadataValuesResponse.values)
}
inline void ListMetadataValuesResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.ListMetadataValuesResponse.values)
}
inline std::string* ListMetadataValuesResponse::add_values() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.ListMetadataValuesResponse.values)
  return values_.Add();
}
inline void ListMetadataValuesResponse::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.ListMetadataValuesResponse.values)
}
inline void ListMetadataValuesResponse::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.ListMetadataValuesResponse.values)
}
inline void ListMetadataValuesResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.ListMetadataValuesResponse.values)
}
inline void ListMetadataValuesResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.ListMetadataValuesResponse.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListMetadataValuesResponse::values() const {
  // @@protoc_insertion_point(field_list:dlvc_api.ListMetadataValuesResponse.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListMetadataValuesResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.ListMetadataValuesResponse.values)
  return &values_;
}

// -------------------------------------------------------------------

// ListExercisesRequest

// -------------------------------------------------------------------

// ListExercisesResponse

// repeated string exercise_ids = 3;
inline int ListExercisesResponse::exercise_ids_size() const {
  return exercise_ids_.size();
}
inline void ListExercisesResponse::clear_exercise_ids() {
  exercise_ids_.Clear();
}
inline const std::string& ListExercisesResponse::exercise_ids(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.ListExercisesResponse.exercise_ids)
  return exercise_ids_.Get(index);
}
inline std::string* ListExercisesResponse::mutable_exercise_ids(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.ListExercisesResponse.exercise_ids)
  return exercise_ids_.Mutable(index);
}
inline void ListExercisesResponse::set_exercise_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.ListExercisesResponse.exercise_ids)
  exercise_ids_.Mutable(index)->assign(value);
}
inline void ListExercisesResponse::set_exercise_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dlvc_api.ListExercisesResponse.exercise_ids)
  exercise_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListExercisesResponse::set_exercise_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exercise_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline void ListExercisesResponse::set_exercise_ids(int index, const char* value, size_t size) {
  exercise_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline std::string* ListExercisesResponse::add_exercise_ids() {
  // @@protoc_insertion_point(field_add_mutable:dlvc_api.ListExercisesResponse.exercise_ids)
  return exercise_ids_.Add();
}
inline void ListExercisesResponse::add_exercise_ids(const std::string& value) {
  exercise_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline void ListExercisesResponse::add_exercise_ids(std::string&& value) {
  exercise_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline void ListExercisesResponse::add_exercise_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exercise_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline void ListExercisesResponse::add_exercise_ids(const char* value, size_t size) {
  exercise_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dlvc_api.ListExercisesResponse.exercise_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListExercisesResponse::exercise_ids() const {
  // @@protoc_insertion_point(field_list:dlvc_api.ListExercisesResponse.exercise_ids)
  return exercise_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListExercisesResponse::mutable_exercise_ids() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.ListExercisesResponse.exercise_ids)
  return &exercise_ids_;
}

// -------------------------------------------------------------------

// WrappedMessage

// string idempotency_key = 2;
inline void WrappedMessage::clear_idempotency_key() {
  idempotency_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WrappedMessage::idempotency_key() const {
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.idempotency_key)
  return idempotency_key_.GetNoArena();
}
inline void WrappedMessage::set_idempotency_key(const std::string& value) {
  
  idempotency_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.WrappedMessage.idempotency_key)
}
inline void WrappedMessage::set_idempotency_key(std::string&& value) {
  
  idempotency_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.WrappedMessage.idempotency_key)
}
inline void WrappedMessage::set_idempotency_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idempotency_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.WrappedMessage.idempotency_key)
}
inline void WrappedMessage::set_idempotency_key(const char* value, size_t size) {
  
  idempotency_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.WrappedMessage.idempotency_key)
}
inline std::string* WrappedMessage::mutable_idempotency_key() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.idempotency_key)
  return idempotency_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WrappedMessage::release_idempotency_key() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.idempotency_key)
  
  return idempotency_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WrappedMessage::set_allocated_idempotency_key(std::string* idempotency_key) {
  if (idempotency_key != nullptr) {
    
  } else {
    
  }
  idempotency_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idempotency_key);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.idempotency_key)
}

// .dlvc_api.Metadata metadata = 3;
inline bool WrappedMessage::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void WrappedMessage::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::dlvc_api::Metadata& WrappedMessage::metadata() const {
  const ::dlvc_api::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::Metadata*>(
      &::dlvc_api::_Metadata_default_instance_);
}
inline ::dlvc_api::Metadata* WrappedMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.metadata)
  
  ::dlvc_api::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::dlvc_api::Metadata* WrappedMessage::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.metadata)
  return metadata_;
}
inline void WrappedMessage::set_allocated_metadata(::dlvc_api::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.metadata)
}

// repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
inline int WrappedMessage::user_metadata_size() const {
  return user_metadata_.size();
}
inline void WrappedMessage::clear_user_metadata() {
  user_metadata_.Clear();
}
inline ::dlvc_api::UserDefinedMetadata* WrappedMessage::mutable_user_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.user_metadata)
  return user_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >*
WrappedMessage::mutable_user_metadata() {
  // @@protoc_insertion_point(field_mutable_list:dlvc_api.WrappedMessage.user_metadata)
  return &user_metadata_;
}
inline const ::dlvc_api::UserDefinedMetadata& WrappedMessage::user_metadata(int index) const {
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.user_metadata)
  return user_metadata_.Get(index);
}
inline ::dlvc_api::UserDefinedMetadata* WrappedMessage::add_user_metadata() {
  // @@protoc_insertion_point(field_add:dlvc_api.WrappedMessage.user_metadata)
  return user_metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dlvc_api::UserDefinedMetadata >&
WrappedMessage::user_metadata() const {
  // @@protoc_insertion_point(field_list:dlvc_api.WrappedMessage.user_metadata)
  return user_metadata_;
}

// .dlvc_api.WrappedMessage.MessageType message_type = 5;
inline void WrappedMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::dlvc_api::WrappedMessage_MessageType WrappedMessage::message_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.message_type)
  return static_cast< ::dlvc_api::WrappedMessage_MessageType >(message_type_);
}
inline void WrappedMessage::set_message_type(::dlvc_api::WrappedMessage_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.WrappedMessage.message_type)
}

// .dlvc_api.MessageEncoding message_encoding = 6;
inline bool WrappedMessage::has_message_encoding() const {
  return this != internal_default_instance() && message_encoding_ != nullptr;
}
inline void WrappedMessage::clear_message_encoding() {
  if (GetArenaNoVirtual() == nullptr && message_encoding_ != nullptr) {
    delete message_encoding_;
  }
  message_encoding_ = nullptr;
}
inline const ::dlvc_api::MessageEncoding& WrappedMessage::message_encoding() const {
  const ::dlvc_api::MessageEncoding* p = message_encoding_;
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.message_encoding)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::MessageEncoding*>(
      &::dlvc_api::_MessageEncoding_default_instance_);
}
inline ::dlvc_api::MessageEncoding* WrappedMessage::release_message_encoding() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.message_encoding)
  
  ::dlvc_api::MessageEncoding* temp = message_encoding_;
  message_encoding_ = nullptr;
  return temp;
}
inline ::dlvc_api::MessageEncoding* WrappedMessage::mutable_message_encoding() {
  
  if (message_encoding_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::MessageEncoding>(GetArenaNoVirtual());
    message_encoding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.message_encoding)
  return message_encoding_;
}
inline void WrappedMessage::set_allocated_message_encoding(::dlvc_api::MessageEncoding* message_encoding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_encoding_;
  }
  if (message_encoding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_encoding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_encoding, submessage_arena);
    }
    
  } else {
    
  }
  message_encoding_ = message_encoding;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.message_encoding)
}

// .dlvc_api.Position position = 7;
inline bool WrappedMessage::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void WrappedMessage::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::dlvc_api::Position& WrappedMessage::position() const {
  const ::dlvc_api::Position* p = position_;
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::dlvc_api::Position*>(
      &::dlvc_api::_Position_default_instance_);
}
inline ::dlvc_api::Position* WrappedMessage::release_position() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.position)
  
  ::dlvc_api::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::dlvc_api::Position* WrappedMessage::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::dlvc_api::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.position)
  return position_;
}
inline void WrappedMessage::set_allocated_position(::dlvc_api::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.position)
}

// .google.protobuf.Timestamp created_time = 8;
inline bool WrappedMessage::has_created_time() const {
  return this != internal_default_instance() && created_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WrappedMessage::created_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_time_;
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.created_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WrappedMessage::release_created_time() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.created_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_time_;
  created_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WrappedMessage::mutable_created_time() {
  
  if (created_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.created_time)
  return created_time_;
}
inline void WrappedMessage::set_allocated_created_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_time_);
  }
  if (created_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_time)->GetArena();
    if (message_arena != submessage_arena) {
      created_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_time, submessage_arena);
    }
    
  } else {
    
  }
  created_time_ = created_time;
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.created_time)
}

// bytes raw_message = 9;
inline void WrappedMessage::clear_raw_message() {
  raw_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WrappedMessage::raw_message() const {
  // @@protoc_insertion_point(field_get:dlvc_api.WrappedMessage.raw_message)
  return raw_message_.GetNoArena();
}
inline void WrappedMessage::set_raw_message(const std::string& value) {
  
  raw_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.WrappedMessage.raw_message)
}
inline void WrappedMessage::set_raw_message(std::string&& value) {
  
  raw_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.WrappedMessage.raw_message)
}
inline void WrappedMessage::set_raw_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.WrappedMessage.raw_message)
}
inline void WrappedMessage::set_raw_message(const void* value, size_t size) {
  
  raw_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.WrappedMessage.raw_message)
}
inline std::string* WrappedMessage::mutable_raw_message() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.WrappedMessage.raw_message)
  return raw_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WrappedMessage::release_raw_message() {
  // @@protoc_insertion_point(field_release:dlvc_api.WrappedMessage.raw_message)
  
  return raw_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WrappedMessage::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  raw_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_message);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.WrappedMessage.raw_message)
}

// -------------------------------------------------------------------

// Metadata

// string partner_id = 2;
inline void Metadata::clear_partner_id() {
  partner_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::partner_id() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.partner_id)
  return partner_id_.GetNoArena();
}
inline void Metadata::set_partner_id(const std::string& value) {
  
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.partner_id)
}
inline void Metadata::set_partner_id(std::string&& value) {
  
  partner_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.partner_id)
}
inline void Metadata::set_partner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.partner_id)
}
inline void Metadata::set_partner_id(const char* value, size_t size) {
  
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.partner_id)
}
inline std::string* Metadata::mutable_partner_id() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.partner_id)
  return partner_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_partner_id() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.partner_id)
  
  return partner_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_partner_id(std::string* partner_id) {
  if (partner_id != nullptr) {
    
  } else {
    
  }
  partner_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partner_id);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.partner_id)
}

// string partner_cert_id = 3;
inline void Metadata::clear_partner_cert_id() {
  partner_cert_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::partner_cert_id() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.partner_cert_id)
  return partner_cert_id_.GetNoArena();
}
inline void Metadata::set_partner_cert_id(const std::string& value) {
  
  partner_cert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.partner_cert_id)
}
inline void Metadata::set_partner_cert_id(std::string&& value) {
  
  partner_cert_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.partner_cert_id)
}
inline void Metadata::set_partner_cert_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partner_cert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.partner_cert_id)
}
inline void Metadata::set_partner_cert_id(const char* value, size_t size) {
  
  partner_cert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.partner_cert_id)
}
inline std::string* Metadata::mutable_partner_cert_id() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.partner_cert_id)
  return partner_cert_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_partner_cert_id() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.partner_cert_id)
  
  return partner_cert_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_partner_cert_id(std::string* partner_cert_id) {
  if (partner_cert_id != nullptr) {
    
  } else {
    
  }
  partner_cert_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partner_cert_id);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.partner_cert_id)
}

// string source_id = 4;
inline void Metadata::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::source_id() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.source_id)
  return source_id_.GetNoArena();
}
inline void Metadata::set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.source_id)
}
inline void Metadata::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.source_id)
}
inline void Metadata::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.source_id)
}
inline void Metadata::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.source_id)
}
inline std::string* Metadata::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.source_id)
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_source_id() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.source_id)
}

// string exercise_id = 5;
inline void Metadata::clear_exercise_id() {
  exercise_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::exercise_id() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.exercise_id)
  return exercise_id_.GetNoArena();
}
inline void Metadata::set_exercise_id(const std::string& value) {
  
  exercise_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.exercise_id)
}
inline void Metadata::set_exercise_id(std::string&& value) {
  
  exercise_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.exercise_id)
}
inline void Metadata::set_exercise_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exercise_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.exercise_id)
}
inline void Metadata::set_exercise_id(const char* value, size_t size) {
  
  exercise_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.exercise_id)
}
inline std::string* Metadata::mutable_exercise_id() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.exercise_id)
  return exercise_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_exercise_id() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.exercise_id)
  
  return exercise_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_exercise_id(std::string* exercise_id) {
  if (exercise_id != nullptr) {
    
  } else {
    
  }
  exercise_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exercise_id);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.exercise_id)
}

// string exercise_name = 6;
inline void Metadata::clear_exercise_name() {
  exercise_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::exercise_name() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.exercise_name)
  return exercise_name_.GetNoArena();
}
inline void Metadata::set_exercise_name(const std::string& value) {
  
  exercise_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.exercise_name)
}
inline void Metadata::set_exercise_name(std::string&& value) {
  
  exercise_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.exercise_name)
}
inline void Metadata::set_exercise_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exercise_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.exercise_name)
}
inline void Metadata::set_exercise_name(const char* value, size_t size) {
  
  exercise_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.exercise_name)
}
inline std::string* Metadata::mutable_exercise_name() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.exercise_name)
  return exercise_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_exercise_name() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.exercise_name)
  
  return exercise_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_exercise_name(std::string* exercise_name) {
  if (exercise_name != nullptr) {
    
  } else {
    
  }
  exercise_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exercise_name);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.exercise_name)
}

// string entity_state_pdu = 7;
inline void Metadata::clear_entity_state_pdu() {
  entity_state_pdu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::entity_state_pdu() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.entity_state_pdu)
  return entity_state_pdu_.GetNoArena();
}
inline void Metadata::set_entity_state_pdu(const std::string& value) {
  
  entity_state_pdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.entity_state_pdu)
}
inline void Metadata::set_entity_state_pdu(std::string&& value) {
  
  entity_state_pdu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.Metadata.entity_state_pdu)
}
inline void Metadata::set_entity_state_pdu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_state_pdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.Metadata.entity_state_pdu)
}
inline void Metadata::set_entity_state_pdu(const char* value, size_t size) {
  
  entity_state_pdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.Metadata.entity_state_pdu)
}
inline std::string* Metadata::mutable_entity_state_pdu() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.Metadata.entity_state_pdu)
  return entity_state_pdu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_entity_state_pdu() {
  // @@protoc_insertion_point(field_release:dlvc_api.Metadata.entity_state_pdu)
  
  return entity_state_pdu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_entity_state_pdu(std::string* entity_state_pdu) {
  if (entity_state_pdu != nullptr) {
    
  } else {
    
  }
  entity_state_pdu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_state_pdu);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.Metadata.entity_state_pdu)
}

// .dlvc_api.Metadata.ForceColor force_color = 8;
inline void Metadata::clear_force_color() {
  force_color_ = 0;
}
inline ::dlvc_api::Metadata_ForceColor Metadata::force_color() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Metadata.force_color)
  return static_cast< ::dlvc_api::Metadata_ForceColor >(force_color_);
}
inline void Metadata::set_force_color(::dlvc_api::Metadata_ForceColor value) {
  
  force_color_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Metadata.force_color)
}

// -------------------------------------------------------------------

// UserDefinedMetadata

// string key = 2;
inline void UserDefinedMetadata::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDefinedMetadata::key() const {
  // @@protoc_insertion_point(field_get:dlvc_api.UserDefinedMetadata.key)
  return key_.GetNoArena();
}
inline void UserDefinedMetadata::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.UserDefinedMetadata.key)
}
inline void UserDefinedMetadata::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.UserDefinedMetadata.key)
}
inline void UserDefinedMetadata::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.UserDefinedMetadata.key)
}
inline void UserDefinedMetadata::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.UserDefinedMetadata.key)
}
inline std::string* UserDefinedMetadata::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.UserDefinedMetadata.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDefinedMetadata::release_key() {
  // @@protoc_insertion_point(field_release:dlvc_api.UserDefinedMetadata.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDefinedMetadata::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.UserDefinedMetadata.key)
}

// string value = 3;
inline void UserDefinedMetadata::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDefinedMetadata::value() const {
  // @@protoc_insertion_point(field_get:dlvc_api.UserDefinedMetadata.value)
  return value_.GetNoArena();
}
inline void UserDefinedMetadata::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.UserDefinedMetadata.value)
}
inline void UserDefinedMetadata::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.UserDefinedMetadata.value)
}
inline void UserDefinedMetadata::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.UserDefinedMetadata.value)
}
inline void UserDefinedMetadata::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.UserDefinedMetadata.value)
}
inline std::string* UserDefinedMetadata::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.UserDefinedMetadata.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDefinedMetadata::release_value() {
  // @@protoc_insertion_point(field_release:dlvc_api.UserDefinedMetadata.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDefinedMetadata::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.UserDefinedMetadata.value)
}

// string value_type = 4;
inline void UserDefinedMetadata::clear_value_type() {
  value_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDefinedMetadata::value_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.UserDefinedMetadata.value_type)
  return value_type_.GetNoArena();
}
inline void UserDefinedMetadata::set_value_type(const std::string& value) {
  
  value_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.UserDefinedMetadata.value_type)
}
inline void UserDefinedMetadata::set_value_type(std::string&& value) {
  
  value_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.UserDefinedMetadata.value_type)
}
inline void UserDefinedMetadata::set_value_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.UserDefinedMetadata.value_type)
}
inline void UserDefinedMetadata::set_value_type(const char* value, size_t size) {
  
  value_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.UserDefinedMetadata.value_type)
}
inline std::string* UserDefinedMetadata::mutable_value_type() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.UserDefinedMetadata.value_type)
  return value_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDefinedMetadata::release_value_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.UserDefinedMetadata.value_type)
  
  return value_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDefinedMetadata::set_allocated_value_type(std::string* value_type) {
  if (value_type != nullptr) {
    
  } else {
    
  }
  value_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_type);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.UserDefinedMetadata.value_type)
}

// string unit_type = 5;
inline void UserDefinedMetadata::clear_unit_type() {
  unit_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDefinedMetadata::unit_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.UserDefinedMetadata.unit_type)
  return unit_type_.GetNoArena();
}
inline void UserDefinedMetadata::set_unit_type(const std::string& value) {
  
  unit_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.UserDefinedMetadata.unit_type)
}
inline void UserDefinedMetadata::set_unit_type(std::string&& value) {
  
  unit_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.UserDefinedMetadata.unit_type)
}
inline void UserDefinedMetadata::set_unit_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.UserDefinedMetadata.unit_type)
}
inline void UserDefinedMetadata::set_unit_type(const char* value, size_t size) {
  
  unit_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.UserDefinedMetadata.unit_type)
}
inline std::string* UserDefinedMetadata::mutable_unit_type() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.UserDefinedMetadata.unit_type)
  return unit_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDefinedMetadata::release_unit_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.UserDefinedMetadata.unit_type)
  
  return unit_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDefinedMetadata::set_allocated_unit_type(std::string* unit_type) {
  if (unit_type != nullptr) {
    
  } else {
    
  }
  unit_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit_type);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.UserDefinedMetadata.unit_type)
}

// -------------------------------------------------------------------

// MessageEncoding

// .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
inline void MessageEncoding::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::dlvc_api::MessageEncoding_EncodingType MessageEncoding::encoding_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.MessageEncoding.encoding_type)
  return static_cast< ::dlvc_api::MessageEncoding_EncodingType >(encoding_type_);
}
inline void MessageEncoding::set_encoding_type(::dlvc_api::MessageEncoding_EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.MessageEncoding.encoding_type)
}

// string custom_encoding_type = 3;
inline void MessageEncoding::clear_custom_encoding_type() {
  custom_encoding_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageEncoding::custom_encoding_type() const {
  // @@protoc_insertion_point(field_get:dlvc_api.MessageEncoding.custom_encoding_type)
  return custom_encoding_type_.GetNoArena();
}
inline void MessageEncoding::set_custom_encoding_type(const std::string& value) {
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dlvc_api.MessageEncoding.custom_encoding_type)
}
inline void MessageEncoding::set_custom_encoding_type(std::string&& value) {
  
  custom_encoding_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dlvc_api.MessageEncoding.custom_encoding_type)
}
inline void MessageEncoding::set_custom_encoding_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dlvc_api.MessageEncoding.custom_encoding_type)
}
inline void MessageEncoding::set_custom_encoding_type(const char* value, size_t size) {
  
  custom_encoding_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dlvc_api.MessageEncoding.custom_encoding_type)
}
inline std::string* MessageEncoding::mutable_custom_encoding_type() {
  
  // @@protoc_insertion_point(field_mutable:dlvc_api.MessageEncoding.custom_encoding_type)
  return custom_encoding_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageEncoding::release_custom_encoding_type() {
  // @@protoc_insertion_point(field_release:dlvc_api.MessageEncoding.custom_encoding_type)
  
  return custom_encoding_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageEncoding::set_allocated_custom_encoding_type(std::string* custom_encoding_type) {
  if (custom_encoding_type != nullptr) {
    
  } else {
    
  }
  custom_encoding_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_encoding_type);
  // @@protoc_insertion_point(field_set_allocated:dlvc_api.MessageEncoding.custom_encoding_type)
}

// -------------------------------------------------------------------

// Position

// float latitude = 2;
inline void Position::clear_latitude() {
  latitude_ = 0;
}
inline float Position::latitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.latitude)
  return latitude_;
}
inline void Position::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.latitude)
}

// float longitude = 3;
inline void Position::clear_longitude() {
  longitude_ = 0;
}
inline float Position::longitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.longitude)
  return longitude_;
}
inline void Position::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.longitude)
}

// float pitch = 4;
inline void Position::clear_pitch() {
  pitch_ = 0;
}
inline float Position::pitch() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.pitch)
  return pitch_;
}
inline void Position::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.pitch)
}

// float yaw = 5;
inline void Position::clear_yaw() {
  yaw_ = 0;
}
inline float Position::yaw() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.yaw)
  return yaw_;
}
inline void Position::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.yaw)
}

// float roll = 6;
inline void Position::clear_roll() {
  roll_ = 0;
}
inline float Position::roll() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.roll)
  return roll_;
}
inline void Position::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.roll)
}

// float radius_meters = 7;
inline void Position::clear_radius_meters() {
  radius_meters_ = 0;
}
inline float Position::radius_meters() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.radius_meters)
  return radius_meters_;
}
inline void Position::set_radius_meters(float value) {
  
  radius_meters_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.radius_meters)
}

// float resolution_meters = 8;
inline void Position::clear_resolution_meters() {
  resolution_meters_ = 0;
}
inline float Position::resolution_meters() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.resolution_meters)
  return resolution_meters_;
}
inline void Position::set_resolution_meters(float value) {
  
  resolution_meters_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.resolution_meters)
}

// .dlvc_api.Position.TFOM tfom = 9;
inline void Position::clear_tfom() {
  tfom_ = 0;
}
inline ::dlvc_api::Position_TFOM Position::tfom() const {
  // @@protoc_insertion_point(field_get:dlvc_api.Position.tfom)
  return static_cast< ::dlvc_api::Position_TFOM >(tfom_);
}
inline void Position::set_tfom(::dlvc_api::Position_TFOM value) {
  
  tfom_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.Position.tfom)
}

// -------------------------------------------------------------------

// PositionBoundingBox

// float min_latitude = 2;
inline void PositionBoundingBox::clear_min_latitude() {
  min_latitude_ = 0;
}
inline float PositionBoundingBox::min_latitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.PositionBoundingBox.min_latitude)
  return min_latitude_;
}
inline void PositionBoundingBox::set_min_latitude(float value) {
  
  min_latitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.PositionBoundingBox.min_latitude)
}

// float max_latitude = 3;
inline void PositionBoundingBox::clear_max_latitude() {
  max_latitude_ = 0;
}
inline float PositionBoundingBox::max_latitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.PositionBoundingBox.max_latitude)
  return max_latitude_;
}
inline void PositionBoundingBox::set_max_latitude(float value) {
  
  max_latitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.PositionBoundingBox.max_latitude)
}

// float min_longitude = 4;
inline void PositionBoundingBox::clear_min_longitude() {
  min_longitude_ = 0;
}
inline float PositionBoundingBox::min_longitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.PositionBoundingBox.min_longitude)
  return min_longitude_;
}
inline void PositionBoundingBox::set_min_longitude(float value) {
  
  min_longitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.PositionBoundingBox.min_longitude)
}

// float max_longitude = 5;
inline void PositionBoundingBox::clear_max_longitude() {
  max_longitude_ = 0;
}
inline float PositionBoundingBox::max_longitude() const {
  // @@protoc_insertion_point(field_get:dlvc_api.PositionBoundingBox.max_longitude)
  return max_longitude_;
}
inline void PositionBoundingBox::set_max_longitude(float value) {
  
  max_longitude_ = value;
  // @@protoc_insertion_point(field_set:dlvc_api.PositionBoundingBox.max_longitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dlvc_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dlvc_api::WrappedMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::WrappedMessage_MessageType>() {
  return ::dlvc_api::WrappedMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::dlvc_api::Metadata_ForceColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::Metadata_ForceColor>() {
  return ::dlvc_api::Metadata_ForceColor_descriptor();
}
template <> struct is_proto_enum< ::dlvc_api::MessageEncoding_EncodingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::MessageEncoding_EncodingType>() {
  return ::dlvc_api::MessageEncoding_EncodingType_descriptor();
}
template <> struct is_proto_enum< ::dlvc_api::Position_TFOM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::Position_TFOM>() {
  return ::dlvc_api::Position_TFOM_descriptor();
}
template <> struct is_proto_enum< ::dlvc_api::MessageRetrievalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::MessageRetrievalType>() {
  return ::dlvc_api::MessageRetrievalType_descriptor();
}
template <> struct is_proto_enum< ::dlvc_api::ReturnedMetadataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dlvc_api::ReturnedMetadataType>() {
  return ::dlvc_api::ReturnedMetadataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dlvc_5fapi_2fdlvc_2eproto
