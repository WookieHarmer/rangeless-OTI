// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dlvc_api/dlvc.proto

#include "dlvc_api/dlvc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dlvc_5fapi_2fdlvc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace dlvc_api {
class PushRawMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushRawMessageRequest> _instance;
} _PushRawMessageRequest_default_instance_;
class PushRawMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushRawMessageResponse> _instance;
} _PushRawMessageResponse_default_instance_;
class PushRawMessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushRawMessagesRequest> _instance;
} _PushRawMessagesRequest_default_instance_;
class PushRawMessagesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushRawMessagesResponse> _instance;
} _PushRawMessagesResponse_default_instance_;
class DuplicateDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DuplicateDetails> _instance;
} _DuplicateDetails_default_instance_;
class GetRawMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawMessageRequest> _instance;
} _GetRawMessageRequest_default_instance_;
class GetRawMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawMessageResponse> _instance;
} _GetRawMessageResponse_default_instance_;
class GetRawMessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawMessagesRequest> _instance;
} _GetRawMessagesRequest_default_instance_;
class GetRawMessagesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawMessagesResponse> _instance;
} _GetRawMessagesResponse_default_instance_;
class SourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceType> _instance;
} _SourceType_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
class SummarizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummarizeRequest> _instance;
} _SummarizeRequest_default_instance_;
class SummarizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummarizeResponse> _instance;
} _SummarizeResponse_default_instance_;
class ListMetadataValuesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMetadataValuesRequest> _instance;
} _ListMetadataValuesRequest_default_instance_;
class ListMetadataValuesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMetadataValuesResponse> _instance;
} _ListMetadataValuesResponse_default_instance_;
class ListExercisesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListExercisesRequest> _instance;
} _ListExercisesRequest_default_instance_;
class ListExercisesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListExercisesResponse> _instance;
} _ListExercisesResponse_default_instance_;
class WrappedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrappedMessage> _instance;
} _WrappedMessage_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class UserDefinedMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDefinedMetadata> _instance;
} _UserDefinedMetadata_default_instance_;
class MessageEncodingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageEncoding> _instance;
} _MessageEncoding_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PositionBoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionBoundingBox> _instance;
} _PositionBoundingBox_default_instance_;
}  // namespace dlvc_api
static void InitDefaultsscc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_DuplicateDetails_default_instance_;
    new (ptr) ::dlvc_api::DuplicateDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::DuplicateDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_GetRawMessageRequest_default_instance_;
    new (ptr) ::dlvc_api::GetRawMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::GetRawMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_GetRawMessageResponse_default_instance_;
    new (ptr) ::dlvc_api::GetRawMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::GetRawMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_GetRawMessagesRequest_default_instance_;
    new (ptr) ::dlvc_api::GetRawMessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::GetRawMessagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_GetRawMessagesResponse_default_instance_;
    new (ptr) ::dlvc_api::GetRawMessagesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::GetRawMessagesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_ListExercisesRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_ListExercisesRequest_default_instance_;
    new (ptr) ::dlvc_api::ListExercisesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::ListExercisesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListExercisesRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListExercisesRequest_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_ListExercisesResponse_default_instance_;
    new (ptr) ::dlvc_api::ListExercisesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::ListExercisesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_ListMetadataValuesRequest_default_instance_;
    new (ptr) ::dlvc_api::ListMetadataValuesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::ListMetadataValuesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_ListMetadataValuesResponse_default_instance_;
    new (ptr) ::dlvc_api::ListMetadataValuesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::ListMetadataValuesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_MessageEncoding_default_instance_;
    new (ptr) ::dlvc_api::MessageEncoding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::MessageEncoding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_Metadata_default_instance_;
    new (ptr) ::dlvc_api::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_Position_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_Position_default_instance_;
    new (ptr) ::dlvc_api::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Position_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_PositionBoundingBox_default_instance_;
    new (ptr) ::dlvc_api::PositionBoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::PositionBoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_PushRawMessageRequest_default_instance_;
    new (ptr) ::dlvc_api::PushRawMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::PushRawMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_PushRawMessageResponse_default_instance_;
    new (ptr) ::dlvc_api::PushRawMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::PushRawMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_PushRawMessagesRequest_default_instance_;
    new (ptr) ::dlvc_api::PushRawMessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::PushRawMessagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_PushRawMessagesResponse_default_instance_;
    new (ptr) ::dlvc_api::PushRawMessagesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::PushRawMessagesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto.base,}};

static void InitDefaultsscc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_SourceType_default_instance_;
    new (ptr) ::dlvc_api::SourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::SourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_SummarizeRequest_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_SummarizeRequest_default_instance_;
    new (ptr) ::dlvc_api::SummarizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::SummarizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummarizeRequest_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SummarizeRequest_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_SummarizeResponse_default_instance_;
    new (ptr) ::dlvc_api::SummarizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::SummarizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_TimeRange_default_instance_;
    new (ptr) ::dlvc_api::TimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::TimeRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_UserDefinedMetadata_default_instance_;
    new (ptr) ::dlvc_api::UserDefinedMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::UserDefinedMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto}, {}};

static void InitDefaultsscc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dlvc_api::_WrappedMessage_default_instance_;
    new (ptr) ::dlvc_api::WrappedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dlvc_api::WrappedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto}, {
      &scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_Position_dlvc_5fapi_2fdlvc_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dlvc_5fapi_2fdlvc_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dlvc_5fapi_2fdlvc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dlvc_5fapi_2fdlvc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessageRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessageResponse, duplicate_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesRequest, user_metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesRequest, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PushRawMessagesResponse, duplicate_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::DuplicateDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::DuplicateDetails, duplicates_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::DuplicateDetails, idempotency_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, retrieval_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, returned_metadata_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, user_metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, source_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, time_range_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageRequest, next_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageResponse, message_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageResponse, next_index_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessageResponse, len_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, retrieval_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, returned_metadata_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, user_metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, source_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, time_range_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, next_index_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesRequest, len_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesResponse, messages_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesResponse, next_index_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesResponse, len_bytes_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::GetRawMessagesResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SourceType, message_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SourceType, encoding_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SourceType, custom_encoding_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::TimeRange, start_time_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::TimeRange, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, metadata_keys_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, user_metadata_keys_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, message_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, encoding_types_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, len_bytes_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::SummarizeResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListMetadataValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListMetadataValuesRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListMetadataValuesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListMetadataValuesResponse, key_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListMetadataValuesResponse, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListExercisesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListExercisesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::ListExercisesResponse, exercise_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, idempotency_key_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, user_metadata_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, message_encoding_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, position_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, created_time_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::WrappedMessage, raw_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, partner_id_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, partner_cert_id_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, source_id_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, exercise_id_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, exercise_name_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, entity_state_pdu_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Metadata, force_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::UserDefinedMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::UserDefinedMetadata, key_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::UserDefinedMetadata, value_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::UserDefinedMetadata, value_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::UserDefinedMetadata, unit_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::MessageEncoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::MessageEncoding, encoding_type_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::MessageEncoding, custom_encoding_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, pitch_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, yaw_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, roll_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, radius_meters_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, resolution_meters_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::Position, tfom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PositionBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PositionBoundingBox, min_latitude_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PositionBoundingBox, max_latitude_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PositionBoundingBox, min_longitude_),
  PROTOBUF_FIELD_OFFSET(::dlvc_api::PositionBoundingBox, max_longitude_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dlvc_api::PushRawMessageRequest)},
  { 6, -1, sizeof(::dlvc_api::PushRawMessageResponse)},
  { 12, -1, sizeof(::dlvc_api::PushRawMessagesRequest)},
  { 20, -1, sizeof(::dlvc_api::PushRawMessagesResponse)},
  { 26, -1, sizeof(::dlvc_api::DuplicateDetails)},
  { 33, -1, sizeof(::dlvc_api::GetRawMessageRequest)},
  { 46, -1, sizeof(::dlvc_api::GetRawMessageResponse)},
  { 54, -1, sizeof(::dlvc_api::GetRawMessagesRequest)},
  { 69, -1, sizeof(::dlvc_api::GetRawMessagesResponse)},
  { 78, -1, sizeof(::dlvc_api::SourceType)},
  { 86, -1, sizeof(::dlvc_api::TimeRange)},
  { 93, -1, sizeof(::dlvc_api::SummarizeRequest)},
  { 98, -1, sizeof(::dlvc_api::SummarizeResponse)},
  { 109, -1, sizeof(::dlvc_api::ListMetadataValuesRequest)},
  { 115, -1, sizeof(::dlvc_api::ListMetadataValuesResponse)},
  { 122, -1, sizeof(::dlvc_api::ListExercisesRequest)},
  { 127, -1, sizeof(::dlvc_api::ListExercisesResponse)},
  { 133, -1, sizeof(::dlvc_api::WrappedMessage)},
  { 146, -1, sizeof(::dlvc_api::Metadata)},
  { 158, -1, sizeof(::dlvc_api::UserDefinedMetadata)},
  { 167, -1, sizeof(::dlvc_api::MessageEncoding)},
  { 174, -1, sizeof(::dlvc_api::Position)},
  { 187, -1, sizeof(::dlvc_api::PositionBoundingBox)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_PushRawMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_PushRawMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_PushRawMessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_PushRawMessagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_DuplicateDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_GetRawMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_GetRawMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_GetRawMessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_GetRawMessagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_SourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_SummarizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_SummarizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_ListMetadataValuesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_ListMetadataValuesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_ListExercisesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_ListExercisesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_WrappedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_UserDefinedMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_MessageEncoding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dlvc_api::_PositionBoundingBox_default_instance_),
};

const char descriptor_table_protodef_dlvc_5fapi_2fdlvc_2eproto[] =
  "\n\023dlvc_api/dlvc.proto\022\010dlvc_api\032\037google/"
  "protobuf/timestamp.proto\"H\n\025PushRawMessa"
  "geRequest\022)\n\007message\030\002 \001(\0132\030.dlvc_api.Wr"
  "appedMessageJ\004\010\001\020\002\"U\n\026PushRawMessageResp"
  "onse\0225\n\021duplicate_details\030\002 \001(\0132\032.dlvc_a"
  "pi.DuplicateDetailsJ\004\010\001\020\002\"\246\001\n\026PushRawMes"
  "sagesRequest\022$\n\010metadata\030\002 \001(\0132\022.dlvc_ap"
  "i.Metadata\0224\n\ruser_metadata\030\003 \003(\0132\035.dlvc"
  "_api.UserDefinedMetadata\022*\n\010messages\030\004 \003"
  "(\0132\030.dlvc_api.WrappedMessageJ\004\010\001\020\002\"V\n\027Pu"
  "shRawMessagesResponse\0225\n\021duplicate_detai"
  "ls\030\002 \001(\0132\032.dlvc_api.DuplicateDetailsJ\004\010\001"
  "\020\002\"F\n\020DuplicateDetails\022\022\n\nduplicates\030\002 \001"
  "(\010\022\030\n\020idempotency_keys\030\003 \003(\tJ\004\010\001\020\002\"\217\003\n\024G"
  "etRawMessageRequest\0227\n\017retrieval_types\030\002"
  " \003(\0162\036.dlvc_api.MessageRetrievalType\022\?\n\027"
  "returned_metadata_types\030\003 \003(\0162\036.dlvc_api"
  ".ReturnedMetadataType\022$\n\010metadata\030\004 \001(\0132"
  "\022.dlvc_api.Metadata\0224\n\ruser_metadata\030\005 \003"
  "(\0132\035.dlvc_api.UserDefinedMetadata\022)\n\013sou"
  "rce_type\030\006 \001(\0132\024.dlvc_api.SourceType\0223\n\014"
  "bounding_box\030\007 \001(\0132\035.dlvc_api.PositionBo"
  "undingBox\022\'\n\ntime_range\030\010 \001(\0132\023.dlvc_api"
  ".TimeRange\022\022\n\nnext_index\030\t \001(\003J\004\010\001\020\002\"o\n\025"
  "GetRawMessageResponse\022)\n\007message\030\002 \001(\0132\030"
  ".dlvc_api.WrappedMessage\022\022\n\nnext_index\030\003"
  " \001(\003\022\021\n\tlen_bytes\030\004 \001(\003J\004\010\001\020\002\"\262\003\n\025GetRaw"
  "MessagesRequest\0227\n\017retrieval_types\030\002 \003(\016"
  "2\036.dlvc_api.MessageRetrievalType\022\?\n\027retu"
  "rned_metadata_types\030\003 \003(\0162\036.dlvc_api.Ret"
  "urnedMetadataType\022$\n\010metadata\030\004 \001(\0132\022.dl"
  "vc_api.Metadata\0224\n\ruser_metadata\030\005 \003(\0132\035"
  ".dlvc_api.UserDefinedMetadata\022)\n\013source_"
  "type\030\006 \001(\0132\024.dlvc_api.SourceType\0223\n\014boun"
  "ding_box\030\007 \001(\0132\035.dlvc_api.PositionBoundi"
  "ngBox\022\'\n\ntime_range\030\010 \001(\0132\023.dlvc_api.Tim"
  "eRange\022\022\n\nnext_index\030\t \001(\003\022\r\n\005limit\030\n \001("
  "\003\022\021\n\tlen_bytes\030\013 \001(\003J\004\010\001\020\002\"\200\001\n\026GetRawMes"
  "sagesResponse\022*\n\010messages\030\002 \003(\0132\030.dlvc_a"
  "pi.WrappedMessage\022\022\n\nnext_index\030\003 \001(\003\022\021\n"
  "\tlen_bytes\030\004 \001(\003\022\r\n\005count\030\005 \001(\003J\004\010\001\020\002\"\253\001"
  "\n\nSourceType\022:\n\014message_type\030\002 \001(\0162$.dlv"
  "c_api.WrappedMessage.MessageType\022=\n\renco"
  "ding_type\030\003 \001(\0162&.dlvc_api.MessageEncodi"
  "ng.EncodingType\022\034\n\024custom_encoding_type\030"
  "\004 \001(\tJ\004\010\001\020\002\"o\n\tTimeRange\022.\n\nstart_time\030\002"
  " \001(\0132\032.google.protobuf.Timestamp\022,\n\010end_"
  "time\030\003 \001(\0132\032.google.protobuf.TimestampJ\004"
  "\010\001\020\002\"\030\n\020SummarizeRequestJ\004\010\001\020\002\"\353\001\n\021Summa"
  "rizeResponse\022\025\n\rmetadata_keys\030\002 \003(\t\022\032\n\022u"
  "ser_metadata_keys\030\003 \003(\t\022;\n\rmessage_types"
  "\030\004 \003(\0162$.dlvc_api.WrappedMessage.Message"
  "Type\022>\n\016encoding_types\030\005 \003(\0162&.dlvc_api."
  "MessageEncoding.EncodingType\022\021\n\tlen_byte"
  "s\030\006 \001(\003\022\r\n\005count\030\007 \001(\003J\004\010\001\020\002\".\n\031ListMeta"
  "dataValuesRequest\022\013\n\003key\030\002 \001(\tJ\004\010\001\020\002\"\?\n\032"
  "ListMetadataValuesResponse\022\013\n\003key\030\002 \001(\t\022"
  "\016\n\006values\030\003 \003(\tJ\004\010\001\020\002\"\034\n\024ListExercisesRe"
  "questJ\004\010\001\020\002\"3\n\025ListExercisesResponse\022\024\n\014"
  "exercise_ids\030\003 \003(\tJ\004\010\001\020\002\"\327\003\n\016WrappedMess"
  "age\022\027\n\017idempotency_key\030\002 \001(\t\022$\n\010metadata"
  "\030\003 \001(\0132\022.dlvc_api.Metadata\0224\n\ruser_metad"
  "ata\030\004 \003(\0132\035.dlvc_api.UserDefinedMetadata"
  "\022:\n\014message_type\030\005 \001(\0162$.dlvc_api.Wrappe"
  "dMessage.MessageType\0223\n\020message_encoding"
  "\030\006 \001(\0132\031.dlvc_api.MessageEncoding\022$\n\010pos"
  "ition\030\007 \001(\0132\022.dlvc_api.Position\0220\n\014creat"
  "ed_time\030\010 \001(\0132\032.google.protobuf.Timestam"
  "p\022\023\n\013raw_message\030\t \001(\014\"l\n\013MessageType\022\017\n"
  "\013UNSPECIFIED\020\000\022\n\n\006CUSTOM\020\001\022\010\n\004DIS7\020\002\022\007\n\003"
  "COT\020\003\022\n\n\006LINK16\020\004\022\t\n\005JREAP\020\005\022\026\n\022INSTRUCT"
  "OR_COMMENT\020\006J\004\010\001\020\002\"\222\002\n\010Metadata\022\022\n\npartn"
  "er_id\030\002 \001(\t\022\027\n\017partner_cert_id\030\003 \001(\t\022\021\n\t"
  "source_id\030\004 \001(\t\022\023\n\013exercise_id\030\005 \001(\t\022\025\n\r"
  "exercise_name\030\006 \001(\t\022\030\n\020entity_state_pdu\030"
  "\007 \001(\t\0222\n\013force_color\030\010 \001(\0162\035.dlvc_api.Me"
  "tadata.ForceColor\"F\n\nForceColor\022\017\n\013UNSPE"
  "CIFIED\020\000\022\010\n\004BLUE\020\001\022\007\n\003RED\020\002\022\t\n\005WHITE\020\003\022\t"
  "\n\005GREEN\020\004J\004\010\001\020\002\"^\n\023UserDefinedMetadata\022\013"
  "\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\022\n\nvalue_type"
  "\030\004 \001(\t\022\021\n\tunit_type\030\005 \001(\tJ\004\010\001\020\002\"\307\001\n\017Mess"
  "ageEncoding\022=\n\rencoding_type\030\002 \001(\0162&.dlv"
  "c_api.MessageEncoding.EncodingType\022\034\n\024cu"
  "stom_encoding_type\030\003 \001(\t\"Q\n\014EncodingType"
  "\022\017\n\013UNSPECIFIED\020\000\022\n\n\006CUSTOM\020\001\022\010\n\004TEXT\020\002\022"
  "\010\n\004JSON\020\003\022\007\n\003XML\020\004\022\007\n\003CSV\020\005J\004\010\001\020\002\"\223\004\n\010Po"
  "sition\022\020\n\010latitude\030\002 \001(\002\022\021\n\tlongitude\030\003 "
  "\001(\002\022\r\n\005pitch\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\014\n\004roll\030"
  "\006 \001(\002\022\025\n\rradius_meters\030\007 \001(\002\022\031\n\021resoluti"
  "on_meters\030\010 \001(\002\022%\n\004tfom\030\t \001(\0162\027.dlvc_api"
  ".Position.TFOM\"\330\002\n\004TFOM\022\017\n\013UNSPECIFIED\020\000"
  "\022\024\n\020LTE_1_NANOSECOND\020\001\022\026\n\022LTE_10_NANOSEC"
  "ONDS\020\002\022\027\n\023LTE_100_NANOSECONDS\020\003\022\025\n\021LTE_1"
  "_MICROSECOND\020\004\022\027\n\023LTE_10_MICROSECONDS\020\005\022"
  "\030\n\024LTE_100_MICROSECONDS\020\006\022\025\n\021LTE_1_MILLI"
  "SECOND\020\007\022\027\n\023LTE_10_MILLISECONDS\020\010\022\030\n\024LTE"
  "_100_MILLISECONDS\020\t\022\020\n\014LTE_1_SECOND\020\n\022\022\n"
  "\016LTE_10_SECONDS\020\013\022\023\n\017LTE_100_SECONDS\020\014\022\024"
  "\n\020LTE_1000_SECONDS\020\r\022\023\n\017GT_1000_SECONDS\020"
  "\016J\004\010\001\020\002\"u\n\023PositionBoundingBox\022\024\n\014min_la"
  "titude\030\002 \001(\002\022\024\n\014max_latitude\030\003 \001(\002\022\025\n\rmi"
  "n_longitude\030\004 \001(\002\022\025\n\rmax_longitude\030\005 \001(\002"
  "J\004\010\001\020\002*\245\001\n\024MessageRetrievalType\022\017\n\013UNSPE"
  "CIFIED\020\000\022\t\n\005INDEX\020\001\022\010\n\004TIME\020\002\022\020\n\014MESSAGE"
  "_TYPE\020\003\022\021\n\rENCODING_TYPE\020\004\022\014\n\010METADATA\020\005"
  "\022\031\n\025USER_DEFINED_METADATA\020\006\022\031\n\025POSITION_"
  "BOUNDING_BOX\020\007*\304\001\n\024ReturnedMetadataType\022"
  "\026\n\022RETURN_UNSPECIFIED\020\000\022\017\n\013RETURN_NONE\020\001"
  "\022\016\n\nRETURN_ALL\020\002\022\017\n\013RETURN_TIME\020\003\022\026\n\022RET"
  "URN_SOURCE_TYPE\020\004\022\023\n\017RETURN_METADATA\020\005\022 "
  "\n\034RETURN_USER_DEFINED_METADATA\020\006\022\023\n\017RETU"
  "RN_POSITION\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dlvc_5fapi_2fdlvc_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dlvc_5fapi_2fdlvc_2eproto_sccs[23] = {
  &scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_ListExercisesRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_Position_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_SummarizeRequest_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base,
  &scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dlvc_5fapi_2fdlvc_2eproto_once;
static bool descriptor_table_dlvc_5fapi_2fdlvc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dlvc_5fapi_2fdlvc_2eproto = {
  &descriptor_table_dlvc_5fapi_2fdlvc_2eproto_initialized, descriptor_table_protodef_dlvc_5fapi_2fdlvc_2eproto, "dlvc_api/dlvc.proto", 4461,
  &descriptor_table_dlvc_5fapi_2fdlvc_2eproto_once, descriptor_table_dlvc_5fapi_2fdlvc_2eproto_sccs, descriptor_table_dlvc_5fapi_2fdlvc_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_dlvc_5fapi_2fdlvc_2eproto::offsets,
  file_level_metadata_dlvc_5fapi_2fdlvc_2eproto, 23, file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto, file_level_service_descriptors_dlvc_5fapi_2fdlvc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dlvc_5fapi_2fdlvc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto), true);
namespace dlvc_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WrappedMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[0];
}
bool WrappedMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WrappedMessage_MessageType WrappedMessage::UNSPECIFIED;
constexpr WrappedMessage_MessageType WrappedMessage::CUSTOM;
constexpr WrappedMessage_MessageType WrappedMessage::DIS7;
constexpr WrappedMessage_MessageType WrappedMessage::COT;
constexpr WrappedMessage_MessageType WrappedMessage::LINK16;
constexpr WrappedMessage_MessageType WrappedMessage::JREAP;
constexpr WrappedMessage_MessageType WrappedMessage::INSTRUCTOR_COMMENT;
constexpr WrappedMessage_MessageType WrappedMessage::MessageType_MIN;
constexpr WrappedMessage_MessageType WrappedMessage::MessageType_MAX;
constexpr int WrappedMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_ForceColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[1];
}
bool Metadata_ForceColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Metadata_ForceColor Metadata::UNSPECIFIED;
constexpr Metadata_ForceColor Metadata::BLUE;
constexpr Metadata_ForceColor Metadata::RED;
constexpr Metadata_ForceColor Metadata::WHITE;
constexpr Metadata_ForceColor Metadata::GREEN;
constexpr Metadata_ForceColor Metadata::ForceColor_MIN;
constexpr Metadata_ForceColor Metadata::ForceColor_MAX;
constexpr int Metadata::ForceColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageEncoding_EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[2];
}
bool MessageEncoding_EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageEncoding_EncodingType MessageEncoding::UNSPECIFIED;
constexpr MessageEncoding_EncodingType MessageEncoding::CUSTOM;
constexpr MessageEncoding_EncodingType MessageEncoding::TEXT;
constexpr MessageEncoding_EncodingType MessageEncoding::JSON;
constexpr MessageEncoding_EncodingType MessageEncoding::XML;
constexpr MessageEncoding_EncodingType MessageEncoding::CSV;
constexpr MessageEncoding_EncodingType MessageEncoding::EncodingType_MIN;
constexpr MessageEncoding_EncodingType MessageEncoding::EncodingType_MAX;
constexpr int MessageEncoding::EncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_TFOM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[3];
}
bool Position_TFOM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Position_TFOM Position::UNSPECIFIED;
constexpr Position_TFOM Position::LTE_1_NANOSECOND;
constexpr Position_TFOM Position::LTE_10_NANOSECONDS;
constexpr Position_TFOM Position::LTE_100_NANOSECONDS;
constexpr Position_TFOM Position::LTE_1_MICROSECOND;
constexpr Position_TFOM Position::LTE_10_MICROSECONDS;
constexpr Position_TFOM Position::LTE_100_MICROSECONDS;
constexpr Position_TFOM Position::LTE_1_MILLISECOND;
constexpr Position_TFOM Position::LTE_10_MILLISECONDS;
constexpr Position_TFOM Position::LTE_100_MILLISECONDS;
constexpr Position_TFOM Position::LTE_1_SECOND;
constexpr Position_TFOM Position::LTE_10_SECONDS;
constexpr Position_TFOM Position::LTE_100_SECONDS;
constexpr Position_TFOM Position::LTE_1000_SECONDS;
constexpr Position_TFOM Position::GT_1000_SECONDS;
constexpr Position_TFOM Position::TFOM_MIN;
constexpr Position_TFOM Position::TFOM_MAX;
constexpr int Position::TFOM_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRetrievalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[4];
}
bool MessageRetrievalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnedMetadataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dlvc_5fapi_2fdlvc_2eproto);
  return file_level_enum_descriptors_dlvc_5fapi_2fdlvc_2eproto[5];
}
bool ReturnedMetadataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PushRawMessageRequest::InitAsDefaultInstance() {
  ::dlvc_api::_PushRawMessageRequest_default_instance_._instance.get_mutable()->message_ = const_cast< ::dlvc_api::WrappedMessage*>(
      ::dlvc_api::WrappedMessage::internal_default_instance());
}
class PushRawMessageRequest::HasBitSetters {
 public:
  static const ::dlvc_api::WrappedMessage& message(const PushRawMessageRequest* msg);
};

const ::dlvc_api::WrappedMessage&
PushRawMessageRequest::HasBitSetters::message(const PushRawMessageRequest* msg) {
  return *msg->message_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushRawMessageRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushRawMessageRequest::PushRawMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.PushRawMessageRequest)
}
PushRawMessageRequest::PushRawMessageRequest(const PushRawMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message()) {
    message_ = new ::dlvc_api::WrappedMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.PushRawMessageRequest)
}

void PushRawMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  message_ = nullptr;
}

PushRawMessageRequest::~PushRawMessageRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.PushRawMessageRequest)
  SharedDtor();
}

void PushRawMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void PushRawMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushRawMessageRequest& PushRawMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void PushRawMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.PushRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushRawMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.WrappedMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushRawMessageRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.PushRawMessageRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.WrappedMessage message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.PushRawMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.PushRawMessageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushRawMessageRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.PushRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::message(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.PushRawMessageRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushRawMessageRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.PushRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::message(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.PushRawMessageRequest)
  return target;
}

size_t PushRawMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.PushRawMessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushRawMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.PushRawMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushRawMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushRawMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.PushRawMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.PushRawMessageRequest)
    MergeFrom(*source);
  }
}

void PushRawMessageRequest::MergeFrom(const PushRawMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.PushRawMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    mutable_message()->::dlvc_api::WrappedMessage::MergeFrom(from.message());
  }
}

void PushRawMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.PushRawMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRawMessageRequest::CopyFrom(const PushRawMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.PushRawMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRawMessageRequest::IsInitialized() const {
  return true;
}

void PushRawMessageRequest::Swap(PushRawMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushRawMessageRequest::InternalSwap(PushRawMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushRawMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushRawMessageResponse::InitAsDefaultInstance() {
  ::dlvc_api::_PushRawMessageResponse_default_instance_._instance.get_mutable()->duplicate_details_ = const_cast< ::dlvc_api::DuplicateDetails*>(
      ::dlvc_api::DuplicateDetails::internal_default_instance());
}
class PushRawMessageResponse::HasBitSetters {
 public:
  static const ::dlvc_api::DuplicateDetails& duplicate_details(const PushRawMessageResponse* msg);
};

const ::dlvc_api::DuplicateDetails&
PushRawMessageResponse::HasBitSetters::duplicate_details(const PushRawMessageResponse* msg) {
  return *msg->duplicate_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushRawMessageResponse::kDuplicateDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushRawMessageResponse::PushRawMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.PushRawMessageResponse)
}
PushRawMessageResponse::PushRawMessageResponse(const PushRawMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duplicate_details()) {
    duplicate_details_ = new ::dlvc_api::DuplicateDetails(*from.duplicate_details_);
  } else {
    duplicate_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.PushRawMessageResponse)
}

void PushRawMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  duplicate_details_ = nullptr;
}

PushRawMessageResponse::~PushRawMessageResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.PushRawMessageResponse)
  SharedDtor();
}

void PushRawMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete duplicate_details_;
}

void PushRawMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushRawMessageResponse& PushRawMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void PushRawMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.PushRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && duplicate_details_ != nullptr) {
    delete duplicate_details_;
  }
  duplicate_details_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushRawMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.DuplicateDetails duplicate_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_duplicate_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushRawMessageResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.PushRawMessageResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.DuplicateDetails duplicate_details = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duplicate_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.PushRawMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.PushRawMessageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushRawMessageResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.PushRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::duplicate_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.PushRawMessageResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushRawMessageResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.PushRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::duplicate_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.PushRawMessageResponse)
  return target;
}

size_t PushRawMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.PushRawMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duplicate_details_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushRawMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.PushRawMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushRawMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushRawMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.PushRawMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.PushRawMessageResponse)
    MergeFrom(*source);
  }
}

void PushRawMessageResponse::MergeFrom(const PushRawMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.PushRawMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duplicate_details()) {
    mutable_duplicate_details()->::dlvc_api::DuplicateDetails::MergeFrom(from.duplicate_details());
  }
}

void PushRawMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.PushRawMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRawMessageResponse::CopyFrom(const PushRawMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.PushRawMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRawMessageResponse::IsInitialized() const {
  return true;
}

void PushRawMessageResponse::Swap(PushRawMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushRawMessageResponse::InternalSwap(PushRawMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duplicate_details_, other->duplicate_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushRawMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushRawMessagesRequest::InitAsDefaultInstance() {
  ::dlvc_api::_PushRawMessagesRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dlvc_api::Metadata*>(
      ::dlvc_api::Metadata::internal_default_instance());
}
class PushRawMessagesRequest::HasBitSetters {
 public:
  static const ::dlvc_api::Metadata& metadata(const PushRawMessagesRequest* msg);
};

const ::dlvc_api::Metadata&
PushRawMessagesRequest::HasBitSetters::metadata(const PushRawMessagesRequest* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushRawMessagesRequest::kMetadataFieldNumber;
const int PushRawMessagesRequest::kUserMetadataFieldNumber;
const int PushRawMessagesRequest::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushRawMessagesRequest::PushRawMessagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.PushRawMessagesRequest)
}
PushRawMessagesRequest::PushRawMessagesRequest(const PushRawMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_metadata_(from.user_metadata_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::dlvc_api::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.PushRawMessagesRequest)
}

void PushRawMessagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  metadata_ = nullptr;
}

PushRawMessagesRequest::~PushRawMessagesRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.PushRawMessagesRequest)
  SharedDtor();
}

void PushRawMessagesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void PushRawMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushRawMessagesRequest& PushRawMessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void PushRawMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.PushRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_metadata_.Clear();
  messages_.Clear();
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushRawMessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.WrappedMessage messages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushRawMessagesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.PushRawMessagesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.Metadata metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.WrappedMessage messages = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.PushRawMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.PushRawMessagesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushRawMessagesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.PushRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.Metadata metadata = 2;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->user_metadata(static_cast<int>(i)),
      output);
  }

  // repeated .dlvc_api.WrappedMessage messages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.PushRawMessagesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushRawMessagesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.PushRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.Metadata metadata = 2;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->user_metadata(static_cast<int>(i)), target);
  }

  // repeated .dlvc_api.WrappedMessage messages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.PushRawMessagesRequest)
  return target;
}

size_t PushRawMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.PushRawMessagesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_metadata(static_cast<int>(i)));
    }
  }

  // repeated .dlvc_api.WrappedMessage messages = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // .dlvc_api.Metadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushRawMessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.PushRawMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushRawMessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushRawMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.PushRawMessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.PushRawMessagesRequest)
    MergeFrom(*source);
  }
}

void PushRawMessagesRequest::MergeFrom(const PushRawMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.PushRawMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_metadata_.MergeFrom(from.user_metadata_);
  messages_.MergeFrom(from.messages_);
  if (from.has_metadata()) {
    mutable_metadata()->::dlvc_api::Metadata::MergeFrom(from.metadata());
  }
}

void PushRawMessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.PushRawMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRawMessagesRequest::CopyFrom(const PushRawMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.PushRawMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRawMessagesRequest::IsInitialized() const {
  return true;
}

void PushRawMessagesRequest::Swap(PushRawMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushRawMessagesRequest::InternalSwap(PushRawMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&user_metadata_)->InternalSwap(CastToBase(&other->user_metadata_));
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushRawMessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushRawMessagesResponse::InitAsDefaultInstance() {
  ::dlvc_api::_PushRawMessagesResponse_default_instance_._instance.get_mutable()->duplicate_details_ = const_cast< ::dlvc_api::DuplicateDetails*>(
      ::dlvc_api::DuplicateDetails::internal_default_instance());
}
class PushRawMessagesResponse::HasBitSetters {
 public:
  static const ::dlvc_api::DuplicateDetails& duplicate_details(const PushRawMessagesResponse* msg);
};

const ::dlvc_api::DuplicateDetails&
PushRawMessagesResponse::HasBitSetters::duplicate_details(const PushRawMessagesResponse* msg) {
  return *msg->duplicate_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushRawMessagesResponse::kDuplicateDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushRawMessagesResponse::PushRawMessagesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.PushRawMessagesResponse)
}
PushRawMessagesResponse::PushRawMessagesResponse(const PushRawMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duplicate_details()) {
    duplicate_details_ = new ::dlvc_api::DuplicateDetails(*from.duplicate_details_);
  } else {
    duplicate_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.PushRawMessagesResponse)
}

void PushRawMessagesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  duplicate_details_ = nullptr;
}

PushRawMessagesResponse::~PushRawMessagesResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.PushRawMessagesResponse)
  SharedDtor();
}

void PushRawMessagesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete duplicate_details_;
}

void PushRawMessagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushRawMessagesResponse& PushRawMessagesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void PushRawMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.PushRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && duplicate_details_ != nullptr) {
    delete duplicate_details_;
  }
  duplicate_details_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushRawMessagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.DuplicateDetails duplicate_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_duplicate_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushRawMessagesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.PushRawMessagesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.DuplicateDetails duplicate_details = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duplicate_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.PushRawMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.PushRawMessagesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushRawMessagesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.PushRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::duplicate_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.PushRawMessagesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushRawMessagesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.PushRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::duplicate_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.PushRawMessagesResponse)
  return target;
}

size_t PushRawMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.PushRawMessagesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dlvc_api.DuplicateDetails duplicate_details = 2;
  if (this->has_duplicate_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duplicate_details_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushRawMessagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.PushRawMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushRawMessagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushRawMessagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.PushRawMessagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.PushRawMessagesResponse)
    MergeFrom(*source);
  }
}

void PushRawMessagesResponse::MergeFrom(const PushRawMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.PushRawMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duplicate_details()) {
    mutable_duplicate_details()->::dlvc_api::DuplicateDetails::MergeFrom(from.duplicate_details());
  }
}

void PushRawMessagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.PushRawMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRawMessagesResponse::CopyFrom(const PushRawMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.PushRawMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRawMessagesResponse::IsInitialized() const {
  return true;
}

void PushRawMessagesResponse::Swap(PushRawMessagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushRawMessagesResponse::InternalSwap(PushRawMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duplicate_details_, other->duplicate_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushRawMessagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DuplicateDetails::InitAsDefaultInstance() {
}
class DuplicateDetails::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DuplicateDetails::kDuplicatesFieldNumber;
const int DuplicateDetails::kIdempotencyKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DuplicateDetails::DuplicateDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.DuplicateDetails)
}
DuplicateDetails::DuplicateDetails(const DuplicateDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      idempotency_keys_(from.idempotency_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duplicates_ = from.duplicates_;
  // @@protoc_insertion_point(copy_constructor:dlvc_api.DuplicateDetails)
}

void DuplicateDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto.base);
  duplicates_ = false;
}

DuplicateDetails::~DuplicateDetails() {
  // @@protoc_insertion_point(destructor:dlvc_api.DuplicateDetails)
  SharedDtor();
}

void DuplicateDetails::SharedDtor() {
}

void DuplicateDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DuplicateDetails& DuplicateDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DuplicateDetails_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void DuplicateDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.DuplicateDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idempotency_keys_.Clear();
  duplicates_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DuplicateDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool duplicates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string idempotency_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_idempotency_keys(), ptr, ctx, "dlvc_api.DuplicateDetails.idempotency_keys");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DuplicateDetails::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.DuplicateDetails)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool duplicates = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duplicates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string idempotency_keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_idempotency_keys()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->idempotency_keys(this->idempotency_keys_size() - 1).data(),
            static_cast<int>(this->idempotency_keys(this->idempotency_keys_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.DuplicateDetails.idempotency_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.DuplicateDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.DuplicateDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DuplicateDetails::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.DuplicateDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool duplicates = 2;
  if (this->duplicates() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->duplicates(), output);
  }

  // repeated string idempotency_keys = 3;
  for (int i = 0, n = this->idempotency_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idempotency_keys(i).data(), static_cast<int>(this->idempotency_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.DuplicateDetails.idempotency_keys");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->idempotency_keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.DuplicateDetails)
}

::PROTOBUF_NAMESPACE_ID::uint8* DuplicateDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.DuplicateDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool duplicates = 2;
  if (this->duplicates() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->duplicates(), target);
  }

  // repeated string idempotency_keys = 3;
  for (int i = 0, n = this->idempotency_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idempotency_keys(i).data(), static_cast<int>(this->idempotency_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.DuplicateDetails.idempotency_keys");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->idempotency_keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.DuplicateDetails)
  return target;
}

size_t DuplicateDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.DuplicateDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string idempotency_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->idempotency_keys_size());
  for (int i = 0, n = this->idempotency_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->idempotency_keys(i));
  }

  // bool duplicates = 2;
  if (this->duplicates() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DuplicateDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.DuplicateDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const DuplicateDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DuplicateDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.DuplicateDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.DuplicateDetails)
    MergeFrom(*source);
  }
}

void DuplicateDetails::MergeFrom(const DuplicateDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.DuplicateDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idempotency_keys_.MergeFrom(from.idempotency_keys_);
  if (from.duplicates() != 0) {
    set_duplicates(from.duplicates());
  }
}

void DuplicateDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.DuplicateDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateDetails::CopyFrom(const DuplicateDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.DuplicateDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateDetails::IsInitialized() const {
  return true;
}

void DuplicateDetails::Swap(DuplicateDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DuplicateDetails::InternalSwap(DuplicateDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  idempotency_keys_.InternalSwap(CastToBase(&other->idempotency_keys_));
  swap(duplicates_, other->duplicates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DuplicateDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawMessageRequest::InitAsDefaultInstance() {
  ::dlvc_api::_GetRawMessageRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dlvc_api::Metadata*>(
      ::dlvc_api::Metadata::internal_default_instance());
  ::dlvc_api::_GetRawMessageRequest_default_instance_._instance.get_mutable()->source_type_ = const_cast< ::dlvc_api::SourceType*>(
      ::dlvc_api::SourceType::internal_default_instance());
  ::dlvc_api::_GetRawMessageRequest_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::dlvc_api::PositionBoundingBox*>(
      ::dlvc_api::PositionBoundingBox::internal_default_instance());
  ::dlvc_api::_GetRawMessageRequest_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::dlvc_api::TimeRange*>(
      ::dlvc_api::TimeRange::internal_default_instance());
}
class GetRawMessageRequest::HasBitSetters {
 public:
  static const ::dlvc_api::Metadata& metadata(const GetRawMessageRequest* msg);
  static const ::dlvc_api::SourceType& source_type(const GetRawMessageRequest* msg);
  static const ::dlvc_api::PositionBoundingBox& bounding_box(const GetRawMessageRequest* msg);
  static const ::dlvc_api::TimeRange& time_range(const GetRawMessageRequest* msg);
};

const ::dlvc_api::Metadata&
GetRawMessageRequest::HasBitSetters::metadata(const GetRawMessageRequest* msg) {
  return *msg->metadata_;
}
const ::dlvc_api::SourceType&
GetRawMessageRequest::HasBitSetters::source_type(const GetRawMessageRequest* msg) {
  return *msg->source_type_;
}
const ::dlvc_api::PositionBoundingBox&
GetRawMessageRequest::HasBitSetters::bounding_box(const GetRawMessageRequest* msg) {
  return *msg->bounding_box_;
}
const ::dlvc_api::TimeRange&
GetRawMessageRequest::HasBitSetters::time_range(const GetRawMessageRequest* msg) {
  return *msg->time_range_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRawMessageRequest::kRetrievalTypesFieldNumber;
const int GetRawMessageRequest::kReturnedMetadataTypesFieldNumber;
const int GetRawMessageRequest::kMetadataFieldNumber;
const int GetRawMessageRequest::kUserMetadataFieldNumber;
const int GetRawMessageRequest::kSourceTypeFieldNumber;
const int GetRawMessageRequest::kBoundingBoxFieldNumber;
const int GetRawMessageRequest::kTimeRangeFieldNumber;
const int GetRawMessageRequest::kNextIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRawMessageRequest::GetRawMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.GetRawMessageRequest)
}
GetRawMessageRequest::GetRawMessageRequest(const GetRawMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      retrieval_types_(from.retrieval_types_),
      returned_metadata_types_(from.returned_metadata_types_),
      user_metadata_(from.user_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::dlvc_api::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_source_type()) {
    source_type_ = new ::dlvc_api::SourceType(*from.source_type_);
  } else {
    source_type_ = nullptr;
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::dlvc_api::PositionBoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  if (from.has_time_range()) {
    time_range_ = new ::dlvc_api::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  next_index_ = from.next_index_;
  // @@protoc_insertion_point(copy_constructor:dlvc_api.GetRawMessageRequest)
}

void GetRawMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_index_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(next_index_));
}

GetRawMessageRequest::~GetRawMessageRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.GetRawMessageRequest)
  SharedDtor();
}

void GetRawMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete source_type_;
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete time_range_;
}

void GetRawMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawMessageRequest& GetRawMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawMessageRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void GetRawMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.GetRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retrieval_types_.Clear();
  returned_metadata_types_.Clear();
  user_metadata_.Clear();
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_type_ != nullptr) {
    delete source_type_;
  }
  source_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
  next_index_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRawMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_retrieval_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_retrieval_types(static_cast<::dlvc_api::MessageRetrievalType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_returned_metadata_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_returned_metadata_types(static_cast<::dlvc_api::ReturnedMetadataType>(val));
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.SourceType source_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_source_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.PositionBoundingBox bounding_box = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.TimeRange time_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 next_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRawMessageRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.GetRawMessageRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_retrieval_types(static_cast< ::dlvc_api::MessageRetrievalType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_retrieval_types(static_cast< ::dlvc_api::MessageRetrievalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_returned_metadata_types(static_cast< ::dlvc_api::ReturnedMetadataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_returned_metadata_types(static_cast< ::dlvc_api::ReturnedMetadataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Metadata metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.SourceType source_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.PositionBoundingBox bounding_box = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.TimeRange time_range = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 next_index = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.GetRawMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.GetRawMessageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRawMessageRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.GetRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  if (this->retrieval_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_retrieval_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->retrieval_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->retrieval_types(i), output);
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  if (this->returned_metadata_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_returned_metadata_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->returned_metadata_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->returned_metadata_types(i), output);
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::metadata(this), output);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->user_metadata(static_cast<int>(i)),
      output);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::source_type(this), output);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::bounding_box(this), output);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::time_range(this), output);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->next_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.GetRawMessageRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawMessageRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.GetRawMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  if (this->retrieval_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _retrieval_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->retrieval_types_, target);
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  if (this->returned_metadata_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _returned_metadata_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->returned_metadata_types_, target);
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::metadata(this), target);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->user_metadata(static_cast<int>(i)), target);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::source_type(this), target);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::bounding_box(this), target);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::time_range(this), target);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->next_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.GetRawMessageRequest)
  return target;
}

size_t GetRawMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.GetRawMessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->retrieval_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->retrieval_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retrieval_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->returned_metadata_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->returned_metadata_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _returned_metadata_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->user_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_metadata(static_cast<int>(i)));
    }
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_type_);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.GetRawMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.GetRawMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.GetRawMessageRequest)
    MergeFrom(*source);
  }
}

void GetRawMessageRequest::MergeFrom(const GetRawMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.GetRawMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  retrieval_types_.MergeFrom(from.retrieval_types_);
  returned_metadata_types_.MergeFrom(from.returned_metadata_types_);
  user_metadata_.MergeFrom(from.user_metadata_);
  if (from.has_metadata()) {
    mutable_metadata()->::dlvc_api::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_source_type()) {
    mutable_source_type()->::dlvc_api::SourceType::MergeFrom(from.source_type());
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::dlvc_api::PositionBoundingBox::MergeFrom(from.bounding_box());
  }
  if (from.has_time_range()) {
    mutable_time_range()->::dlvc_api::TimeRange::MergeFrom(from.time_range());
  }
  if (from.next_index() != 0) {
    set_next_index(from.next_index());
  }
}

void GetRawMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.GetRawMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawMessageRequest::CopyFrom(const GetRawMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.GetRawMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawMessageRequest::IsInitialized() const {
  return true;
}

void GetRawMessageRequest::Swap(GetRawMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRawMessageRequest::InternalSwap(GetRawMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  retrieval_types_.InternalSwap(&other->retrieval_types_);
  returned_metadata_types_.InternalSwap(&other->returned_metadata_types_);
  CastToBase(&user_metadata_)->InternalSwap(CastToBase(&other->user_metadata_));
  swap(metadata_, other->metadata_);
  swap(source_type_, other->source_type_);
  swap(bounding_box_, other->bounding_box_);
  swap(time_range_, other->time_range_);
  swap(next_index_, other->next_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawMessageResponse::InitAsDefaultInstance() {
  ::dlvc_api::_GetRawMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::dlvc_api::WrappedMessage*>(
      ::dlvc_api::WrappedMessage::internal_default_instance());
}
class GetRawMessageResponse::HasBitSetters {
 public:
  static const ::dlvc_api::WrappedMessage& message(const GetRawMessageResponse* msg);
};

const ::dlvc_api::WrappedMessage&
GetRawMessageResponse::HasBitSetters::message(const GetRawMessageResponse* msg) {
  return *msg->message_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRawMessageResponse::kMessageFieldNumber;
const int GetRawMessageResponse::kNextIndexFieldNumber;
const int GetRawMessageResponse::kLenBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRawMessageResponse::GetRawMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.GetRawMessageResponse)
}
GetRawMessageResponse::GetRawMessageResponse(const GetRawMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message()) {
    message_ = new ::dlvc_api::WrappedMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&next_index_, &from.next_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_bytes_) -
    reinterpret_cast<char*>(&next_index_)) + sizeof(len_bytes_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.GetRawMessageResponse)
}

void GetRawMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_bytes_) -
      reinterpret_cast<char*>(&message_)) + sizeof(len_bytes_));
}

GetRawMessageResponse::~GetRawMessageResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.GetRawMessageResponse)
  SharedDtor();
}

void GetRawMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void GetRawMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawMessageResponse& GetRawMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawMessageResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void GetRawMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.GetRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  ::memset(&next_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_bytes_) -
      reinterpret_cast<char*>(&next_index_)) + sizeof(len_bytes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRawMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.WrappedMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 next_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 len_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          len_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRawMessageResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.GetRawMessageResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.WrappedMessage message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 next_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 len_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.GetRawMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.GetRawMessageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRawMessageResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.GetRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::message(this), output);
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->next_index(), output);
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->len_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.GetRawMessageResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawMessageResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.GetRawMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::message(this), target);
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->next_index(), target);
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->len_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.GetRawMessageResponse)
  return target;
}

size_t GetRawMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.GetRawMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_index());
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->len_bytes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.GetRawMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.GetRawMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.GetRawMessageResponse)
    MergeFrom(*source);
  }
}

void GetRawMessageResponse::MergeFrom(const GetRawMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.GetRawMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    mutable_message()->::dlvc_api::WrappedMessage::MergeFrom(from.message());
  }
  if (from.next_index() != 0) {
    set_next_index(from.next_index());
  }
  if (from.len_bytes() != 0) {
    set_len_bytes(from.len_bytes());
  }
}

void GetRawMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.GetRawMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawMessageResponse::CopyFrom(const GetRawMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.GetRawMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawMessageResponse::IsInitialized() const {
  return true;
}

void GetRawMessageResponse::Swap(GetRawMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRawMessageResponse::InternalSwap(GetRawMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(next_index_, other->next_index_);
  swap(len_bytes_, other->len_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawMessagesRequest::InitAsDefaultInstance() {
  ::dlvc_api::_GetRawMessagesRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dlvc_api::Metadata*>(
      ::dlvc_api::Metadata::internal_default_instance());
  ::dlvc_api::_GetRawMessagesRequest_default_instance_._instance.get_mutable()->source_type_ = const_cast< ::dlvc_api::SourceType*>(
      ::dlvc_api::SourceType::internal_default_instance());
  ::dlvc_api::_GetRawMessagesRequest_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::dlvc_api::PositionBoundingBox*>(
      ::dlvc_api::PositionBoundingBox::internal_default_instance());
  ::dlvc_api::_GetRawMessagesRequest_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::dlvc_api::TimeRange*>(
      ::dlvc_api::TimeRange::internal_default_instance());
}
class GetRawMessagesRequest::HasBitSetters {
 public:
  static const ::dlvc_api::Metadata& metadata(const GetRawMessagesRequest* msg);
  static const ::dlvc_api::SourceType& source_type(const GetRawMessagesRequest* msg);
  static const ::dlvc_api::PositionBoundingBox& bounding_box(const GetRawMessagesRequest* msg);
  static const ::dlvc_api::TimeRange& time_range(const GetRawMessagesRequest* msg);
};

const ::dlvc_api::Metadata&
GetRawMessagesRequest::HasBitSetters::metadata(const GetRawMessagesRequest* msg) {
  return *msg->metadata_;
}
const ::dlvc_api::SourceType&
GetRawMessagesRequest::HasBitSetters::source_type(const GetRawMessagesRequest* msg) {
  return *msg->source_type_;
}
const ::dlvc_api::PositionBoundingBox&
GetRawMessagesRequest::HasBitSetters::bounding_box(const GetRawMessagesRequest* msg) {
  return *msg->bounding_box_;
}
const ::dlvc_api::TimeRange&
GetRawMessagesRequest::HasBitSetters::time_range(const GetRawMessagesRequest* msg) {
  return *msg->time_range_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRawMessagesRequest::kRetrievalTypesFieldNumber;
const int GetRawMessagesRequest::kReturnedMetadataTypesFieldNumber;
const int GetRawMessagesRequest::kMetadataFieldNumber;
const int GetRawMessagesRequest::kUserMetadataFieldNumber;
const int GetRawMessagesRequest::kSourceTypeFieldNumber;
const int GetRawMessagesRequest::kBoundingBoxFieldNumber;
const int GetRawMessagesRequest::kTimeRangeFieldNumber;
const int GetRawMessagesRequest::kNextIndexFieldNumber;
const int GetRawMessagesRequest::kLimitFieldNumber;
const int GetRawMessagesRequest::kLenBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRawMessagesRequest::GetRawMessagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.GetRawMessagesRequest)
}
GetRawMessagesRequest::GetRawMessagesRequest(const GetRawMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      retrieval_types_(from.retrieval_types_),
      returned_metadata_types_(from.returned_metadata_types_),
      user_metadata_(from.user_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::dlvc_api::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_source_type()) {
    source_type_ = new ::dlvc_api::SourceType(*from.source_type_);
  } else {
    source_type_ = nullptr;
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::dlvc_api::PositionBoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  if (from.has_time_range()) {
    time_range_ = new ::dlvc_api::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  ::memcpy(&next_index_, &from.next_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_bytes_) -
    reinterpret_cast<char*>(&next_index_)) + sizeof(len_bytes_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.GetRawMessagesRequest)
}

void GetRawMessagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_bytes_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(len_bytes_));
}

GetRawMessagesRequest::~GetRawMessagesRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.GetRawMessagesRequest)
  SharedDtor();
}

void GetRawMessagesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete source_type_;
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete time_range_;
}

void GetRawMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawMessagesRequest& GetRawMessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawMessagesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void GetRawMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.GetRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retrieval_types_.Clear();
  returned_metadata_types_.Clear();
  user_metadata_.Clear();
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_type_ != nullptr) {
    delete source_type_;
  }
  source_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
  ::memset(&next_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_bytes_) -
      reinterpret_cast<char*>(&next_index_)) + sizeof(len_bytes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRawMessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_retrieval_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_retrieval_types(static_cast<::dlvc_api::MessageRetrievalType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_returned_metadata_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_returned_metadata_types(static_cast<::dlvc_api::ReturnedMetadataType>(val));
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.SourceType source_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_source_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.PositionBoundingBox bounding_box = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.TimeRange time_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 next_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 len_bytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          len_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRawMessagesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.GetRawMessagesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_retrieval_types(static_cast< ::dlvc_api::MessageRetrievalType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_retrieval_types(static_cast< ::dlvc_api::MessageRetrievalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_returned_metadata_types(static_cast< ::dlvc_api::ReturnedMetadataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_returned_metadata_types(static_cast< ::dlvc_api::ReturnedMetadataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Metadata metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.SourceType source_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.PositionBoundingBox bounding_box = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.TimeRange time_range = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 next_index = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 len_bytes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.GetRawMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.GetRawMessagesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRawMessagesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.GetRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  if (this->retrieval_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_retrieval_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->retrieval_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->retrieval_types(i), output);
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  if (this->returned_metadata_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_returned_metadata_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->returned_metadata_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->returned_metadata_types(i), output);
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::metadata(this), output);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->user_metadata(static_cast<int>(i)),
      output);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::source_type(this), output);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::bounding_box(this), output);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::time_range(this), output);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->next_index(), output);
  }

  // int64 limit = 10;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->limit(), output);
  }

  // int64 len_bytes = 11;
  if (this->len_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->len_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.GetRawMessagesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawMessagesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.GetRawMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  if (this->retrieval_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _retrieval_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->retrieval_types_, target);
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  if (this->returned_metadata_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _returned_metadata_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->returned_metadata_types_, target);
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::metadata(this), target);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->user_metadata(static_cast<int>(i)), target);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::source_type(this), target);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::bounding_box(this), target);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::time_range(this), target);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->next_index(), target);
  }

  // int64 limit = 10;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->limit(), target);
  }

  // int64 len_bytes = 11;
  if (this->len_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->len_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.GetRawMessagesRequest)
  return target;
}

size_t GetRawMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.GetRawMessagesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dlvc_api.MessageRetrievalType retrieval_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->retrieval_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->retrieval_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retrieval_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dlvc_api.ReturnedMetadataType returned_metadata_types = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->returned_metadata_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->returned_metadata_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _returned_metadata_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->user_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_metadata(static_cast<int>(i)));
    }
  }

  // .dlvc_api.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .dlvc_api.SourceType source_type = 6;
  if (this->has_source_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_type_);
  }

  // .dlvc_api.PositionBoundingBox bounding_box = 7;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  // .dlvc_api.TimeRange time_range = 8;
  if (this->has_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_);
  }

  // int64 next_index = 9;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_index());
  }

  // int64 limit = 10;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // int64 len_bytes = 11;
  if (this->len_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->len_bytes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawMessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.GetRawMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawMessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.GetRawMessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.GetRawMessagesRequest)
    MergeFrom(*source);
  }
}

void GetRawMessagesRequest::MergeFrom(const GetRawMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.GetRawMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  retrieval_types_.MergeFrom(from.retrieval_types_);
  returned_metadata_types_.MergeFrom(from.returned_metadata_types_);
  user_metadata_.MergeFrom(from.user_metadata_);
  if (from.has_metadata()) {
    mutable_metadata()->::dlvc_api::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_source_type()) {
    mutable_source_type()->::dlvc_api::SourceType::MergeFrom(from.source_type());
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::dlvc_api::PositionBoundingBox::MergeFrom(from.bounding_box());
  }
  if (from.has_time_range()) {
    mutable_time_range()->::dlvc_api::TimeRange::MergeFrom(from.time_range());
  }
  if (from.next_index() != 0) {
    set_next_index(from.next_index());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.len_bytes() != 0) {
    set_len_bytes(from.len_bytes());
  }
}

void GetRawMessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.GetRawMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawMessagesRequest::CopyFrom(const GetRawMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.GetRawMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawMessagesRequest::IsInitialized() const {
  return true;
}

void GetRawMessagesRequest::Swap(GetRawMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRawMessagesRequest::InternalSwap(GetRawMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  retrieval_types_.InternalSwap(&other->retrieval_types_);
  returned_metadata_types_.InternalSwap(&other->returned_metadata_types_);
  CastToBase(&user_metadata_)->InternalSwap(CastToBase(&other->user_metadata_));
  swap(metadata_, other->metadata_);
  swap(source_type_, other->source_type_);
  swap(bounding_box_, other->bounding_box_);
  swap(time_range_, other->time_range_);
  swap(next_index_, other->next_index_);
  swap(limit_, other->limit_);
  swap(len_bytes_, other->len_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawMessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawMessagesResponse::InitAsDefaultInstance() {
}
class GetRawMessagesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRawMessagesResponse::kMessagesFieldNumber;
const int GetRawMessagesResponse::kNextIndexFieldNumber;
const int GetRawMessagesResponse::kLenBytesFieldNumber;
const int GetRawMessagesResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRawMessagesResponse::GetRawMessagesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.GetRawMessagesResponse)
}
GetRawMessagesResponse::GetRawMessagesResponse(const GetRawMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&next_index_, &from.next_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&next_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.GetRawMessagesResponse)
}

void GetRawMessagesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&next_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&next_index_)) + sizeof(count_));
}

GetRawMessagesResponse::~GetRawMessagesResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.GetRawMessagesResponse)
  SharedDtor();
}

void GetRawMessagesResponse::SharedDtor() {
}

void GetRawMessagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawMessagesResponse& GetRawMessagesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawMessagesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void GetRawMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.GetRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  ::memset(&next_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&next_index_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRawMessagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dlvc_api.WrappedMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // int64 next_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 len_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          len_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRawMessagesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.GetRawMessagesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dlvc_api.WrappedMessage messages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 next_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 len_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.GetRawMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.GetRawMessagesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRawMessagesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.GetRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.WrappedMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->messages(static_cast<int>(i)),
      output);
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->next_index(), output);
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->len_bytes(), output);
  }

  // int64 count = 5;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.GetRawMessagesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawMessagesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.GetRawMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dlvc_api.WrappedMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->messages(static_cast<int>(i)), target);
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->next_index(), target);
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->len_bytes(), target);
  }

  // int64 count = 5;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.GetRawMessagesResponse)
  return target;
}

size_t GetRawMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.GetRawMessagesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dlvc_api.WrappedMessage messages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // int64 next_index = 3;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_index());
  }

  // int64 len_bytes = 4;
  if (this->len_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->len_bytes());
  }

  // int64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawMessagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.GetRawMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawMessagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawMessagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.GetRawMessagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.GetRawMessagesResponse)
    MergeFrom(*source);
  }
}

void GetRawMessagesResponse::MergeFrom(const GetRawMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.GetRawMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.next_index() != 0) {
    set_next_index(from.next_index());
  }
  if (from.len_bytes() != 0) {
    set_len_bytes(from.len_bytes());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void GetRawMessagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.GetRawMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawMessagesResponse::CopyFrom(const GetRawMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.GetRawMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawMessagesResponse::IsInitialized() const {
  return true;
}

void GetRawMessagesResponse::Swap(GetRawMessagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRawMessagesResponse::InternalSwap(GetRawMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(next_index_, other->next_index_);
  swap(len_bytes_, other->len_bytes_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawMessagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceType::InitAsDefaultInstance() {
}
class SourceType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceType::kMessageTypeFieldNumber;
const int SourceType::kEncodingTypeFieldNumber;
const int SourceType::kCustomEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceType::SourceType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.SourceType)
}
SourceType::SourceType(const SourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_encoding_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.custom_encoding_type().size() > 0) {
    custom_encoding_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_encoding_type_);
  }
  ::memcpy(&message_type_, &from.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(encoding_type_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.SourceType)
}

void SourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto.base);
  custom_encoding_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_type_) -
      reinterpret_cast<char*>(&message_type_)) + sizeof(encoding_type_));
}

SourceType::~SourceType() {
  // @@protoc_insertion_point(destructor:dlvc_api.SourceType)
  SharedDtor();
}

void SourceType::SharedDtor() {
  custom_encoding_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceType& SourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceType_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void SourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.SourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_encoding_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_type_) -
      reinterpret_cast<char*>(&message_type_)) + sizeof(encoding_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.WrappedMessage.MessageType message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_message_type(static_cast<::dlvc_api::WrappedMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_encoding_type(static_cast<::dlvc_api::MessageEncoding_EncodingType>(val));
        } else goto handle_unusual;
        continue;
      // string custom_encoding_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_custom_encoding_type(), ptr, ctx, "dlvc_api.SourceType.custom_encoding_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SourceType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.SourceType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.WrappedMessage.MessageType message_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::dlvc_api::WrappedMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::dlvc_api::MessageEncoding_EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_encoding_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_encoding_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.SourceType.custom_encoding_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.SourceType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.SourceType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SourceType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.SourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->message_type(), output);
  }

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->encoding_type(), output);
  }

  // string custom_encoding_type = 4;
  if (this->custom_encoding_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SourceType.custom_encoding_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->custom_encoding_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.SourceType)
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.SourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.WrappedMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->message_type(), target);
  }

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->encoding_type(), target);
  }

  // string custom_encoding_type = 4;
  if (this->custom_encoding_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SourceType.custom_encoding_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->custom_encoding_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.SourceType)
  return target;
}

size_t SourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.SourceType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string custom_encoding_type = 4;
  if (this->custom_encoding_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->custom_encoding_type());
  }

  // .dlvc_api.WrappedMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_type());
  }

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.SourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.SourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.SourceType)
    MergeFrom(*source);
  }
}

void SourceType::MergeFrom(const SourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.SourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.custom_encoding_type().size() > 0) {

    custom_encoding_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_encoding_type_);
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void SourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.SourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceType::CopyFrom(const SourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.SourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceType::IsInitialized() const {
  return true;
}

void SourceType::Swap(SourceType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceType::InternalSwap(SourceType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_encoding_type_.Swap(&other->custom_encoding_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_type_, other->message_type_);
  swap(encoding_type_, other->encoding_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeRange::InitAsDefaultInstance() {
  ::dlvc_api::_TimeRange_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::dlvc_api::_TimeRange_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimeRange::HasBitSetters {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeRange* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TimeRange* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::HasBitSetters::start_time(const TimeRange* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::HasBitSetters::end_time(const TimeRange* msg) {
  return *msg->end_time_;
}
void TimeRange::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void TimeRange::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kStartTimeFieldNumber;
const int TimeRange::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from.has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.TimeRange)
}

void TimeRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:dlvc_api.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRange_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.TimeRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.TimeRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::start_time(this), output);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::end_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.TimeRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::start_time(this), target);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::end_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.TimeRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.TimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.end_time());
  }
}

void TimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummarizeRequest::InitAsDefaultInstance() {
}
class SummarizeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummarizeRequest::SummarizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.SummarizeRequest)
}
SummarizeRequest::SummarizeRequest(const SummarizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dlvc_api.SummarizeRequest)
}

void SummarizeRequest::SharedCtor() {
}

SummarizeRequest::~SummarizeRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.SummarizeRequest)
  SharedDtor();
}

void SummarizeRequest::SharedDtor() {
}

void SummarizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummarizeRequest& SummarizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummarizeRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void SummarizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.SummarizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SummarizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SummarizeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.SummarizeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.SummarizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.SummarizeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SummarizeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.SummarizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.SummarizeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SummarizeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.SummarizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.SummarizeRequest)
  return target;
}

size_t SummarizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.SummarizeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummarizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.SummarizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SummarizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummarizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.SummarizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.SummarizeRequest)
    MergeFrom(*source);
  }
}

void SummarizeRequest::MergeFrom(const SummarizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.SummarizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SummarizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.SummarizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummarizeRequest::CopyFrom(const SummarizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.SummarizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummarizeRequest::IsInitialized() const {
  return true;
}

void SummarizeRequest::Swap(SummarizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummarizeRequest::InternalSwap(SummarizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummarizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummarizeResponse::InitAsDefaultInstance() {
}
class SummarizeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummarizeResponse::kMetadataKeysFieldNumber;
const int SummarizeResponse::kUserMetadataKeysFieldNumber;
const int SummarizeResponse::kMessageTypesFieldNumber;
const int SummarizeResponse::kEncodingTypesFieldNumber;
const int SummarizeResponse::kLenBytesFieldNumber;
const int SummarizeResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummarizeResponse::SummarizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.SummarizeResponse)
}
SummarizeResponse::SummarizeResponse(const SummarizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metadata_keys_(from.metadata_keys_),
      user_metadata_keys_(from.user_metadata_keys_),
      message_types_(from.message_types_),
      encoding_types_(from.encoding_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&len_bytes_, &from.len_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&len_bytes_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.SummarizeResponse)
}

void SummarizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  ::memset(&len_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&len_bytes_)) + sizeof(count_));
}

SummarizeResponse::~SummarizeResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.SummarizeResponse)
  SharedDtor();
}

void SummarizeResponse::SharedDtor() {
}

void SummarizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummarizeResponse& SummarizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummarizeResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void SummarizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.SummarizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_keys_.Clear();
  user_metadata_keys_.Clear();
  message_types_.Clear();
  encoding_types_.Clear();
  ::memset(&len_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&len_bytes_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SummarizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_metadata_keys(), ptr, ctx, "dlvc_api.SummarizeResponse.metadata_keys");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string user_metadata_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_user_metadata_keys(), ptr, ctx, "dlvc_api.SummarizeResponse.user_metadata_keys");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_message_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_message_types(static_cast<::dlvc_api::WrappedMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_encoding_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_encoding_types(static_cast<::dlvc_api::MessageEncoding_EncodingType>(val));
        } else goto handle_unusual;
        continue;
      // int64 len_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          len_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SummarizeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.SummarizeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string metadata_keys = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_metadata_keys()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->metadata_keys(this->metadata_keys_size() - 1).data(),
            static_cast<int>(this->metadata_keys(this->metadata_keys_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.SummarizeResponse.metadata_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_metadata_keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_user_metadata_keys()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user_metadata_keys(this->user_metadata_keys_size() - 1).data(),
            static_cast<int>(this->user_metadata_keys(this->user_metadata_keys_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.SummarizeResponse.user_metadata_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_message_types(static_cast< ::dlvc_api::WrappedMessage_MessageType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_message_types(static_cast< ::dlvc_api::WrappedMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_encoding_types(static_cast< ::dlvc_api::MessageEncoding_EncodingType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_encoding_types(static_cast< ::dlvc_api::MessageEncoding_EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 len_bytes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.SummarizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.SummarizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SummarizeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.SummarizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_keys = 2;
  for (int i = 0, n = this->metadata_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_keys(i).data(), static_cast<int>(this->metadata_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SummarizeResponse.metadata_keys");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->metadata_keys(i), output);
  }

  // repeated string user_metadata_keys = 3;
  for (int i = 0, n = this->user_metadata_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_metadata_keys(i).data(), static_cast<int>(this->user_metadata_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SummarizeResponse.user_metadata_keys");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->user_metadata_keys(i), output);
  }

  // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
  if (this->message_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_message_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->message_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->message_types(i), output);
  }

  // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
  if (this->encoding_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_encoding_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->encoding_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->encoding_types(i), output);
  }

  // int64 len_bytes = 6;
  if (this->len_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->len_bytes(), output);
  }

  // int64 count = 7;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.SummarizeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SummarizeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.SummarizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_keys = 2;
  for (int i = 0, n = this->metadata_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_keys(i).data(), static_cast<int>(this->metadata_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SummarizeResponse.metadata_keys");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->metadata_keys(i), target);
  }

  // repeated string user_metadata_keys = 3;
  for (int i = 0, n = this->user_metadata_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_metadata_keys(i).data(), static_cast<int>(this->user_metadata_keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.SummarizeResponse.user_metadata_keys");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->user_metadata_keys(i), target);
  }

  // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
  if (this->message_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _message_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->message_types_, target);
  }

  // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
  if (this->encoding_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _encoding_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->encoding_types_, target);
  }

  // int64 len_bytes = 6;
  if (this->len_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->len_bytes(), target);
  }

  // int64 count = 7;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.SummarizeResponse)
  return target;
}

size_t SummarizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.SummarizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->metadata_keys_size());
  for (int i = 0, n = this->metadata_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->metadata_keys(i));
  }

  // repeated string user_metadata_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->user_metadata_keys_size());
  for (int i = 0, n = this->user_metadata_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->user_metadata_keys(i));
  }

  // repeated .dlvc_api.WrappedMessage.MessageType message_types = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->message_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->message_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _message_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dlvc_api.MessageEncoding.EncodingType encoding_types = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->encoding_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->encoding_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _encoding_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 len_bytes = 6;
  if (this->len_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->len_bytes());
  }

  // int64 count = 7;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummarizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.SummarizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SummarizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummarizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.SummarizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.SummarizeResponse)
    MergeFrom(*source);
  }
}

void SummarizeResponse::MergeFrom(const SummarizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.SummarizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_keys_.MergeFrom(from.metadata_keys_);
  user_metadata_keys_.MergeFrom(from.user_metadata_keys_);
  message_types_.MergeFrom(from.message_types_);
  encoding_types_.MergeFrom(from.encoding_types_);
  if (from.len_bytes() != 0) {
    set_len_bytes(from.len_bytes());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void SummarizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.SummarizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummarizeResponse::CopyFrom(const SummarizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.SummarizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummarizeResponse::IsInitialized() const {
  return true;
}

void SummarizeResponse::Swap(SummarizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummarizeResponse::InternalSwap(SummarizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_keys_.InternalSwap(CastToBase(&other->metadata_keys_));
  user_metadata_keys_.InternalSwap(CastToBase(&other->user_metadata_keys_));
  message_types_.InternalSwap(&other->message_types_);
  encoding_types_.InternalSwap(&other->encoding_types_);
  swap(len_bytes_, other->len_bytes_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummarizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMetadataValuesRequest::InitAsDefaultInstance() {
}
class ListMetadataValuesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListMetadataValuesRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListMetadataValuesRequest::ListMetadataValuesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.ListMetadataValuesRequest)
}
ListMetadataValuesRequest::ListMetadataValuesRequest(const ListMetadataValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.ListMetadataValuesRequest)
}

void ListMetadataValuesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListMetadataValuesRequest::~ListMetadataValuesRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.ListMetadataValuesRequest)
  SharedDtor();
}

void ListMetadataValuesRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListMetadataValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMetadataValuesRequest& ListMetadataValuesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMetadataValuesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void ListMetadataValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.ListMetadataValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListMetadataValuesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "dlvc_api.ListMetadataValuesRequest.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListMetadataValuesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.ListMetadataValuesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.ListMetadataValuesRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.ListMetadataValuesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.ListMetadataValuesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListMetadataValuesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.ListMetadataValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesRequest.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.ListMetadataValuesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMetadataValuesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.ListMetadataValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesRequest.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.ListMetadataValuesRequest)
  return target;
}

size_t ListMetadataValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.ListMetadataValuesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMetadataValuesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.ListMetadataValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMetadataValuesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMetadataValuesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.ListMetadataValuesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.ListMetadataValuesRequest)
    MergeFrom(*source);
  }
}

void ListMetadataValuesRequest::MergeFrom(const ListMetadataValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.ListMetadataValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void ListMetadataValuesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.ListMetadataValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMetadataValuesRequest::CopyFrom(const ListMetadataValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.ListMetadataValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMetadataValuesRequest::IsInitialized() const {
  return true;
}

void ListMetadataValuesRequest::Swap(ListMetadataValuesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListMetadataValuesRequest::InternalSwap(ListMetadataValuesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMetadataValuesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMetadataValuesResponse::InitAsDefaultInstance() {
}
class ListMetadataValuesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListMetadataValuesResponse::kKeyFieldNumber;
const int ListMetadataValuesResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListMetadataValuesResponse::ListMetadataValuesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.ListMetadataValuesResponse)
}
ListMetadataValuesResponse::ListMetadataValuesResponse(const ListMetadataValuesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.ListMetadataValuesResponse)
}

void ListMetadataValuesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListMetadataValuesResponse::~ListMetadataValuesResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.ListMetadataValuesResponse)
  SharedDtor();
}

void ListMetadataValuesResponse::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListMetadataValuesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMetadataValuesResponse& ListMetadataValuesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMetadataValuesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void ListMetadataValuesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.ListMetadataValuesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListMetadataValuesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "dlvc_api.ListMetadataValuesResponse.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_values(), ptr, ctx, "dlvc_api.ListMetadataValuesResponse.values");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListMetadataValuesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.ListMetadataValuesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.ListMetadataValuesResponse.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string values = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.ListMetadataValuesResponse.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.ListMetadataValuesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.ListMetadataValuesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListMetadataValuesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.ListMetadataValuesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesResponse.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesResponse.values");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.ListMetadataValuesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMetadataValuesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.ListMetadataValuesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesResponse.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListMetadataValuesResponse.values");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.ListMetadataValuesResponse)
  return target;
}

size_t ListMetadataValuesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.ListMetadataValuesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMetadataValuesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.ListMetadataValuesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMetadataValuesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMetadataValuesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.ListMetadataValuesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.ListMetadataValuesResponse)
    MergeFrom(*source);
  }
}

void ListMetadataValuesResponse::MergeFrom(const ListMetadataValuesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.ListMetadataValuesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void ListMetadataValuesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.ListMetadataValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMetadataValuesResponse::CopyFrom(const ListMetadataValuesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.ListMetadataValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMetadataValuesResponse::IsInitialized() const {
  return true;
}

void ListMetadataValuesResponse::Swap(ListMetadataValuesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListMetadataValuesResponse::InternalSwap(ListMetadataValuesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(CastToBase(&other->values_));
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMetadataValuesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListExercisesRequest::InitAsDefaultInstance() {
}
class ListExercisesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListExercisesRequest::ListExercisesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.ListExercisesRequest)
}
ListExercisesRequest::ListExercisesRequest(const ListExercisesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dlvc_api.ListExercisesRequest)
}

void ListExercisesRequest::SharedCtor() {
}

ListExercisesRequest::~ListExercisesRequest() {
  // @@protoc_insertion_point(destructor:dlvc_api.ListExercisesRequest)
  SharedDtor();
}

void ListExercisesRequest::SharedDtor() {
}

void ListExercisesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListExercisesRequest& ListExercisesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListExercisesRequest_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void ListExercisesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.ListExercisesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListExercisesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListExercisesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.ListExercisesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.ListExercisesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.ListExercisesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListExercisesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.ListExercisesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.ListExercisesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListExercisesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.ListExercisesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.ListExercisesRequest)
  return target;
}

size_t ListExercisesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.ListExercisesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListExercisesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.ListExercisesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListExercisesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListExercisesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.ListExercisesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.ListExercisesRequest)
    MergeFrom(*source);
  }
}

void ListExercisesRequest::MergeFrom(const ListExercisesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.ListExercisesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListExercisesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.ListExercisesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListExercisesRequest::CopyFrom(const ListExercisesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.ListExercisesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExercisesRequest::IsInitialized() const {
  return true;
}

void ListExercisesRequest::Swap(ListExercisesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListExercisesRequest::InternalSwap(ListExercisesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExercisesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListExercisesResponse::InitAsDefaultInstance() {
}
class ListExercisesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListExercisesResponse::kExerciseIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListExercisesResponse::ListExercisesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.ListExercisesResponse)
}
ListExercisesResponse::ListExercisesResponse(const ListExercisesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      exercise_ids_(from.exercise_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dlvc_api.ListExercisesResponse)
}

void ListExercisesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
}

ListExercisesResponse::~ListExercisesResponse() {
  // @@protoc_insertion_point(destructor:dlvc_api.ListExercisesResponse)
  SharedDtor();
}

void ListExercisesResponse::SharedDtor() {
}

void ListExercisesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListExercisesResponse& ListExercisesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListExercisesResponse_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void ListExercisesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.ListExercisesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exercise_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListExercisesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string exercise_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_exercise_ids(), ptr, ctx, "dlvc_api.ListExercisesResponse.exercise_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListExercisesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.ListExercisesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string exercise_ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exercise_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_ids(this->exercise_ids_size() - 1).data(),
            static_cast<int>(this->exercise_ids(this->exercise_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.ListExercisesResponse.exercise_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.ListExercisesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.ListExercisesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListExercisesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.ListExercisesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string exercise_ids = 3;
  for (int i = 0, n = this->exercise_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_ids(i).data(), static_cast<int>(this->exercise_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListExercisesResponse.exercise_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->exercise_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.ListExercisesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListExercisesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.ListExercisesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string exercise_ids = 3;
  for (int i = 0, n = this->exercise_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_ids(i).data(), static_cast<int>(this->exercise_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.ListExercisesResponse.exercise_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->exercise_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.ListExercisesResponse)
  return target;
}

size_t ListExercisesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.ListExercisesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exercise_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exercise_ids_size());
  for (int i = 0, n = this->exercise_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exercise_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListExercisesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.ListExercisesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListExercisesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListExercisesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.ListExercisesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.ListExercisesResponse)
    MergeFrom(*source);
  }
}

void ListExercisesResponse::MergeFrom(const ListExercisesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.ListExercisesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exercise_ids_.MergeFrom(from.exercise_ids_);
}

void ListExercisesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.ListExercisesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListExercisesResponse::CopyFrom(const ListExercisesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.ListExercisesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExercisesResponse::IsInitialized() const {
  return true;
}

void ListExercisesResponse::Swap(ListExercisesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListExercisesResponse::InternalSwap(ListExercisesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exercise_ids_.InternalSwap(CastToBase(&other->exercise_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExercisesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrappedMessage::InitAsDefaultInstance() {
  ::dlvc_api::_WrappedMessage_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dlvc_api::Metadata*>(
      ::dlvc_api::Metadata::internal_default_instance());
  ::dlvc_api::_WrappedMessage_default_instance_._instance.get_mutable()->message_encoding_ = const_cast< ::dlvc_api::MessageEncoding*>(
      ::dlvc_api::MessageEncoding::internal_default_instance());
  ::dlvc_api::_WrappedMessage_default_instance_._instance.get_mutable()->position_ = const_cast< ::dlvc_api::Position*>(
      ::dlvc_api::Position::internal_default_instance());
  ::dlvc_api::_WrappedMessage_default_instance_._instance.get_mutable()->created_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class WrappedMessage::HasBitSetters {
 public:
  static const ::dlvc_api::Metadata& metadata(const WrappedMessage* msg);
  static const ::dlvc_api::MessageEncoding& message_encoding(const WrappedMessage* msg);
  static const ::dlvc_api::Position& position(const WrappedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_time(const WrappedMessage* msg);
};

const ::dlvc_api::Metadata&
WrappedMessage::HasBitSetters::metadata(const WrappedMessage* msg) {
  return *msg->metadata_;
}
const ::dlvc_api::MessageEncoding&
WrappedMessage::HasBitSetters::message_encoding(const WrappedMessage* msg) {
  return *msg->message_encoding_;
}
const ::dlvc_api::Position&
WrappedMessage::HasBitSetters::position(const WrappedMessage* msg) {
  return *msg->position_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
WrappedMessage::HasBitSetters::created_time(const WrappedMessage* msg) {
  return *msg->created_time_;
}
void WrappedMessage::clear_created_time() {
  if (GetArenaNoVirtual() == nullptr && created_time_ != nullptr) {
    delete created_time_;
  }
  created_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrappedMessage::kIdempotencyKeyFieldNumber;
const int WrappedMessage::kMetadataFieldNumber;
const int WrappedMessage::kUserMetadataFieldNumber;
const int WrappedMessage::kMessageTypeFieldNumber;
const int WrappedMessage::kMessageEncodingFieldNumber;
const int WrappedMessage::kPositionFieldNumber;
const int WrappedMessage::kCreatedTimeFieldNumber;
const int WrappedMessage::kRawMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrappedMessage::WrappedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.WrappedMessage)
}
WrappedMessage::WrappedMessage(const WrappedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_metadata_(from.user_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idempotency_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.idempotency_key().size() > 0) {
    idempotency_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idempotency_key_);
  }
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.raw_message().size() > 0) {
    raw_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::dlvc_api::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_message_encoding()) {
    message_encoding_ = new ::dlvc_api::MessageEncoding(*from.message_encoding_);
  } else {
    message_encoding_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::dlvc_api::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_created_time()) {
    created_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_time_);
  } else {
    created_time_ = nullptr;
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:dlvc_api.WrappedMessage)
}

void WrappedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base);
  idempotency_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(message_type_));
}

WrappedMessage::~WrappedMessage() {
  // @@protoc_insertion_point(destructor:dlvc_api.WrappedMessage)
  SharedDtor();
}

void WrappedMessage::SharedDtor() {
  idempotency_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete message_encoding_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete created_time_;
}

void WrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrappedMessage& WrappedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrappedMessage_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void WrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.WrappedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_metadata_.Clear();
  idempotency_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_encoding_ != nullptr) {
    delete message_encoding_;
  }
  message_encoding_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_time_ != nullptr) {
    delete created_time_;
  }
  created_time_ = nullptr;
  message_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WrappedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string idempotency_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_idempotency_key(), ptr, ctx, "dlvc_api.WrappedMessage.idempotency_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Metadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.WrappedMessage.MessageType message_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_message_type(static_cast<::dlvc_api::WrappedMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .dlvc_api.MessageEncoding message_encoding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_message_encoding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Position position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_created_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WrappedMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.WrappedMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string idempotency_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_idempotency_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->idempotency_key().data(), static_cast<int>(this->idempotency_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.WrappedMessage.idempotency_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Metadata metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.WrappedMessage.MessageType message_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::dlvc_api::WrappedMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.MessageEncoding message_encoding = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_encoding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Position position = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_created_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_message = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.WrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.WrappedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WrappedMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.WrappedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string idempotency_key = 2;
  if (this->idempotency_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idempotency_key().data(), static_cast<int>(this->idempotency_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.WrappedMessage.idempotency_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->idempotency_key(), output);
  }

  // .dlvc_api.Metadata metadata = 3;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->user_metadata(static_cast<int>(i)),
      output);
  }

  // .dlvc_api.WrappedMessage.MessageType message_type = 5;
  if (this->message_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->message_type(), output);
  }

  // .dlvc_api.MessageEncoding message_encoding = 6;
  if (this->has_message_encoding()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::message_encoding(this), output);
  }

  // .dlvc_api.Position position = 7;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::position(this), output);
  }

  // .google.protobuf.Timestamp created_time = 8;
  if (this->has_created_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::created_time(this), output);
  }

  // bytes raw_message = 9;
  if (this->raw_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->raw_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.WrappedMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* WrappedMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.WrappedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string idempotency_key = 2;
  if (this->idempotency_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idempotency_key().data(), static_cast<int>(this->idempotency_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.WrappedMessage.idempotency_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->idempotency_key(), target);
  }

  // .dlvc_api.Metadata metadata = 3;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->user_metadata(static_cast<int>(i)), target);
  }

  // .dlvc_api.WrappedMessage.MessageType message_type = 5;
  if (this->message_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->message_type(), target);
  }

  // .dlvc_api.MessageEncoding message_encoding = 6;
  if (this->has_message_encoding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::message_encoding(this), target);
  }

  // .dlvc_api.Position position = 7;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::position(this), target);
  }

  // .google.protobuf.Timestamp created_time = 8;
  if (this->has_created_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::created_time(this), target);
  }

  // bytes raw_message = 9;
  if (this->raw_message().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->raw_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.WrappedMessage)
  return target;
}

size_t WrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.WrappedMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dlvc_api.UserDefinedMetadata user_metadata = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->user_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_metadata(static_cast<int>(i)));
    }
  }

  // string idempotency_key = 2;
  if (this->idempotency_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->idempotency_key());
  }

  // bytes raw_message = 9;
  if (this->raw_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->raw_message());
  }

  // .dlvc_api.Metadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .dlvc_api.MessageEncoding message_encoding = 6;
  if (this->has_message_encoding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_encoding_);
  }

  // .dlvc_api.Position position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .google.protobuf.Timestamp created_time = 8;
  if (this->has_created_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_time_);
  }

  // .dlvc_api.WrappedMessage.MessageType message_type = 5;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrappedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.WrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WrappedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrappedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.WrappedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.WrappedMessage)
    MergeFrom(*source);
  }
}

void WrappedMessage::MergeFrom(const WrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.WrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_metadata_.MergeFrom(from.user_metadata_);
  if (from.idempotency_key().size() > 0) {

    idempotency_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idempotency_key_);
  }
  if (from.raw_message().size() > 0) {

    raw_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::dlvc_api::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_message_encoding()) {
    mutable_message_encoding()->::dlvc_api::MessageEncoding::MergeFrom(from.message_encoding());
  }
  if (from.has_position()) {
    mutable_position()->::dlvc_api::Position::MergeFrom(from.position());
  }
  if (from.has_created_time()) {
    mutable_created_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.created_time());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void WrappedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.WrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrappedMessage::CopyFrom(const WrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.WrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrappedMessage::IsInitialized() const {
  return true;
}

void WrappedMessage::Swap(WrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrappedMessage::InternalSwap(WrappedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&user_metadata_)->InternalSwap(CastToBase(&other->user_metadata_));
  idempotency_key_.Swap(&other->idempotency_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_message_.Swap(&other->raw_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(message_encoding_, other->message_encoding_);
  swap(position_, other->position_);
  swap(created_time_, other->created_time_);
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WrappedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
}
class Metadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kPartnerIdFieldNumber;
const int Metadata::kPartnerCertIdFieldNumber;
const int Metadata::kSourceIdFieldNumber;
const int Metadata::kExerciseIdFieldNumber;
const int Metadata::kExerciseNameFieldNumber;
const int Metadata::kEntityStatePduFieldNumber;
const int Metadata::kForceColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.partner_id().size() > 0) {
    partner_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partner_id_);
  }
  partner_cert_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.partner_cert_id().size() > 0) {
    partner_cert_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partner_cert_id_);
  }
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source_id().size() > 0) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  exercise_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exercise_id().size() > 0) {
    exercise_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_id_);
  }
  exercise_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exercise_name().size() > 0) {
    exercise_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_name_);
  }
  entity_state_pdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.entity_state_pdu().size() > 0) {
    entity_state_pdu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_state_pdu_);
  }
  force_color_ = from.force_color_;
  // @@protoc_insertion_point(copy_constructor:dlvc_api.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base);
  partner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partner_cert_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_state_pdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  force_color_ = 0;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:dlvc_api.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  partner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partner_cert_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_state_pdu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partner_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partner_cert_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_state_pdu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  force_color_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partner_id(), ptr, ctx, "dlvc_api.Metadata.partner_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partner_cert_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partner_cert_id(), ptr, ctx, "dlvc_api.Metadata.partner_cert_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_id(), ptr, ctx, "dlvc_api.Metadata.source_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exercise_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exercise_id(), ptr, ctx, "dlvc_api.Metadata.exercise_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exercise_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exercise_name(), ptr, ctx, "dlvc_api.Metadata.exercise_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entity_state_pdu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_state_pdu(), ptr, ctx, "dlvc_api.Metadata.entity_state_pdu");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Metadata.ForceColor force_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_force_color(static_cast<::dlvc_api::Metadata_ForceColor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.Metadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partner_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partner_id().data(), static_cast<int>(this->partner_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.partner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partner_cert_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_cert_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partner_cert_id().data(), static_cast<int>(this->partner_cert_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.partner_cert_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_id().data(), static_cast<int>(this->source_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.source_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exercise_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exercise_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_id().data(), static_cast<int>(this->exercise_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.exercise_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exercise_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exercise_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_name().data(), static_cast<int>(this->exercise_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.exercise_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entity_state_pdu = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_state_pdu()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_state_pdu().data(), static_cast<int>(this->entity_state_pdu().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.Metadata.entity_state_pdu"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Metadata.ForceColor force_color = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_force_color(static_cast< ::dlvc_api::Metadata_ForceColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Metadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partner_id = 2;
  if (this->partner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partner_id().data(), static_cast<int>(this->partner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.partner_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partner_id(), output);
  }

  // string partner_cert_id = 3;
  if (this->partner_cert_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partner_cert_id().data(), static_cast<int>(this->partner_cert_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.partner_cert_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partner_cert_id(), output);
  }

  // string source_id = 4;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), static_cast<int>(this->source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.source_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source_id(), output);
  }

  // string exercise_id = 5;
  if (this->exercise_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_id().data(), static_cast<int>(this->exercise_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.exercise_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exercise_id(), output);
  }

  // string exercise_name = 6;
  if (this->exercise_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_name().data(), static_cast<int>(this->exercise_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.exercise_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->exercise_name(), output);
  }

  // string entity_state_pdu = 7;
  if (this->entity_state_pdu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_state_pdu().data(), static_cast<int>(this->entity_state_pdu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.entity_state_pdu");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->entity_state_pdu(), output);
  }

  // .dlvc_api.Metadata.ForceColor force_color = 8;
  if (this->force_color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->force_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.Metadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partner_id = 2;
  if (this->partner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partner_id().data(), static_cast<int>(this->partner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.partner_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->partner_id(), target);
  }

  // string partner_cert_id = 3;
  if (this->partner_cert_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partner_cert_id().data(), static_cast<int>(this->partner_cert_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.partner_cert_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->partner_cert_id(), target);
  }

  // string source_id = 4;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), static_cast<int>(this->source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.source_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->source_id(), target);
  }

  // string exercise_id = 5;
  if (this->exercise_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_id().data(), static_cast<int>(this->exercise_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.exercise_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->exercise_id(), target);
  }

  // string exercise_name = 6;
  if (this->exercise_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_name().data(), static_cast<int>(this->exercise_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.exercise_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->exercise_name(), target);
  }

  // string entity_state_pdu = 7;
  if (this->entity_state_pdu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_state_pdu().data(), static_cast<int>(this->entity_state_pdu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.Metadata.entity_state_pdu");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->entity_state_pdu(), target);
  }

  // .dlvc_api.Metadata.ForceColor force_color = 8;
  if (this->force_color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->force_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partner_id = 2;
  if (this->partner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partner_id());
  }

  // string partner_cert_id = 3;
  if (this->partner_cert_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partner_cert_id());
  }

  // string source_id = 4;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  // string exercise_id = 5;
  if (this->exercise_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exercise_id());
  }

  // string exercise_name = 6;
  if (this->exercise_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exercise_name());
  }

  // string entity_state_pdu = 7;
  if (this->entity_state_pdu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_state_pdu());
  }

  // .dlvc_api.Metadata.ForceColor force_color = 8;
  if (this->force_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->force_color());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partner_id().size() > 0) {

    partner_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partner_id_);
  }
  if (from.partner_cert_id().size() > 0) {

    partner_cert_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partner_cert_id_);
  }
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.exercise_id().size() > 0) {

    exercise_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_id_);
  }
  if (from.exercise_name().size() > 0) {

    exercise_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_name_);
  }
  if (from.entity_state_pdu().size() > 0) {

    entity_state_pdu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_state_pdu_);
  }
  if (from.force_color() != 0) {
    set_force_color(from.force_color());
  }
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partner_id_.Swap(&other->partner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partner_cert_id_.Swap(&other->partner_cert_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exercise_id_.Swap(&other->exercise_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exercise_name_.Swap(&other->exercise_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entity_state_pdu_.Swap(&other->entity_state_pdu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(force_color_, other->force_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDefinedMetadata::InitAsDefaultInstance() {
}
class UserDefinedMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDefinedMetadata::kKeyFieldNumber;
const int UserDefinedMetadata::kValueFieldNumber;
const int UserDefinedMetadata::kValueTypeFieldNumber;
const int UserDefinedMetadata::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDefinedMetadata::UserDefinedMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.UserDefinedMetadata)
}
UserDefinedMetadata::UserDefinedMetadata(const UserDefinedMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value_type().size() > 0) {
    value_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_type_);
  }
  unit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.unit_type().size() > 0) {
    unit_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_type_);
  }
  // @@protoc_insertion_point(copy_constructor:dlvc_api.UserDefinedMetadata)
}

void UserDefinedMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserDefinedMetadata::~UserDefinedMetadata() {
  // @@protoc_insertion_point(destructor:dlvc_api.UserDefinedMetadata)
  SharedDtor();
}

void UserDefinedMetadata::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserDefinedMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDefinedMetadata& UserDefinedMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDefinedMetadata_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void UserDefinedMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.UserDefinedMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserDefinedMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "dlvc_api.UserDefinedMetadata.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "dlvc_api.UserDefinedMetadata.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value_type(), ptr, ctx, "dlvc_api.UserDefinedMetadata.value_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unit_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_unit_type(), ptr, ctx, "dlvc_api.UserDefinedMetadata.unit_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserDefinedMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.UserDefinedMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.UserDefinedMetadata.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.UserDefinedMetadata.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value_type().data(), static_cast<int>(this->value_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.UserDefinedMetadata.value_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->unit_type().data(), static_cast<int>(this->unit_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.UserDefinedMetadata.unit_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.UserDefinedMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.UserDefinedMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserDefinedMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.UserDefinedMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // string value_type = 4;
  if (this->value_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_type().data(), static_cast<int>(this->value_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.value_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value_type(), output);
  }

  // string unit_type = 5;
  if (this->unit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unit_type().data(), static_cast<int>(this->unit_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.unit_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unit_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.UserDefinedMetadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDefinedMetadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.UserDefinedMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // string value_type = 4;
  if (this->value_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_type().data(), static_cast<int>(this->value_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.value_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->value_type(), target);
  }

  // string unit_type = 5;
  if (this->unit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unit_type().data(), static_cast<int>(this->unit_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.UserDefinedMetadata.unit_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->unit_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.UserDefinedMetadata)
  return target;
}

size_t UserDefinedMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.UserDefinedMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string value_type = 4;
  if (this->value_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value_type());
  }

  // string unit_type = 5;
  if (this->unit_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->unit_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDefinedMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.UserDefinedMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDefinedMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDefinedMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.UserDefinedMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.UserDefinedMetadata)
    MergeFrom(*source);
  }
}

void UserDefinedMetadata::MergeFrom(const UserDefinedMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.UserDefinedMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.value_type().size() > 0) {

    value_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_type_);
  }
  if (from.unit_type().size() > 0) {

    unit_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_type_);
  }
}

void UserDefinedMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.UserDefinedMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDefinedMetadata::CopyFrom(const UserDefinedMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.UserDefinedMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDefinedMetadata::IsInitialized() const {
  return true;
}

void UserDefinedMetadata::Swap(UserDefinedMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDefinedMetadata::InternalSwap(UserDefinedMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_type_.Swap(&other->value_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_type_.Swap(&other->unit_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDefinedMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageEncoding::InitAsDefaultInstance() {
}
class MessageEncoding::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageEncoding::kEncodingTypeFieldNumber;
const int MessageEncoding::kCustomEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageEncoding::MessageEncoding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.MessageEncoding)
}
MessageEncoding::MessageEncoding(const MessageEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_encoding_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.custom_encoding_type().size() > 0) {
    custom_encoding_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_encoding_type_);
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:dlvc_api.MessageEncoding)
}

void MessageEncoding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto.base);
  custom_encoding_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_type_ = 0;
}

MessageEncoding::~MessageEncoding() {
  // @@protoc_insertion_point(destructor:dlvc_api.MessageEncoding)
  SharedDtor();
}

void MessageEncoding::SharedDtor() {
  custom_encoding_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageEncoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageEncoding& MessageEncoding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageEncoding_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void MessageEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.MessageEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_encoding_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageEncoding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_encoding_type(static_cast<::dlvc_api::MessageEncoding_EncodingType>(val));
        } else goto handle_unusual;
        continue;
      // string custom_encoding_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_custom_encoding_type(), ptr, ctx, "dlvc_api.MessageEncoding.custom_encoding_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageEncoding::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.MessageEncoding)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::dlvc_api::MessageEncoding_EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_encoding_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_encoding_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dlvc_api.MessageEncoding.custom_encoding_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.MessageEncoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.MessageEncoding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageEncoding::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.MessageEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // string custom_encoding_type = 3;
  if (this->custom_encoding_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.MessageEncoding.custom_encoding_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_encoding_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.MessageEncoding)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageEncoding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.MessageEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // string custom_encoding_type = 3;
  if (this->custom_encoding_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_encoding_type().data(), static_cast<int>(this->custom_encoding_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dlvc_api.MessageEncoding.custom_encoding_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_encoding_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.MessageEncoding)
  return target;
}

size_t MessageEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.MessageEncoding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string custom_encoding_type = 3;
  if (this->custom_encoding_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->custom_encoding_type());
  }

  // .dlvc_api.MessageEncoding.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageEncoding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.MessageEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageEncoding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageEncoding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.MessageEncoding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.MessageEncoding)
    MergeFrom(*source);
  }
}

void MessageEncoding::MergeFrom(const MessageEncoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.MessageEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.custom_encoding_type().size() > 0) {

    custom_encoding_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_encoding_type_);
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void MessageEncoding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.MessageEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageEncoding::CopyFrom(const MessageEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.MessageEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageEncoding::IsInitialized() const {
  return true;
}

void MessageEncoding::Swap(MessageEncoding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageEncoding::InternalSwap(MessageEncoding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_encoding_type_.Swap(&other->custom_encoding_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoding_type_, other->encoding_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageEncoding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kPitchFieldNumber;
const int Position::kYawFieldNumber;
const int Position::kRollFieldNumber;
const int Position::kRadiusMetersFieldNumber;
const int Position::kResolutionMetersFieldNumber;
const int Position::kTfomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&tfom_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(tfom_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tfom_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(tfom_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:dlvc_api.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tfom_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(tfom_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radius_meters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          radius_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float resolution_meters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          resolution_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .dlvc_api.Position.TFOM tfom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tfom(static_cast<::dlvc_api::Position_TFOM>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.Position)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float latitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius_meters = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_meters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float resolution_meters = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_meters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dlvc_api.Position.TFOM tfom = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tfom(static_cast< ::dlvc_api::Position_TFOM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // float longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // float pitch = 4;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->pitch(), output);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->yaw(), output);
  }

  // float roll = 6;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->roll(), output);
  }

  // float radius_meters = 7;
  if (!(this->radius_meters() <= 0 && this->radius_meters() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->radius_meters(), output);
  }

  // float resolution_meters = 8;
  if (!(this->resolution_meters() <= 0 && this->resolution_meters() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->resolution_meters(), output);
  }

  // .dlvc_api.Position.TFOM tfom = 9;
  if (this->tfom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->tfom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.Position)
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // float longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // float pitch = 4;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->pitch(), target);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->yaw(), target);
  }

  // float roll = 6;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->roll(), target);
  }

  // float radius_meters = 7;
  if (!(this->radius_meters() <= 0 && this->radius_meters() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->radius_meters(), target);
  }

  // float resolution_meters = 8;
  if (!(this->resolution_meters() <= 0 && this->resolution_meters() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->resolution_meters(), target);
  }

  // .dlvc_api.Position.TFOM tfom = 9;
  if (this->tfom() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->tfom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 4;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 6;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float radius_meters = 7;
  if (!(this->radius_meters() <= 0 && this->radius_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float resolution_meters = 8;
  if (!(this->resolution_meters() <= 0 && this->resolution_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // .dlvc_api.Position.TFOM tfom = 9;
  if (this->tfom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tfom());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    set_pitch(from.pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    set_roll(from.roll());
  }
  if (!(from.radius_meters() <= 0 && from.radius_meters() >= 0)) {
    set_radius_meters(from.radius_meters());
  }
  if (!(from.resolution_meters() <= 0 && from.resolution_meters() >= 0)) {
    set_resolution_meters(from.resolution_meters());
  }
  if (from.tfom() != 0) {
    set_tfom(from.tfom());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(radius_meters_, other->radius_meters_);
  swap(resolution_meters_, other->resolution_meters_);
  swap(tfom_, other->tfom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionBoundingBox::InitAsDefaultInstance() {
}
class PositionBoundingBox::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionBoundingBox::kMinLatitudeFieldNumber;
const int PositionBoundingBox::kMaxLatitudeFieldNumber;
const int PositionBoundingBox::kMinLongitudeFieldNumber;
const int PositionBoundingBox::kMaxLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionBoundingBox::PositionBoundingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlvc_api.PositionBoundingBox)
}
PositionBoundingBox::PositionBoundingBox(const PositionBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_latitude_, &from.min_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  // @@protoc_insertion_point(copy_constructor:dlvc_api.PositionBoundingBox)
}

void PositionBoundingBox::SharedCtor() {
  ::memset(&min_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_longitude_) -
      reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
}

PositionBoundingBox::~PositionBoundingBox() {
  // @@protoc_insertion_point(destructor:dlvc_api.PositionBoundingBox)
  SharedDtor();
}

void PositionBoundingBox::SharedDtor() {
}

void PositionBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionBoundingBox& PositionBoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionBoundingBox_dlvc_5fapi_2fdlvc_2eproto.base);
  return *internal_default_instance();
}


void PositionBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:dlvc_api.PositionBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_longitude_) -
      reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionBoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          max_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionBoundingBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlvc_api.PositionBoundingBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_latitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_latitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_longitude = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_longitude = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlvc_api.PositionBoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlvc_api.PositionBoundingBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionBoundingBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlvc_api.PositionBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_latitude = 2;
  if (!(this->min_latitude() <= 0 && this->min_latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->min_latitude(), output);
  }

  // float max_latitude = 3;
  if (!(this->max_latitude() <= 0 && this->max_latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->max_latitude(), output);
  }

  // float min_longitude = 4;
  if (!(this->min_longitude() <= 0 && this->min_longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->min_longitude(), output);
  }

  // float max_longitude = 5;
  if (!(this->max_longitude() <= 0 && this->max_longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->max_longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlvc_api.PositionBoundingBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionBoundingBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlvc_api.PositionBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_latitude = 2;
  if (!(this->min_latitude() <= 0 && this->min_latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->min_latitude(), target);
  }

  // float max_latitude = 3;
  if (!(this->max_latitude() <= 0 && this->max_latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->max_latitude(), target);
  }

  // float min_longitude = 4;
  if (!(this->min_longitude() <= 0 && this->min_longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->min_longitude(), target);
  }

  // float max_longitude = 5;
  if (!(this->max_longitude() <= 0 && this->max_longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->max_longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlvc_api.PositionBoundingBox)
  return target;
}

size_t PositionBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dlvc_api.PositionBoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_latitude = 2;
  if (!(this->min_latitude() <= 0 && this->min_latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_latitude = 3;
  if (!(this->max_latitude() <= 0 && this->max_latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_longitude = 4;
  if (!(this->min_longitude() <= 0 && this->min_longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_longitude = 5;
  if (!(this->max_longitude() <= 0 && this->max_longitude() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionBoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dlvc_api.PositionBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionBoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionBoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dlvc_api.PositionBoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dlvc_api.PositionBoundingBox)
    MergeFrom(*source);
  }
}

void PositionBoundingBox::MergeFrom(const PositionBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dlvc_api.PositionBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_latitude() <= 0 && from.min_latitude() >= 0)) {
    set_min_latitude(from.min_latitude());
  }
  if (!(from.max_latitude() <= 0 && from.max_latitude() >= 0)) {
    set_max_latitude(from.max_latitude());
  }
  if (!(from.min_longitude() <= 0 && from.min_longitude() >= 0)) {
    set_min_longitude(from.min_longitude());
  }
  if (!(from.max_longitude() <= 0 && from.max_longitude() >= 0)) {
    set_max_longitude(from.max_longitude());
  }
}

void PositionBoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dlvc_api.PositionBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionBoundingBox::CopyFrom(const PositionBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dlvc_api.PositionBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBoundingBox::IsInitialized() const {
  return true;
}

void PositionBoundingBox::Swap(PositionBoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionBoundingBox::InternalSwap(PositionBoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_latitude_, other->min_latitude_);
  swap(max_latitude_, other->max_latitude_);
  swap(min_longitude_, other->min_longitude_);
  swap(max_longitude_, other->max_longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dlvc_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dlvc_api::PushRawMessageRequest* Arena::CreateMaybeMessage< ::dlvc_api::PushRawMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::PushRawMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::PushRawMessageResponse* Arena::CreateMaybeMessage< ::dlvc_api::PushRawMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::PushRawMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::PushRawMessagesRequest* Arena::CreateMaybeMessage< ::dlvc_api::PushRawMessagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::PushRawMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::PushRawMessagesResponse* Arena::CreateMaybeMessage< ::dlvc_api::PushRawMessagesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::PushRawMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::DuplicateDetails* Arena::CreateMaybeMessage< ::dlvc_api::DuplicateDetails >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::DuplicateDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::GetRawMessageRequest* Arena::CreateMaybeMessage< ::dlvc_api::GetRawMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::GetRawMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::GetRawMessageResponse* Arena::CreateMaybeMessage< ::dlvc_api::GetRawMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::GetRawMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::GetRawMessagesRequest* Arena::CreateMaybeMessage< ::dlvc_api::GetRawMessagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::GetRawMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::GetRawMessagesResponse* Arena::CreateMaybeMessage< ::dlvc_api::GetRawMessagesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::GetRawMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::SourceType* Arena::CreateMaybeMessage< ::dlvc_api::SourceType >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::SourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::TimeRange* Arena::CreateMaybeMessage< ::dlvc_api::TimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::SummarizeRequest* Arena::CreateMaybeMessage< ::dlvc_api::SummarizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::SummarizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::SummarizeResponse* Arena::CreateMaybeMessage< ::dlvc_api::SummarizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::SummarizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::ListMetadataValuesRequest* Arena::CreateMaybeMessage< ::dlvc_api::ListMetadataValuesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::ListMetadataValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::ListMetadataValuesResponse* Arena::CreateMaybeMessage< ::dlvc_api::ListMetadataValuesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::ListMetadataValuesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::ListExercisesRequest* Arena::CreateMaybeMessage< ::dlvc_api::ListExercisesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::ListExercisesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::ListExercisesResponse* Arena::CreateMaybeMessage< ::dlvc_api::ListExercisesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::ListExercisesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::WrappedMessage* Arena::CreateMaybeMessage< ::dlvc_api::WrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::WrappedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::Metadata* Arena::CreateMaybeMessage< ::dlvc_api::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::UserDefinedMetadata* Arena::CreateMaybeMessage< ::dlvc_api::UserDefinedMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::UserDefinedMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::MessageEncoding* Arena::CreateMaybeMessage< ::dlvc_api::MessageEncoding >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::MessageEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::Position* Arena::CreateMaybeMessage< ::dlvc_api::Position >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::dlvc_api::PositionBoundingBox* Arena::CreateMaybeMessage< ::dlvc_api::PositionBoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::dlvc_api::PositionBoundingBox >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
