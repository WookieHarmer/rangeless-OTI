# Code generated by protoc-gen-twirp_python v5.7.0, DO NOT EDIT.
# source: dlvc_api/dlvc_api.proto

try:
    import httplib
    from urllib2 import Request, HTTPError, urlopen
except ImportError:
    import http.client as httplib
    from urllib.request import Request, urlopen
    from urllib.error import HTTPError
import json
from google.protobuf import symbol_database as _symbol_database
import sys

_sym_db = _symbol_database.Default()

class TwirpException(httplib.HTTPException):
    def __init__(self, code, message, meta):
        self.code = code
        self.message = message
        self.meta = meta
        super(TwirpException, self).__init__(message)

    @classmethod
    def from_http_err(cls, err):
        try:
            jsonerr = json.load(err)
            code = jsonerr["code"]
            msg = jsonerr["msg"]
            meta = jsonerr.get("meta")
            if meta is None:
                meta = {}
        except:
            code = "internal"
            msg = "Error from intermediary with HTTP status code {} {}".format(
                err.code, httplib.responses[err.code],
            )
            meta = {}
        return cls(code, msg, meta)

class DLVCServiceClient(object):
    def __init__(self, server_address):
        """Creates a new client for the DLVCService service.

        Args:
            server_address: The address of the server to send requests to, in
                the full protocol://host:port form.
        """
        if sys.version_info[0] > 2:
            self.__target = server_address
        else:
            self.__target = server_address.encode('ascii')
        self.__service_name = "dlvc_api.DLVCService"

    def __make_request(self, body, full_method):
        req = Request(
            url=self.__target + "/twirp" + full_method,
            data=body,
            headers={"Content-Type": "application/protobuf"},
        )
        try:
            resp = urlopen(req)
        except HTTPError as err:
            raise TwirpException.from_http_err(err)

        return resp.read()

    def push_raw_message(self, push_raw_message_request):
        serialize = _sym_db.GetSymbol("dlvc_api.PushRawMessageRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.PushRawMessageResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "PushRawMessage")
        body = serialize(push_raw_message_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def push_raw_messages(self, push_raw_messages_request):
        serialize = _sym_db.GetSymbol("dlvc_api.PushRawMessagesRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.PushRawMessagesResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "PushRawMessages")
        body = serialize(push_raw_messages_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def get_raw_message(self, get_raw_message_request):
        serialize = _sym_db.GetSymbol("dlvc_api.GetRawMessageRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.GetRawMessageResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "GetRawMessage")
        body = serialize(get_raw_message_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def get_raw_messages(self, get_raw_messages_request):
        serialize = _sym_db.GetSymbol("dlvc_api.GetRawMessagesRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.GetRawMessagesResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "GetRawMessages")
        body = serialize(get_raw_messages_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def summarize(self, summarize_request):
        serialize = _sym_db.GetSymbol("dlvc_api.SummarizeRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.SummarizeResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "Summarize")
        body = serialize(summarize_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def list_metadata_values(self, list_metadata_values_request):
        serialize = _sym_db.GetSymbol("dlvc_api.ListMetadataValuesRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.ListMetadataValuesResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "ListMetadataValues")
        body = serialize(list_metadata_values_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

    def list_exercises(self, list_exercises_request):
        serialize = _sym_db.GetSymbol("dlvc_api.ListExercisesRequest").SerializeToString
        deserialize = _sym_db.GetSymbol("dlvc_api.ListExercisesResponse").FromString

        full_method = "/{}/{}".format(self.__service_name, "ListExercises")
        body = serialize(list_exercises_request)
        resp_str = self.__make_request(body=body, full_method=full_method)
        return deserialize(resp_str)

